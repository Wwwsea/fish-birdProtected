/*
 Navicat Premium Data Transfer

 Source Server         : Flaco
 Source Server Type    : MySQL
 Source Server Version : 80027
 Source Host           : localhost:3306
 Source Schema         : birdprotectedf2

 Target Server Type    : MySQL
 Target Server Version : 80027
 File Encoding         : 65001

 Date: 12/05/2024 14:42:48
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for b_category
-- ----------------------------
DROP TABLE IF EXISTS `b_category`;
CREATE TABLE `b_category`  (
  `id` int UNSIGNED NOT NULL AUTO_INCREMENT,
  `category_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `create_time` datetime NOT NULL,
  `update_time` datetime NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  `is_deleted` int NULL DEFAULT 0,
  `biology_branch` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '所属生物分支',
  `parent_id` int NULL DEFAULT 0 COMMENT '父id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 19 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of b_category
-- ----------------------------
INSERT INTO `b_category` VALUES (1, '鸵鸟目', '2024-03-14 13:30:27', '2024-04-20 15:26:20', 0, '目', 0);
INSERT INTO `b_category` VALUES (2, '美洲鸵鸟目', '2024-03-14 13:33:09', '2024-04-20 15:26:18', 0, '目', 0);
INSERT INTO `b_category` VALUES (3, '鹬鸵目', '2024-03-14 13:33:51', '2024-04-20 15:26:17', 0, '目', 0);
INSERT INTO `b_category` VALUES (4, '鹤鸵目', '2024-03-14 13:34:47', '2024-04-20 15:26:16', 0, '目', 0);
INSERT INTO `b_category` VALUES (5, '䲨形目', '2024-03-14 13:35:45', '2024-04-20 15:26:15', 0, '目', 0);
INSERT INTO `b_category` VALUES (6, '雁形目', '2024-03-14 13:37:02', '2024-04-20 15:26:15', 0, '目', 0);
INSERT INTO `b_category` VALUES (7, '叫鸭科', '2024-03-14 13:37:42', '2024-03-14 13:37:44', 0, '科', 6);
INSERT INTO `b_category` VALUES (8, '鹊雁科', '2024-03-14 13:38:20', '2024-03-14 13:38:21', 0, '科', 6);
INSERT INTO `b_category` VALUES (9, '鸭科', '2024-03-14 13:38:44', '2024-03-14 13:38:46', 0, '科', 6);
INSERT INTO `b_category` VALUES (10, '角叫鸭', '2024-03-14 13:39:14', '2024-03-14 13:39:15', 0, '属', 7);
INSERT INTO `b_category` VALUES (11, '黑颈冠叫鸭', '2024-03-14 13:40:47', '2024-03-14 13:40:49', 0, '属', 7);
INSERT INTO `b_category` VALUES (12, '冠叫鸭', '2024-03-14 13:41:12', '2024-03-14 13:41:15', 0, '属', 7);
INSERT INTO `b_category` VALUES (13, '鹊雁', '2024-03-14 13:42:33', '2024-03-14 13:42:34', 0, '属', 8);
INSERT INTO `b_category` VALUES (14, '白脸树鸭', '2024-03-14 13:43:18', '2024-03-14 13:43:20', 0, '属', 9);
INSERT INTO `b_category` VALUES (15, '黑腹树鸭', '2024-03-14 13:43:49', '2024-03-14 13:43:51', 0, '属', 9);
INSERT INTO `b_category` VALUES (16, '细斑树鸭', '2024-03-14 13:44:31', '2024-03-15 20:48:43', 0, '属', 9);
INSERT INTO `b_category` VALUES (17, 'testCate', '2024-04-20 15:35:00', '2024-04-20 15:43:03', 0, 'testBranch', 0);
INSERT INTO `b_category` VALUES (18, 'ttestCate', '2024-04-20 15:42:13', '2024-04-20 15:42:13', 0, 'ttestBranch', 17);
INSERT INTO `b_category` VALUES (19, 'tttestCate01', '2024-04-30 19:46:22', '2024-04-30 19:46:22', 1, 'tttestBranch01', 18);

-- ----------------------------
-- Table structure for qrtz_blob_triggers
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_blob_triggers`;
CREATE TABLE `qrtz_blob_triggers`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `TRIGGER_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `TRIGGER_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `BLOB_DATA` blob NULL,
  PRIMARY KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) USING BTREE,
  CONSTRAINT `qrtz_blob_triggers_ibfk_1` FOREIGN KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) REFERENCES `qrtz_triggers` (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of qrtz_blob_triggers
-- ----------------------------

-- ----------------------------
-- Table structure for qrtz_calendars
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_calendars`;
CREATE TABLE `qrtz_calendars`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `CALENDAR_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `CALENDAR` blob NOT NULL,
  PRIMARY KEY (`SCHED_NAME`, `CALENDAR_NAME`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of qrtz_calendars
-- ----------------------------

-- ----------------------------
-- Table structure for qrtz_cron_triggers
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_cron_triggers`;
CREATE TABLE `qrtz_cron_triggers`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `TRIGGER_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `TRIGGER_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `CRON_EXPRESSION` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `TIME_ZONE_ID` varchar(80) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  PRIMARY KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) USING BTREE,
  CONSTRAINT `qrtz_cron_triggers_ibfk_1` FOREIGN KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) REFERENCES `qrtz_triggers` (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of qrtz_cron_triggers
-- ----------------------------

-- ----------------------------
-- Table structure for qrtz_fired_triggers
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_fired_triggers`;
CREATE TABLE `qrtz_fired_triggers`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `ENTRY_ID` varchar(95) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `TRIGGER_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `TRIGGER_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `INSTANCE_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `FIRED_TIME` bigint NOT NULL,
  `SCHED_TIME` bigint NOT NULL,
  `PRIORITY` int NOT NULL,
  `STATE` varchar(16) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `JOB_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `JOB_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `IS_NONCONCURRENT` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `REQUESTS_RECOVERY` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  PRIMARY KEY (`SCHED_NAME`, `ENTRY_ID`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of qrtz_fired_triggers
-- ----------------------------
INSERT INTO `qrtz_fired_triggers` VALUES ('quartzScheduler', 'NON_CLUSTERED1715495970425', '6da64b5bd2ee-30be87f0-60c1-4fd7-925b-526a1d086cfa', 'DEFAULT', 'NON_CLUSTERED', 1715496150585, 1715496178508, 5, 'ACQUIRED', NULL, NULL, '0', '0');

-- ----------------------------
-- Table structure for qrtz_job_details
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_job_details`;
CREATE TABLE `qrtz_job_details`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `JOB_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `JOB_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `DESCRIPTION` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `JOB_CLASS_NAME` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `IS_DURABLE` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `IS_NONCONCURRENT` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `IS_UPDATE_DATA` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `REQUESTS_RECOVERY` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `JOB_DATA` blob NULL,
  PRIMARY KEY (`SCHED_NAME`, `JOB_NAME`, `JOB_GROUP`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of qrtz_job_details
-- ----------------------------
INSERT INTO `qrtz_job_details` VALUES ('quartzScheduler', 'refreshTheCache', 'DEFAULT', '任务描述：用于每五分钟刷新一次常用数据缓存', 'com.fish.birdProducted.quartz.RefreshTheCache', '1', '0', '0', '0', 0x

-- ----------------------------
-- Table structure for qrtz_locks
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_locks`;
CREATE TABLE `qrtz_locks`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `LOCK_NAME` varchar(40) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  PRIMARY KEY (`SCHED_NAME`, `LOCK_NAME`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of qrtz_locks
-- ----------------------------

-- ----------------------------
-- Table structure for qrtz_paused_trigger_grps
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_paused_trigger_grps`;
CREATE TABLE `qrtz_paused_trigger_grps`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `TRIGGER_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  PRIMARY KEY (`SCHED_NAME`, `TRIGGER_GROUP`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of qrtz_paused_trigger_grps
-- ----------------------------

-- ----------------------------
-- Table structure for qrtz_scheduler_state
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_scheduler_state`;
CREATE TABLE `qrtz_scheduler_state`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `INSTANCE_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `LAST_CHECKIN_TIME` bigint NOT NULL,
  `CHECKIN_INTERVAL` bigint NOT NULL,
  PRIMARY KEY (`SCHED_NAME`, `INSTANCE_NAME`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of qrtz_scheduler_state
-- ----------------------------

-- ----------------------------
-- Table structure for qrtz_simple_triggers
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_simple_triggers`;
CREATE TABLE `qrtz_simple_triggers`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `TRIGGER_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `TRIGGER_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `REPEAT_COUNT` bigint NOT NULL,
  `REPEAT_INTERVAL` bigint NOT NULL,
  `TIMES_TRIGGERED` bigint NOT NULL,
  PRIMARY KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) USING BTREE,
  CONSTRAINT `qrtz_simple_triggers_ibfk_1` FOREIGN KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) REFERENCES `qrtz_triggers` (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of qrtz_simple_triggers
-- ----------------------------
INSERT INTO `qrtz_simple_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-2b035887-20bf-4c28-9a63-03c750d1f6a1', 'DEFAULT', -1, 300000, 300);
INSERT INTO `qrtz_simple_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-30be87f0-60c1-4fd7-925b-526a1d086cfa', 'DEFAULT', -1, 300000, 1762);
INSERT INTO `qrtz_simple_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-4c62536e-e1a4-4e38-acb2-86fbeac66bd4', 'DEFAULT', -1, 300000, 261);
INSERT INTO `qrtz_simple_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-4e87b7dd-072c-4e1c-ad79-e1419cab2672', 'DEFAULT', -1, 300000, 834);
INSERT INTO `qrtz_simple_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-5167ed7a-7121-46ff-b90a-3d9af29a96c2', 'DEFAULT', -1, 300000, 262);
INSERT INTO `qrtz_simple_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-5d50f084-a84a-4020-b2ec-5c2b28d94230', 'DEFAULT', -1, 300000, 1);
INSERT INTO `qrtz_simple_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-611cdfbb-fe95-472b-9618-cdbcd7ecabd9', 'DEFAULT', -1, 300000, 2);
INSERT INTO `qrtz_simple_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-667e7360-5ffa-4145-a2b5-4e0ba988b00d', 'DEFAULT', -1, 300000, 275);
INSERT INTO `qrtz_simple_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-8300fdbe-6a16-4c44-a2a6-d62ddfe5e6e6', 'DEFAULT', -1, 300000, 275);
INSERT INTO `qrtz_simple_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-9120d06c-77e7-4f31-841e-38ec962c15fd', 'DEFAULT', -1, 300000, 300);
INSERT INTO `qrtz_simple_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-9bac7a32-51fe-4e73-8541-b2d4ed7eccb1', 'DEFAULT', -1, 300000, 277);
INSERT INTO `qrtz_simple_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-a6906567-c161-4cd6-8421-b131c6dce52d', 'DEFAULT', -1, 300000, 909);
INSERT INTO `qrtz_simple_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-aaf4b427-fb60-475b-afd6-740cf199af5b', 'DEFAULT', -1, 300000, 272);
INSERT INTO `qrtz_simple_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-b5b8582f-b023-4da2-8d53-c0340f952920', 'DEFAULT', -1, 300000, 272);
INSERT INTO `qrtz_simple_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-b7b21109-4b10-416f-a02a-74bcdb176f45', 'DEFAULT', -1, 300000, 260);
INSERT INTO `qrtz_simple_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-b808d1c5-6b00-459f-86ae-cb4460a7ce92', 'DEFAULT', -1, 300000, 302);
INSERT INTO `qrtz_simple_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-b8a04fc5-b5a7-4511-88f9-ba70f76ee09c', 'DEFAULT', -1, 300000, 1651);
INSERT INTO `qrtz_simple_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-c0cdfdc3-01ee-46cc-aec5-19c17fc12fa7', 'DEFAULT', -1, 300000, 340);
INSERT INTO `qrtz_simple_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-c8bee5b8-4f42-4bb4-826c-60f549d8002c', 'DEFAULT', -1, 300000, 555);
INSERT INTO `qrtz_simple_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-ccdb4054-6a9f-4e66-8435-638ac4d06f8a', 'DEFAULT', -1, 300000, 276);
INSERT INTO `qrtz_simple_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-d2f63d73-0055-42ed-8b44-e38220a1550f', 'DEFAULT', -1, 300000, 909);
INSERT INTO `qrtz_simple_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-e5b3501f-1c33-489d-96e0-f508cde2f133', 'DEFAULT', -1, 300000, 1120);
INSERT INTO `qrtz_simple_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-eaa6c3ce-5017-4d47-aa9e-a4e25a898f06', 'DEFAULT', -1, 300000, 274);
INSERT INTO `qrtz_simple_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-eb595747-7289-4eae-a943-4cdc5de6f210', 'DEFAULT', -1, 300000, 637);
INSERT INTO `qrtz_simple_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-f2a2b6af-b945-4f2e-b116-8c9faae0f04b', 'DEFAULT', -1, 300000, 260);
INSERT INTO `qrtz_simple_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-f9988c88-fb16-4237-9ca5-55cfb5355381', 'DEFAULT', -1, 300000, 301);
INSERT INTO `qrtz_simple_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-fddb3b3e-e281-405d-ac9d-a97e749aa652', 'DEFAULT', -1, 300000, 260);

-- ----------------------------
-- Table structure for qrtz_simprop_triggers
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_simprop_triggers`;
CREATE TABLE `qrtz_simprop_triggers`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `TRIGGER_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `TRIGGER_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `STR_PROP_1` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `STR_PROP_2` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `STR_PROP_3` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `INT_PROP_1` int NULL DEFAULT NULL,
  `INT_PROP_2` int NULL DEFAULT NULL,
  `LONG_PROP_1` bigint NULL DEFAULT NULL,
  `LONG_PROP_2` bigint NULL DEFAULT NULL,
  `DEC_PROP_1` decimal(13, 4) NULL DEFAULT NULL,
  `DEC_PROP_2` decimal(13, 4) NULL DEFAULT NULL,
  `BOOL_PROP_1` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `BOOL_PROP_2` varchar(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  PRIMARY KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) USING BTREE,
  CONSTRAINT `qrtz_simprop_triggers_ibfk_1` FOREIGN KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) REFERENCES `qrtz_triggers` (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of qrtz_simprop_triggers
-- ----------------------------

-- ----------------------------
-- Table structure for qrtz_triggers
-- ----------------------------
DROP TABLE IF EXISTS `qrtz_triggers`;
CREATE TABLE `qrtz_triggers`  (
  `SCHED_NAME` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `TRIGGER_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `TRIGGER_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `JOB_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `JOB_GROUP` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `DESCRIPTION` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `NEXT_FIRE_TIME` bigint NULL DEFAULT NULL,
  `PREV_FIRE_TIME` bigint NULL DEFAULT NULL,
  `PRIORITY` int NULL DEFAULT NULL,
  `TRIGGER_STATE` varchar(16) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `TRIGGER_TYPE` varchar(8) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `START_TIME` bigint NOT NULL,
  `END_TIME` bigint NULL DEFAULT NULL,
  `CALENDAR_NAME` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,
  `MISFIRE_INSTR` smallint NULL DEFAULT NULL,
  `JOB_DATA` blob NULL,
  PRIMARY KEY (`SCHED_NAME`, `TRIGGER_NAME`, `TRIGGER_GROUP`) USING BTREE,
  INDEX `SCHED_NAME`(`SCHED_NAME` ASC, `JOB_NAME` ASC, `JOB_GROUP` ASC) USING BTREE,
  CONSTRAINT `qrtz_triggers_ibfk_1` FOREIGN KEY (`SCHED_NAME`, `JOB_NAME`, `JOB_GROUP`) REFERENCES `qrtz_job_details` (`SCHED_NAME`, `JOB_NAME`, `JOB_GROUP`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of qrtz_triggers
-- ----------------------------
INSERT INTO `qrtz_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-2b035887-20bf-4c28-9a63-03c750d1f6a1', 'DEFAULT', 'refreshTheCache', 'DEFAULT', NULL, 1715496311437, 1715496011437, 5, 'WAITING', 'SIMPLE', 1715406311437, 0, NULL, 0, '');
INSERT INTO `qrtz_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-30be87f0-60c1-4fd7-925b-526a1d086cfa', 'DEFAULT', 'refreshTheCache', 'DEFAULT', NULL, 1715496178508, 1715495878508, 5, 'ACQUIRED', 'SIMPLE', 1714967578508, 0, NULL, 0, '');
INSERT INTO `qrtz_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-4c62536e-e1a4-4e38-acb2-86fbeac66bd4', 'DEFAULT', 'refreshTheCache', 'DEFAULT', NULL, 1715496366248, 1715496066248, 5, 'WAITING', 'SIMPLE', 1715418066248, 0, NULL, 0, '');
INSERT INTO `qrtz_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-4e87b7dd-072c-4e1c-ad79-e1419cab2672', 'DEFAULT', 'refreshTheCache', 'DEFAULT', NULL, 1715496354740, 1715496054740, 5, 'WAITING', 'SIMPLE', 1715246154740, 0, NULL, 0, '');
INSERT INTO `qrtz_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-5167ed7a-7121-46ff-b90a-3d9af29a96c2', 'DEFAULT', 'refreshTheCache', 'DEFAULT', NULL, 1715496377713, 1715496077713, 5, 'WAITING', 'SIMPLE', 1715417777713, 0, NULL, 0, '');
INSERT INTO `qrtz_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-5d50f084-a84a-4020-b2ec-5c2b28d94230', 'DEFAULT', 'refreshTheCache', 'DEFAULT', NULL, 1715496269645, 1715495969645, 5, 'WAITING', 'SIMPLE', 1715495969645, 0, NULL, 0, '');
INSERT INTO `qrtz_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-611cdfbb-fe95-472b-9618-cdbcd7ecabd9', 'DEFAULT', 'refreshTheCache', 'DEFAULT', NULL, 1715496402244, 1715496102244, 5, 'WAITING', 'SIMPLE', 1715495802244, 0, NULL, 0, '');
INSERT INTO `qrtz_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-667e7360-5ffa-4145-a2b5-4e0ba988b00d', 'DEFAULT', 'refreshTheCache', 'DEFAULT', NULL, 1715496250953, 1715495950953, 5, 'WAITING', 'SIMPLE', 1715413750953, 0, NULL, 0, '');
INSERT INTO `qrtz_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-8300fdbe-6a16-4c44-a2a6-d62ddfe5e6e6', 'DEFAULT', 'refreshTheCache', 'DEFAULT', NULL, 1715496340146, 1715496040146, 5, 'WAITING', 'SIMPLE', 1715413840146, 0, NULL, 0, '');
INSERT INTO `qrtz_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-9120d06c-77e7-4f31-841e-38ec962c15fd', 'DEFAULT', 'refreshTheCache', 'DEFAULT', NULL, 1715496253041, 1715495953041, 5, 'WAITING', 'SIMPLE', 1715406253041, 0, NULL, 0, '');
INSERT INTO `qrtz_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-9bac7a32-51fe-4e73-8541-b2d4ed7eccb1', 'DEFAULT', 'refreshTheCache', 'DEFAULT', NULL, 1715496450573, 1715496150573, 5, 'WAITING', 'SIMPLE', 1715413350573, 0, NULL, 0, '');
INSERT INTO `qrtz_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-a6906567-c161-4cd6-8421-b131c6dce52d', 'DEFAULT', 'refreshTheCache', 'DEFAULT', NULL, 1715496375704, 1715496075704, 5, 'WAITING', 'SIMPLE', 1715223675704, 0, NULL, 0, '');
INSERT INTO `qrtz_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-aaf4b427-fb60-475b-afd6-740cf199af5b', 'DEFAULT', 'refreshTheCache', 'DEFAULT', NULL, 1715496362620, 1715496062620, 5, 'WAITING', 'SIMPLE', 1715414762620, 0, NULL, 0, '');
INSERT INTO `qrtz_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-b5b8582f-b023-4da2-8d53-c0340f952920', 'DEFAULT', 'refreshTheCache', 'DEFAULT', NULL, 1715496383328, 1715496083328, 5, 'WAITING', 'SIMPLE', 1715414783328, 0, NULL, 0, '');
INSERT INTO `qrtz_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-b7b21109-4b10-416f-a02a-74bcdb176f45', 'DEFAULT', 'refreshTheCache', 'DEFAULT', NULL, 1715496413108, 1715496113108, 5, 'WAITING', 'SIMPLE', 1715418413108, 0, NULL, 0, '');
INSERT INTO `qrtz_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-b808d1c5-6b00-459f-86ae-cb4460a7ce92', 'DEFAULT', 'refreshTheCache', 'DEFAULT', NULL, 1715496220441, 1715495920441, 5, 'WAITING', 'SIMPLE', 1715405620441, 0, NULL, 0, '');
INSERT INTO `qrtz_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-b8a04fc5-b5a7-4511-88f9-ba70f76ee09c', 'DEFAULT', 'refreshTheCache', 'DEFAULT', NULL, 1715496388902, 1715496088902, 5, 'WAITING', 'SIMPLE', 1715001088902, 0, NULL, 0, '');
INSERT INTO `qrtz_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-c0cdfdc3-01ee-46cc-aec5-19c17fc12fa7', 'DEFAULT', 'refreshTheCache', 'DEFAULT', NULL, 1715496191044, 1715495891044, 5, 'WAITING', 'SIMPLE', 1715394191044, 0, NULL, 0, '');
INSERT INTO `qrtz_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-c8bee5b8-4f42-4bb4-826c-60f549d8002c', 'DEFAULT', 'refreshTheCache', 'DEFAULT', NULL, 1715496321824, 1715496021824, 5, 'WAITING', 'SIMPLE', 1715329821824, 0, NULL, 0, '');
INSERT INTO `qrtz_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-ccdb4054-6a9f-4e66-8435-638ac4d06f8a', 'DEFAULT', 'refreshTheCache', 'DEFAULT', NULL, 1715496396874, 1715496096874, 5, 'WAITING', 'SIMPLE', 1715413596874, 0, NULL, 0, '');
INSERT INTO `qrtz_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-d2f63d73-0055-42ed-8b44-e38220a1550f', 'DEFAULT', 'refreshTheCache', 'DEFAULT', NULL, 1715496218531, 1715495918531, 5, 'WAITING', 'SIMPLE', 1715223518531, 0, NULL, 0, '');
INSERT INTO `qrtz_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-e5b3501f-1c33-489d-96e0-f508cde2f133', 'DEFAULT', 'refreshTheCache', 'DEFAULT', NULL, 1715496317261, 1715496017261, 5, 'WAITING', 'SIMPLE', 1715160317261, 0, NULL, 0, '');
INSERT INTO `qrtz_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-eaa6c3ce-5017-4d47-aa9e-a4e25a898f06', 'DEFAULT', 'refreshTheCache', 'DEFAULT', NULL, 1715496429475, 1715496129475, 5, 'WAITING', 'SIMPLE', 1715414229475, 0, NULL, 0, '');
INSERT INTO `qrtz_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-eb595747-7289-4eae-a943-4cdc5de6f210', 'DEFAULT', 'refreshTheCache', 'DEFAULT', NULL, 1715496336662, 1715496036662, 5, 'WAITING', 'SIMPLE', 1715305236662, 0, NULL, 0, '');
INSERT INTO `qrtz_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-f2a2b6af-b945-4f2e-b116-8c9faae0f04b', 'DEFAULT', 'refreshTheCache', 'DEFAULT', NULL, 1715496412240, 1715496112240, 5, 'WAITING', 'SIMPLE', 1715418412240, 0, NULL, 0, '');
INSERT INTO `qrtz_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-f9988c88-fb16-4237-9ca5-55cfb5355381', 'DEFAULT', 'refreshTheCache', 'DEFAULT', NULL, 1715496387348, 1715496087348, 5, 'WAITING', 'SIMPLE', 1715406087348, 0, NULL, 0, '');
INSERT INTO `qrtz_triggers` VALUES ('quartzScheduler', '6da64b5bd2ee-fddb3b3e-e281-405d-ac9d-a97e749aa652', 'DEFAULT', 'refreshTheCache', 'DEFAULT', NULL, 1715496441182, 1715496141182, 5, 'WAITING', 'SIMPLE', 1715418441182, 0, NULL, 0, '');

-- ----------------------------
-- Table structure for sys_log
-- ----------------------------
DROP TABLE IF EXISTS `sys_log`;
CREATE TABLE `sys_log`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '编号',
  `module` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '模块名称',
  `operation` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作',
  `user_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作人员',
  `ip` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT 'ip地址',
  `address` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作地点',
  `state` tinyint(1) NOT NULL COMMENT '操作状态(0：成功，1：失败，2：异常)',
  `method` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作方法',
  `req_parameter` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL COMMENT '请求参数',
  `req_mapping` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '请求方式',
  `exception` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL COMMENT '异常信息',
  `return_parameter` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL COMMENT '返回参数',
  `req_address` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '请求地址',
  `time` bigint NOT NULL COMMENT '消耗时间(ms)',
  `description` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '接口描述',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NOT NULL COMMENT '更新时间',
  `is_deleted` tinyint(1) NOT NULL DEFAULT 0 COMMENT '是否删除（0：未删除，1：已删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 3130 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_log
-- ----------------------------
INSERT INTO `sys_log` VALUES (2867, '邮件发送', '邮件发送', 'unknown-1702606997', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.PublicController.askVerifyCode()', '[\"2667657399@qq.com\",\"register\"]', 'GET', NULL, '{\"code\":200,\"data\":\"验证码已发送，请注意查收！\",\"msg\":\"success\"}', '/public/ask-code', 22, '邮件发送', '2024-03-11 19:10:50', '2024-03-11 19:10:50', 0);
INSERT INTO `sys_log` VALUES (2868, '前台注册', '新增', 'unknown-1702606997', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.UserController.register()', '[{\"code\":\"332774\",\"email\":\"2667657399@qq.com\",\"password\":\"123456\",\"username\":\"fish\"}]', 'POST', NULL, '{\"code\":200,\"msg\":\"success\"}', '/user/register', 82, '用户注册', '2024-03-11 19:11:43', '2024-03-11 19:11:43', 0);
INSERT INTO `sys_log` VALUES (2869, '用户管理', '修改', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.UserController.updateStatus()', '[{\"id\":1,\"status\":1}]', 'POST', NULL, '{\"code\":200,\"msg\":\"success\"}', '/user/update/status', 6, '更新用户状态', '2024-03-12 15:36:53', '2024-03-12 15:36:53', 0);
INSERT INTO `sys_log` VALUES (2870, '用户管理', '修改', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.UserController.updateStatus()', '[{\"id\":1,\"status\":0}]', 'POST', NULL, '{\"code\":200,\"msg\":\"success\"}', '/user/update/status', 4, '更新用户状态', '2024-03-12 15:36:55', '2024-03-12 15:36:55', 0);
INSERT INTO `sys_log` VALUES (2871, '分类管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CategoryController.listArticleCategory()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":1,\"categoryName\":\"生活\",\"createTime\":1697306622000,\"id\":1,\"updateTime\":1697306625000},{\"articleCount\":2,\"categoryName\":\"技术\",\"createTime\":1697306633000,\"id\":2,\"updateTime\":1697306636000},{\"articleCount\":1,\"categoryName\":\"娱乐\",\"createTime\":1697306644000,\"id\":3,\"updateTime\":1697306646000},{\"articleCount\":1,\"categoryName\":\"分类\",\"createTime\":1704338607000,\"id\":4,\"updateTime\":1704338607000}],\"msg\":\"success\"}', '/category/back/list', 12, '获取分类列表', '2024-03-12 15:37:52', '2024-03-12 15:37:52', 0);
INSERT INTO `sys_log` VALUES (2872, '标签管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.listArticleTag()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":1,\"createTime\":1697306548000,\"id\":1,\"tagName\":\"java\",\"updateTime\":1697306550000},{\"articleCount\":9,\"createTime\":1697306573000,\"id\":2,\"tagName\":\"python\",\"updateTime\":1697306575000},{\"articleCount\":10,\"createTime\":1697306586000,\"id\":3,\"tagName\":\"c#\",\"updateTime\":1697306589000},{\"articleCount\":4,\"createTime\":1697306603000,\"id\":4,\"tagName\":\"c++\",\"updateTime\":1697306605000},{\"articleCount\":6,\"createTime\":1697383039000,\"id\":5,\"tagName\":\"开心\",\"updateTime\":1697383042000}],\"msg\":\"success\"}', '/tag/back/list', 13, '获取标签列表', '2024-03-12 15:37:55', '2024-03-12 15:37:55', 0);
INSERT INTO `sys_log` VALUES (2873, '留言管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LeaveWordController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"content\":\"## 测试比较长的留言\\\\n\\\\n> 下面是一篇 c# 笔记\\\\n\\\\n<center>\\\\n    <h1>C#笔记</h1>\\\\n</center>\\\\n\\\\n\\\\n\\\\n[TOC] \\\\n\\\\n### 1、C#访问修饰符\\\\n\\\\n​\\\\t\\\\t在C#当中的访问修饰符及作用范围如下：\\\\n\\\\n|     访问修饰符     |                        说明                        |\\\\n| :----------------: | :------------------------------------------------: |\\\\n|       public       |              共有访问。不受任何限制。              |\\\\n|      private       |      私有访问。只有本类能访问，实例不能访问。      |\\\\n|     protected      |   保护访问。只限于本类和子类访问，实例不能访问。   |\\\\n|      internal      |      内部访问。只限于本项目访问，其他不能访问      |\\\\n| protected internal | 内部保护访问。只限于本项目或子类访问，其他不能访问 |\\\\n\\\\n​\\\\t\\\\tC#成员类型的可修饰及默认修饰符如下：\\\\n\\\\n| 成员类型  | 默认修饰符 |                           可被修饰                           |\\\\n| :-------: | :--------: | :----------------------------------------------------------: |\\\\n|   enum    |   public   |                             none                             |\\\\n|   class   |  private   | public、protected、internal、private、<br />protected internal |\\\\n| interface |   public   |                             none                             |\\\\n|  struct   |  private   |                  public、internal、private                   |\\\\n\\\\n> public 访问级别最高\\\\n>\\\\n> private 访问级别最低\\\\n\\\\n### 2、this 关键字\\\\n\\\\n看以下代码，有什么问题：\\\\n\\\\n```C#\\\\nclass Strdent\\\\n{\\\\n    private string _name;\\\\t//姓名\\\\t\\\\n    public int _age = 19;\\\\t//年龄\\\\n    public string _cardID = \\\\\\\"145236985674526685\\\\\\\";\\\\t//身份证号码\\\\n    public void SetName(string _name)\\\\n    {\\\\n        _name = _name;\\\\n    }\\\\n}\\\\n```\\\\n\\\\n分析： 在 Student 类中定义了一个 private 成员变量 _name,在 SetName()方法的参数中也定义了一个与之同名的变量 _name。这时编译器会发现成员变量和方法的参数重名了。\\\\n此时，编译器无法分辨代码中出现的这两个 _name 那个是成员变量，哪个是方法中的参数。我们可以借助 this 关键字来解决这个问题。\\\\n\\\\n> this 关键字是指当前对象本身。通过 this 可以引用当前类的成员变量和方法。\\\\n\\\\n因此可以改变以上代码为：\\\\n\\\\n```C#\\\\nclass Strdent\\\\n{\\\\n    private string _name;\\\\t//姓名\\\\t\\\\n    public int _age = 19;\\\\t//年龄\\\\n    public string _cardID = \\\\\\\"145236985674526685\\\\\\\";\\\\t//身份证号码\\\\n    public void SetName(string _name)\\\\n    {\\\\n        this._name = _name;\\\\n    }\\\\n}\\\\n```\\\\n\\\\n> 使用 this 关键字可以解决成员变量和局部变量名称冲突的问题。\\\\n\\\\n### 3、C#属性\\\\n\\\\n#### 3.1、用方法保证数据安全\",\"createTime\":1705378527000,\"id\":13,\"isCheck\":1,\"updateTime\":1705378527000,\"userName\":\"ADMIN\"},{\"content\":\"# \\\\u6DFB\\\\u52A0\\\\u7559\\\\u8A00\\\\u677F\\\\\\\\n\\\\\\\\n* \\\\u6DFB\\\\u52A0\\\\u6D4B\\\\u8BD5\\\\\\\\n* dddd\",\"createTime\":1705381840000,\"id\":23,\"isCheck\":1,\"updateTime\":1705381840000,\"userName\":\"ADMIN\"},{\"content\":\"# 添加留言板\\n\\n* 添加测试aaa\",\"createTime\":1705382184000,\"id\":24,\"isCheck\":1,\"updateTime\":1705382184000,\"userName\":\"ADMIN\"},{\"content\":\"## 测试比较长的留言\\n\\n> 下面是一篇 c# 笔记\\n\\n<center>\\n    <h1>C#笔记</h1>\\n</center>\\n\\n\\n\\n[TOC] \\n\\n### 1、C#访问修饰符\\n\\n​\\t\\t在C#当中的访问修饰符及作用范围如下：\\n\\n|     访问修饰符     |                        说明                        |\\n| :----------------: | :------------------------------------------------: |\\n|       public       |              共有访问。不受任何限制。              |\\n|      private       |      私有访问。只有本类能访问，实例不能访问。      |\\n|     protected      |   保护访问。只限于本类和子类访问，实例不能访问。   |\\n|      internal      |      内部访问。只限于本项目访问，其他不能访问      |\\n| protected internal | 内部保护访问。只限于本项目或子类访问，其他不能访问 |\\n\\n​\\t\\tC#成员类型的可修饰及默认修饰符如下：\\n\\n| 成员类型  | 默认修饰符 |                           可被修饰                           |\\n| :-------: | :--------: | :----------------------------------------------------------: |\\n|   enum    |   public   |                             none                             |\\n|   class   |  private   | public、protected、internal、private、<br />protected internal |\\n| interface |   public   |                             none                             |\\n|  struct   |  private   |                  public、internal、private                   |\\n\\n> public 访问级别最高\\n>\\n> private 访问级别最低\\n\\n### 2、this 关键字\\n\\n看以下代码，有什么问题：\\n\\n```C#\\nclass Strdent\\n{\\n    private string _name;\\t//姓名\\t\\n    public int _age = 19;\\t//年龄\\n    public string _cardID = \\\"145236985674526685\\\";\\t//身份证号码\\n    public void SetName(string _name)\\n    {\\n        _name = _name;\\n    }\\n}\\n```\\n\\n分析： 在 Student 类中定义了一个 private 成员变量 _name,在 SetName()方法的参数中也定义了一个与之同名的变量 _name。这时编译器会发现成员变量和方法的参数重名了。\\n此时，编译器无法分辨代码中出现的这两个 _\",\"createTime\":1705382708000,\"id\":25,\"isCheck\":1,\"updateTime\":1705382708000,\"userName\":\"ADMIN\"},{\"content\":\"## 测试留言Markdown 编写\\n\\n> 不要报错\\n\\n> ~~没有bug~~\",\"createTime\":1705382870000,\"id\":26,\"isCheck\":1,\"updateTime\":1705382870000,\"userName\":\"ADMIN\"},{\"content\":\"### 留言bug 最后测试\",\"createTime\":1705382974000,\"id\":27,\"isCheck\":1,\"updateTime\":1705383023000,\"userName\":\"ADMIN\"}],\"msg\":\"success\"}', '/leaveWord/back/list', 16, '后台留言列表', '2024-03-12 15:37:56', '2024-03-12 15:37:56', 0);
INSERT INTO `sys_log` VALUES (2874, '友链管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LinkController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699927987000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":1,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"ADMIN\"},{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699929175000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":2,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"ADMIN\"},{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699929449000,\"description\":\"这是一个示例网站这是一个示例网站这是一个示例网站都是进口粮\",\"email\":\"example@example.com\",\"id\":4,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"https://www.baidu.com/\",\"userName\":\"ADMIN\"},{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699930576000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":6,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"ADMIN\"},{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/Sara11676693097117968.png\",\"createTime\":1699930670000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":8,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"ADMIN\"},{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1705931708000,\"description\":\"无语小站无语小站\",\"email\":\"3490223402@qq.com\",\"id\":18,\"isCheck\":1,\"name\":\"无语小站\",\"url\":\"  http://localhost:99/\",\"userName\":\"ADMIN\"}],\"msg\":\"success\"}', '/link/back/list', 18, '后台友链列表', '2024-03-12 15:37:56', '2024-03-12 15:37:56', 0);
INSERT INTO `sys_log` VALUES (2875, '评论管理', '获取', 'fish', '127.0.0.1', '内网IP', 2, 'xyz.kuailemao.controller.CommentController.backList()', '[]', 'GET', 'Cannot invoke \"xyz.kuailemao.domain.entity.User.getUsername()\" because the return value of \"xyz.kuailemao.mapper.UserMapper.selectById(java.io.Serializable)\" is null', NULL, '/comment/back/list', 12, NULL, '2024-03-13 14:39:28', '2024-03-13 14:39:28', 0);
INSERT INTO `sys_log` VALUES (2876, '评论管理', '获取', 'fish', '127.0.0.1', '内网IP', 2, 'xyz.kuailemao.controller.CommentController.backList()', '[]', 'GET', 'Cannot invoke \"xyz.kuailemao.domain.entity.User.getUsername()\" because the return value of \"xyz.kuailemao.mapper.UserMapper.selectById(java.io.Serializable)\" is null', NULL, '/comment/back/list', 17, NULL, '2024-03-13 14:39:46', '2024-03-13 14:39:46', 0);
INSERT INTO `sys_log` VALUES (2877, '树洞管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TreeHoleController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"content\":\"测试添加\",\"createTime\":1698636750000,\"id\":1,\"isCheck\":1,\"updateTime\":1698636750000,\"userName\":\"ADMIN\"},{\"content\":\"真的是服了！！\",\"createTime\":1698655275000,\"id\":29,\"isCheck\":1,\"updateTime\":1698655275000,\"userName\":\"ADMIN\"},{\"content\":\"记得一定要快乐啊！！\",\"createTime\":1698655317000,\"id\":30,\"isCheck\":1,\"updateTime\":1705671081000,\"userName\":\"ADMIN\"},{\"content\":\"天天开心\",\"createTime\":1705671204000,\"id\":34,\"isCheck\":1,\"updateTime\":1705671204000,\"userName\":\"ADMIN\"}],\"msg\":\"success\"}', '/treeHole/back/list', 14, '后台树洞列表', '2024-03-13 14:40:10', '2024-03-13 14:40:10', 0);
INSERT INTO `sys_log` VALUES (2878, '聊天管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ChatGptController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"avatar\":\"http://cdn.kuailemao.lielfw.cn/articleCover/Sara11676693014447852.png\",\"conversation\":\"{\\\"content\\\":[{\\\"content\\\":\\\"你好\\\",\\\"type\\\":\\\"question\\\"},{\\\"content\\\":\\\"你好！有什么我可以帮助你的呢？\\\",\\\"type\\\":\\\"response\\\"}],\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\"}\",\"createTime\":1700132069000,\"id\":29,\"isCheck\":1,\"updateTime\":1705811476000,\"userName\":\"ADMIN\"},{\"avatar\":\"http://cdn.kuailemao.lielfw.cn/articleCover/Sara11676693014447852.png\",\"conversation\":\"{\\\"content\\\":[{\\\"content\\\":\\\"前端路由的保活是什么意思？\\\",\\\"type\\\":\\\"question\\\"},{\\\"content\\\":\\\"\\\\\\\"前端路由的保活\\\\\\\"主要是针对SPA（单页应用）中的一个重要概念。在单页应用中，当跳转到新的路由地址时，之前的组件会被卸载，新的页面组件会重新加载，这就好像在不刷新网页的情况下对页面进行了重新渲染。而这个过程可能会涉及到耗时较长的异步操作，例如请求数据等。\\\\n\\\\n\\\\\\\"保活\\\\\\\"（也常称为 \\\\\\\"keep alive\\\\\\\"）则是指保持这些组件的状态，而不是每次都进行重新加载。这样可以避免不必要的重新加载，提高应用性能，改善用户体验。 在Vue.js这样的前端框架中，它通过`<keep-alive>`组件提供了保活的功能。\\\\n\\\\n例如，用户在一个列表页浏览到第10页，点击某个项目进入详情页，然后再返回列表页，期望的行为应该是回到第10页，而不是重新加载列表页。如果没有使用保活，那么在返回列表页时会重新加载，展示的可能是第1页的内容。但如果使用了保活，那么用户的浏览状态（第10页）就可以被保持住。\\\\n\\\\n注意并不是所有的情况下都需要使用保活，比如一些数据必须保持最新状态的页面，就不适合使用这个功能。在不需要保持状态的页面使用保活，可能会导致数据过期或不一致。\\\",\\\"type\\\":\\\"response\\\"}],\\\"model\\\":\\\"gpt-4\\\"}\",\"createTime\":1700181466000,\"id\":30,\"isCheck\":1,\"updateTime\":1705811721000,\"userName\":\"ADMIN\"}],\"msg\":\"success\"}', '/chatGpt/back/list', 12, '后台聊天列表', '2024-03-13 14:40:19', '2024-03-13 14:40:19', 0);
INSERT INTO `sys_log` VALUES (2879, '友链管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LinkController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699927987000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":1,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"ADMIN\"},{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699929175000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":2,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"ADMIN\"},{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699929449000,\"description\":\"这是一个示例网站这是一个示例网站这是一个示例网站都是进口粮\",\"email\":\"example@example.com\",\"id\":4,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"https://www.baidu.com/\",\"userName\":\"ADMIN\"},{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699930576000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":6,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"ADMIN\"},{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/Sara11676693097117968.png\",\"createTime\":1699930670000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":8,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"ADMIN\"},{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1705931708000,\"description\":\"无语小站无语小站\",\"email\":\"3490223402@qq.com\",\"id\":18,\"isCheck\":1,\"name\":\"无语小站\",\"url\":\"  http://localhost:99/\",\"userName\":\"ADMIN\"}],\"msg\":\"success\"}', '/link/back/list', 14, '后台友链列表', '2024-03-13 14:40:27', '2024-03-13 14:40:27', 0);
INSERT INTO `sys_log` VALUES (2880, '友链管理', '删除', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LinkController.delete()', '[[18]]', 'DELETE', NULL, '{\"code\":200,\"msg\":\"success\"}', '/link/back/delete', 6, '删除友链', '2024-03-13 14:40:46', '2024-03-13 14:40:46', 0);
INSERT INTO `sys_log` VALUES (2881, '友链管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LinkController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699927987000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":1,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"ADMIN\"},{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699929175000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":2,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"ADMIN\"},{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699929449000,\"description\":\"这是一个示例网站这是一个示例网站这是一个示例网站都是进口粮\",\"email\":\"example@example.com\",\"id\":4,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"https://www.baidu.com/\",\"userName\":\"ADMIN\"},{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699930576000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":6,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"ADMIN\"},{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/Sara11676693097117968.png\",\"createTime\":1699930670000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":8,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"ADMIN\"}],\"msg\":\"success\"}', '/link/back/list', 10, '后台友链列表', '2024-03-13 14:40:46', '2024-03-13 14:40:46', 0);
INSERT INTO `sys_log` VALUES (2882, '友链管理', '删除', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LinkController.delete()', '[[8]]', 'DELETE', NULL, '{\"code\":200,\"msg\":\"success\"}', '/link/back/delete', 3, '删除友链', '2024-03-13 14:40:48', '2024-03-13 14:40:48', 0);
INSERT INTO `sys_log` VALUES (2883, '友链管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LinkController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699927987000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":1,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"ADMIN\"},{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699929175000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":2,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"ADMIN\"},{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699929449000,\"description\":\"这是一个示例网站这是一个示例网站这是一个示例网站都是进口粮\",\"email\":\"example@example.com\",\"id\":4,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"https://www.baidu.com/\",\"userName\":\"ADMIN\"},{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699930576000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":6,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"ADMIN\"}],\"msg\":\"success\"}', '/link/back/list', 7, '后台友链列表', '2024-03-13 14:40:49', '2024-03-13 14:40:49', 0);
INSERT INTO `sys_log` VALUES (2884, '友链管理', '删除', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LinkController.delete()', '[[6]]', 'DELETE', NULL, '{\"code\":200,\"msg\":\"success\"}', '/link/back/delete', 4, '删除友链', '2024-03-13 14:40:50', '2024-03-13 14:40:50', 0);
INSERT INTO `sys_log` VALUES (2885, '友链管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LinkController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699927987000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":1,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"ADMIN\"},{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699929175000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":2,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"ADMIN\"},{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699929449000,\"description\":\"这是一个示例网站这是一个示例网站这是一个示例网站都是进口粮\",\"email\":\"example@example.com\",\"id\":4,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"https://www.baidu.com/\",\"userName\":\"ADMIN\"}],\"msg\":\"success\"}', '/link/back/list', 7, '后台友链列表', '2024-03-13 14:40:51', '2024-03-13 14:40:51', 0);
INSERT INTO `sys_log` VALUES (2886, '友链管理', '删除', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LinkController.delete()', '[[4]]', 'DELETE', NULL, '{\"code\":200,\"msg\":\"success\"}', '/link/back/delete', 3, '删除友链', '2024-03-13 14:40:53', '2024-03-13 14:40:53', 0);
INSERT INTO `sys_log` VALUES (2887, '友链管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LinkController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699927987000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":1,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"ADMIN\"},{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699929175000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":2,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"ADMIN\"}],\"msg\":\"success\"}', '/link/back/list', 4, '后台友链列表', '2024-03-13 14:40:53', '2024-03-13 14:40:53', 0);
INSERT INTO `sys_log` VALUES (2888, '友链管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LinkController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699927987000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":1,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"ADMIN\"},{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699929175000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":2,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"ADMIN\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312383000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":19,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312389000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":20,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312395000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":21,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312396000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":22,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312396000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":23,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312396000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":24,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312396000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":25,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312397000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":26,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312397000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":27,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312397000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":28,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"}],\"msg\":\"success\"}', '/link/back/list', 20, '后台友链列表', '2024-03-13 14:46:48', '2024-03-13 14:46:48', 0);
INSERT INTO `sys_log` VALUES (2889, '友链管理', '搜索', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LinkController.backList()', '[{}]', 'POST', NULL, '{\"code\":200,\"data\":[{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699927987000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":1,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"ADMIN\"},{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699929175000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":2,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"ADMIN\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312383000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":19,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312389000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":20,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312395000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":21,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312396000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":22,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312396000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":23,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312396000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":24,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312396000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":25,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312397000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":26,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312397000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":27,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312397000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":28,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"}],\"msg\":\"success\"}', '/link/back/search', 25, '搜索后台友链列表', '2024-03-13 14:47:18', '2024-03-13 14:47:18', 0);
INSERT INTO `sys_log` VALUES (2890, '友链管理', '删除', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LinkController.delete()', '[[20,21,22,23,24,19,2,25]]', 'DELETE', NULL, '{\"code\":200,\"msg\":\"success\"}', '/link/back/delete', 3, '删除友链', '2024-03-13 14:47:25', '2024-03-13 14:47:25', 0);
INSERT INTO `sys_log` VALUES (2891, '友链管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LinkController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699927987000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":1,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"ADMIN\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312397000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":26,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312397000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":27,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312397000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":28,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"}],\"msg\":\"success\"}', '/link/back/list', 9, '后台友链列表', '2024-03-13 14:47:25', '2024-03-13 14:47:25', 0);
INSERT INTO `sys_log` VALUES (2892, '友链管理', '删除', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LinkController.delete()', '[[26,27]]', 'DELETE', NULL, '{\"code\":200,\"msg\":\"success\"}', '/link/back/delete', 3, '删除友链', '2024-03-13 14:47:32', '2024-03-13 14:47:32', 0);
INSERT INTO `sys_log` VALUES (2893, '友链管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LinkController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699927987000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":1,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"ADMIN\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312397000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":28,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"}],\"msg\":\"success\"}', '/link/back/list', 4, '后台友链列表', '2024-03-13 14:47:33', '2024-03-13 14:47:33', 0);
INSERT INTO `sys_log` VALUES (2894, '友链管理', '修改', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LinkController.isCheck()', '[{\"id\":28,\"isCheck\":1}]', 'POST', NULL, '{\"code\":200,\"msg\":\"操作成功，已发送通知邮件\"}', '/link/back/isCheck', 7, '修改友链是否通过', '2024-03-13 14:47:38', '2024-03-13 14:47:38', 0);
INSERT INTO `sys_log` VALUES (2895, '友链管理', '修改', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LinkController.isCheck()', '[{\"id\":28,\"isCheck\":0}]', 'POST', NULL, '{\"code\":200,\"msg\":\"操作成功\"}', '/link/back/isCheck', 3, '修改友链是否通过', '2024-03-13 14:50:40', '2024-03-13 14:50:40', 0);
INSERT INTO `sys_log` VALUES (2896, '友链管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LinkController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699927987000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":1,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"ADMIN\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312397000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":28,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"},{\"background\":\"jjjj\",\"createTime\":1710313656000,\"description\":\"jjjj\",\"email\":\"2667675234@qq.com\",\"id\":29,\"isCheck\":0,\"name\":\"jjjj\",\"url\":\"jjjj\",\"userName\":\"seaflows\"}],\"msg\":\"success\"}', '/link/back/list', 5, '后台友链列表', '2024-03-13 15:07:46', '2024-03-13 15:07:46', 0);
INSERT INTO `sys_log` VALUES (2897, '友链管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LinkController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699927987000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":1,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"ADMIN\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312397000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":28,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"},{\"background\":\"jjjj\",\"createTime\":1710313656000,\"description\":\"jjjj\",\"email\":\"2667675234@qq.com\",\"id\":29,\"isCheck\":0,\"name\":\"jjjj\",\"url\":\"jjjj\",\"userName\":\"seaflows\"},{\"background\":\"lllll\",\"createTime\":1710313739000,\"description\":\"llll\",\"email\":\"asdfkjasdfj@qq.com\",\"id\":30,\"isCheck\":0,\"name\":\"jjllll\",\"url\":\"jlllll\",\"userName\":\"seaflows\"}],\"msg\":\"success\"}', '/link/back/list', 7, '后台友链列表', '2024-03-13 15:09:08', '2024-03-13 15:09:08', 0);
INSERT INTO `sys_log` VALUES (2898, '友链管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LinkController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699927987000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":1,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"ADMIN\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312397000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":28,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"},{\"background\":\"jjjj\",\"createTime\":1710313656000,\"description\":\"jjjj\",\"email\":\"2667675234@qq.com\",\"id\":29,\"isCheck\":0,\"name\":\"jjjj\",\"url\":\"jjjj\",\"userName\":\"seaflows\"},{\"background\":\"lllll\",\"createTime\":1710313739000,\"description\":\"llll\",\"email\":\"asdfkjasdfj@qq.com\",\"id\":30,\"isCheck\":0,\"name\":\"jjllll\",\"url\":\"jlllll\",\"userName\":\"seaflows\"},{\"background\":\"kkk\",\"createTime\":1710315191000,\"description\":\"jjllll\",\"email\":\"sdfasdfa@qq.com\",\"id\":31,\"isCheck\":0,\"name\":\"jjjkk\",\"url\":\"jjjk\",\"userName\":\"seaflows\"},{\"background\":\"kkk\",\"createTime\":1710315210000,\"description\":\"jjllll\",\"email\":\"sdfasdfa@qq.com\",\"id\":32,\"isCheck\":0,\"name\":\"jjjkk\",\"url\":\"jjjk\",\"userName\":\"seaflows\"}],\"msg\":\"success\"}', '/link/back/list', 16, '后台友链列表', '2024-03-13 15:33:58', '2024-03-13 15:33:58', 0);
INSERT INTO `sys_log` VALUES (2899, '友链管理', '删除', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LinkController.delete()', '[[31,29,30]]', 'DELETE', NULL, '{\"code\":200,\"msg\":\"success\"}', '/link/back/delete', 2, '删除友链', '2024-03-13 15:34:12', '2024-03-13 15:34:12', 0);
INSERT INTO `sys_log` VALUES (2900, '友链管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LinkController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699927987000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":1,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"ADMIN\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312397000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":28,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"},{\"background\":\"kkk\",\"createTime\":1710315210000,\"description\":\"jjllll\",\"email\":\"sdfasdfa@qq.com\",\"id\":32,\"isCheck\":0,\"name\":\"jjjkk\",\"url\":\"jjjk\",\"userName\":\"seaflows\"}],\"msg\":\"success\"}', '/link/back/list', 5, '后台友链列表', '2024-03-13 15:34:13', '2024-03-13 15:34:13', 0);
INSERT INTO `sys_log` VALUES (2901, '友链管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LinkController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699927987000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":1,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"test\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312397000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":28,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"},{\"background\":\"kkk\",\"createTime\":1710315210000,\"description\":\"jjllll\",\"email\":\"sdfasdfa@qq.com\",\"id\":32,\"isCheck\":0,\"name\":\"jjjkk\",\"url\":\"jjjk\",\"userName\":\"seaflows\"},{\"background\":\"iiiiiiiiii\",\"createTime\":1710315303000,\"description\":\"iiiiiii\",\"email\":\"sdfasdfa@qq.com\",\"id\":33,\"isCheck\":0,\"name\":\"iiiii\",\"url\":\"iiiiii\",\"userName\":\"seaflows\"},{\"background\":\"iiiiiiiiii\",\"createTime\":1710315893000,\"description\":\"iiiiiii\",\"email\":\"sdfasdfa@qq.com\",\"id\":34,\"isCheck\":0,\"name\":\"iiiii\",\"url\":\"iiiiii\",\"userName\":\"seaflows\"},{\"background\":\"iiiiiiiiii\",\"createTime\":1710316626000,\"description\":\"iiiiiii\",\"email\":\"sdfasdfa@qq.com\",\"id\":35,\"isCheck\":0,\"name\":\"iiiii\",\"url\":\"iiiiii\",\"userName\":\"seaflows\"}],\"msg\":\"success\"}', '/link/back/list', 14, '后台友链列表', '2024-03-13 19:32:11', '2024-03-13 19:32:11', 0);
INSERT INTO `sys_log` VALUES (2902, '友链管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LinkController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699927987000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":1,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"test\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710312397000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":28,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"avibase.bsc-eoc.org\",\"userName\":\"seaflows\"},{\"background\":\"kkk\",\"createTime\":1710315210000,\"description\":\"jjllll\",\"email\":\"sdfasdfa@qq.com\",\"id\":32,\"isCheck\":0,\"name\":\"jjjkk\",\"url\":\"jjjk\",\"userName\":\"seaflows\"},{\"background\":\"iiiiiiiiii\",\"createTime\":1710315303000,\"description\":\"iiiiiii\",\"email\":\"sdfasdfa@qq.com\",\"id\":33,\"isCheck\":0,\"name\":\"iiiii\",\"url\":\"iiiiii\",\"userName\":\"seaflows\"},{\"background\":\"iiiiiiiiii\",\"createTime\":1710315893000,\"description\":\"iiiiiii\",\"email\":\"sdfasdfa@qq.com\",\"id\":34,\"isCheck\":0,\"name\":\"iiiii\",\"url\":\"iiiiii\",\"userName\":\"seaflows\"},{\"background\":\"iiiiiiiiii\",\"createTime\":1710316626000,\"description\":\"iiiiiii\",\"email\":\"sdfasdfa@qq.com\",\"id\":35,\"isCheck\":0,\"name\":\"iiiii\",\"url\":\"iiiiii\",\"userName\":\"seaflows\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710329708000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":36,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"https://avibase.bsc-eoc.org/\",\"userName\":\"seaflows\"}],\"msg\":\"success\"}', '/link/back/list', 15, '后台友链列表', '2024-03-13 19:35:27', '2024-03-13 19:35:27', 0);
INSERT INTO `sys_log` VALUES (2903, '友链管理', '删除', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LinkController.delete()', '[[35,34,33,32,28]]', 'DELETE', NULL, '{\"code\":200,\"msg\":\"success\"}', '/link/back/delete', 3, '删除友链', '2024-03-13 19:35:48', '2024-03-13 19:35:48', 0);
INSERT INTO `sys_log` VALUES (2904, '友链管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LinkController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699927987000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":1,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"test\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710329708000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":36,\"isCheck\":0,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"https://avibase.bsc-eoc.org/\",\"userName\":\"seaflows\"}],\"msg\":\"success\"}', '/link/back/list', 4, '后台友链列表', '2024-03-13 19:35:48', '2024-03-13 19:35:48', 0);
INSERT INTO `sys_log` VALUES (2905, '友链管理', '修改', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LinkController.isCheck()', '[{\"id\":36,\"isCheck\":1}]', 'POST', NULL, '{\"code\":200,\"msg\":\"操作成功，已发送通知邮件\"}', '/link/back/isCheck', 5, '修改友链是否通过', '2024-03-13 19:35:50', '2024-03-13 19:35:50', 0);
INSERT INTO `sys_log` VALUES (2906, '新增分类', '新增', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CategoryController.addCategory()', '[{\"categoryName\":\"鸵鸟科\",\"id\":6}]', 'PUT', NULL, '{\"code\":200,\"msg\":\"success\"}', '/category', 3, '新增分类-文章列表', '2024-03-13 19:55:28', '2024-03-13 19:55:28', 0);
INSERT INTO `sys_log` VALUES (2907, '标签管理', '新增', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.addTag()', '[{\"id\":15,\"tagName\":\"鸵鸟科目\"}]', 'PUT', NULL, '{\"code\":200,\"msg\":\"success\"}', '/tag', 12, '新增标签-文章列表', '2024-03-13 21:29:03', '2024-03-13 21:29:03', 0);
INSERT INTO `sys_log` VALUES (2908, '标签管理', '新增', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.addTag()', '[{\"id\":16,\"tagName\":\"鸵鸟属\"}]', 'PUT', NULL, '{\"code\":200,\"msg\":\"success\"}', '/tag', 3, '新增标签-文章列表', '2024-03-13 21:29:19', '2024-03-13 21:29:19', 0);
INSERT INTO `sys_log` VALUES (2909, '文章管理', '上传图片', 'fish', '127.0.0.1', '内网IP', 1, 'xyz.kuailemao.controller.ArticleController.uploadArticleCover()', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@59079a8]', 'POST', NULL, '{\"code\":500,\"msg\":\"failure\"}', '/article/upload/articleCover', 99, '上传文章封面', '2024-03-13 21:29:45', '2024-03-13 21:29:45', 0);
INSERT INTO `sys_log` VALUES (2910, '文章管理', '上传图片', 'fish', '127.0.0.1', '内网IP', 1, 'xyz.kuailemao.controller.ArticleController.uploadArticleCover()', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@7126c93e]', 'POST', NULL, '{\"code\":500,\"msg\":\"failure\"}', '/article/upload/articleCover', 8, '上传文章封面', '2024-03-13 21:31:04', '2024-03-13 21:31:04', 0);
INSERT INTO `sys_log` VALUES (2911, '文章管理', '上传图片', 'fish', '127.0.0.1', '内网IP', 1, 'xyz.kuailemao.controller.ArticleController.uploadArticleCover()', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@44eebf20]', 'POST', NULL, '{\"code\":500,\"msg\":\"failure\"}', '/article/upload/articleCover', 8, '上传文章封面', '2024-03-13 21:31:23', '2024-03-13 21:31:23', 0);
INSERT INTO `sys_log` VALUES (2912, '文章管理', '上传图片', 'fish', '127.0.0.1', '内网IP', 1, 'xyz.kuailemao.controller.ArticleController.uploadArticleCover()', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@1ef1b8d9]', 'POST', NULL, '{\"code\":500,\"msg\":\"failure\"}', '/article/upload/articleCover', 8, '上传文章封面', '2024-03-13 21:32:00', '2024-03-13 21:32:00', 0);
INSERT INTO `sys_log` VALUES (2913, '文章管理', '上传图片', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ArticleController.uploadArticleCover()', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@354d6a50]', 'POST', NULL, '{\"code\":200,\"data\":\"http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg\",\"msg\":\"success\"}', '/article/upload/articleCover', 168, '上传文章封面', '2024-03-14 11:12:42', '2024-03-14 11:12:42', 0);
INSERT INTO `sys_log` VALUES (2914, '文章管理', '新增', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ArticleController.publish()', '[{\"articleContent\":\"## 测试文件\",\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg\",\"articleTitle\":\"非洲鸵鸟\",\"articleType\":1,\"categoryId\":6,\"isTop\":0,\"status\":1,\"tagId\":[15,16]}]', 'POST', NULL, '{\"code\":200,\"msg\":\"success\"}', '/article/publish', 16, '发布文章', '2024-03-14 11:12:42', '2024-03-14 11:12:42', 0);
INSERT INTO `sys_log` VALUES (2915, '文章管理', '上传图片', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ArticleController.uploadArticleImage()', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@7959ddc4]', 'POST', NULL, '{\"code\":200,\"data\":\"http://127.0.0.1:9005/test/article/articleImage/a7fba165-f5d7-42ae-8d57-dc196674b229.jpg\",\"msg\":\"success\"}', '/article/upload/articleImage', 26, '上传文章图片', '2024-03-14 11:14:36', '2024-03-14 11:14:36', 0);
INSERT INTO `sys_log` VALUES (2916, '分类管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CategoryController.listArticleCategory()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":1,\"categoryName\":\"test\",\"createTime\":1697306622000,\"id\":1,\"updateTime\":1697306625000},{\"articleCount\":2,\"categoryName\":\"test1\",\"createTime\":1697306633000,\"id\":2,\"updateTime\":1697306636000},{\"articleCount\":1,\"categoryName\":\"test2\",\"createTime\":1697306644000,\"id\":3,\"updateTime\":1697306646000},{\"articleCount\":1,\"categoryName\":\"test3\",\"createTime\":1704338607000,\"id\":4,\"updateTime\":1704338607000},{\"articleCount\":1,\"categoryName\":\"鸵鸟科\",\"createTime\":1710330928000,\"id\":6,\"updateTime\":1710330928000}],\"msg\":\"success\"}', '/category/back/list', 11, '获取分类列表', '2024-03-14 11:26:40', '2024-03-14 11:26:40', 0);
INSERT INTO `sys_log` VALUES (2917, '收藏管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.FavoriteController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"content\":\"好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，\",\"createTime\":1705543241000,\"id\":162,\"isCheck\":1,\"type\":1,\"userName\":\"test\"},{\"content\":\"好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，\",\"createTime\":1705629648000,\"id\":163,\"isCheck\":1,\"type\":1,\"userName\":\"test\"}],\"msg\":\"success\"}', '/favorite/back/list', 10, '后台收藏列表', '2024-03-14 11:26:48', '2024-03-14 11:26:48', 0);
INSERT INTO `sys_log` VALUES (2918, '标签管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.listArticleTag()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":1,\"createTime\":1697306548000,\"id\":1,\"tagName\":\"java\",\"updateTime\":1697306550000},{\"articleCount\":9,\"createTime\":1697306573000,\"id\":2,\"tagName\":\"python\",\"updateTime\":1697306575000},{\"articleCount\":10,\"createTime\":1697306586000,\"id\":3,\"tagName\":\"c#\",\"updateTime\":1697306589000},{\"articleCount\":4,\"createTime\":1697306603000,\"id\":4,\"tagName\":\"c++\",\"updateTime\":1697306605000},{\"articleCount\":6,\"createTime\":1697383039000,\"id\":5,\"tagName\":\"开心\",\"updateTime\":1697383042000},{\"articleCount\":0,\"createTime\":1710331975000,\"id\":14,\"tagName\":\"鸵鸟目\",\"updateTime\":1710331977000},{\"articleCount\":1,\"createTime\":1710336543000,\"id\":15,\"tagName\":\"鸵鸟科目\",\"updateTime\":1710336543000},{\"articleCount\":1,\"createTime\":1710336559000,\"id\":16,\"tagName\":\"鸵鸟属\",\"updateTime\":1710336559000}],\"msg\":\"success\"}', '/tag/back/list', 15, '获取标签列表', '2024-03-14 11:26:50', '2024-03-14 11:26:50', 0);
INSERT INTO `sys_log` VALUES (2919, '评论管理', '获取', 'fish', '127.0.0.1', '内网IP', 2, 'xyz.kuailemao.controller.CommentController.backList()', '[]', 'GET', 'Cannot invoke \"xyz.kuailemao.domain.entity.User.getUsername()\" because the return value of \"xyz.kuailemao.mapper.UserMapper.selectById(java.io.Serializable)\" is null', NULL, '/comment/back/list', 16, NULL, '2024-03-14 11:27:03', '2024-03-14 11:27:03', 0);
INSERT INTO `sys_log` VALUES (2920, '树洞管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TreeHoleController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"content\":\"测试添加\",\"createTime\":1698636750000,\"id\":1,\"isCheck\":1,\"updateTime\":1698636750000,\"userName\":\"test\"},{\"content\":\"真的是服了！！\",\"createTime\":1698655275000,\"id\":29,\"isCheck\":1,\"updateTime\":1698655275000,\"userName\":\"test\"},{\"content\":\"记得一定要快乐啊！！\",\"createTime\":1698655317000,\"id\":30,\"isCheck\":1,\"updateTime\":1705671081000,\"userName\":\"test\"},{\"content\":\"天天开心\",\"createTime\":1705671204000,\"id\":34,\"isCheck\":1,\"updateTime\":1705671204000,\"userName\":\"test\"}],\"msg\":\"success\"}', '/treeHole/back/list', 15, '后台树洞列表', '2024-03-14 11:27:04', '2024-03-14 11:27:04', 0);
INSERT INTO `sys_log` VALUES (2921, '留言管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LeaveWordController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"content\":\"## 测试比较长的留言\\\\n\\\\n> 下面是一篇 c# 笔记\\\\n\\\\n<center>\\\\n    <h1>C#笔记</h1>\\\\n</center>\\\\n\\\\n\\\\n\\\\n[TOC] \\\\n\\\\n### 1、C#访问修饰符\\\\n\\\\n​\\\\t\\\\t在C#当中的访问修饰符及作用范围如下：\\\\n\\\\n|     访问修饰符     |                        说明                        |\\\\n| :----------------: | :------------------------------------------------: |\\\\n|       public       |              共有访问。不受任何限制。              |\\\\n|      private       |      私有访问。只有本类能访问，实例不能访问。      |\\\\n|     protected      |   保护访问。只限于本类和子类访问，实例不能访问。   |\\\\n|      internal      |      内部访问。只限于本项目访问，其他不能访问      |\\\\n| protected internal | 内部保护访问。只限于本项目或子类访问，其他不能访问 |\\\\n\\\\n​\\\\t\\\\tC#成员类型的可修饰及默认修饰符如下：\\\\n\\\\n| 成员类型  | 默认修饰符 |                           可被修饰                           |\\\\n| :-------: | :--------: | :----------------------------------------------------------: |\\\\n|   enum    |   public   |                             none                             |\\\\n|   class   |  private   | public、protected、internal、private、<br />protected internal |\\\\n| interface |   public   |                             none                             |\\\\n|  struct   |  private   |                  public、internal、private                   |\\\\n\\\\n> public 访问级别最高\\\\n>\\\\n> private 访问级别最低\\\\n\\\\n### 2、this 关键字\\\\n\\\\n看以下代码，有什么问题：\\\\n\\\\n```C#\\\\nclass Strdent\\\\n{\\\\n    private string _name;\\\\t//姓名\\\\t\\\\n    public int _age = 19;\\\\t//年龄\\\\n    public string _cardID = \\\\\\\"145236985674526685\\\\\\\";\\\\t//身份证号码\\\\n    public void SetName(string _name)\\\\n    {\\\\n        _name = _name;\\\\n    }\\\\n}\\\\n```\\\\n\\\\n分析： 在 Student 类中定义了一个 private 成员变量 _name,在 SetName()方法的参数中也定义了一个与之同名的变量 _name。这时编译器会发现成员变量和方法的参数重名了。\\\\n此时，编译器无法分辨代码中出现的这两个 _name 那个是成员变量，哪个是方法中的参数。我们可以借助 this 关键字来解决这个问题。\\\\n\\\\n> this 关键字是指当前对象本身。通过 this 可以引用当前类的成员变量和方法。\\\\n\\\\n因此可以改变以上代码为：\\\\n\\\\n```C#\\\\nclass Strdent\\\\n{\\\\n    private string _name;\\\\t//姓名\\\\t\\\\n    public int _age = 19;\\\\t//年龄\\\\n    public string _cardID = \\\\\\\"145236985674526685\\\\\\\";\\\\t//身份证号码\\\\n    public void SetName(string _name)\\\\n    {\\\\n        this._name = _name;\\\\n    }\\\\n}\\\\n```\\\\n\\\\n> 使用 this 关键字可以解决成员变量和局部变量名称冲突的问题。\\\\n\\\\n### 3、C#属性\\\\n\\\\n#### 3.1、用方法保证数据安全\",\"createTime\":1705378527000,\"id\":13,\"isCheck\":1,\"updateTime\":1705378527000,\"userName\":\"test\"},{\"content\":\"# \\\\u6DFB\\\\u52A0\\\\u7559\\\\u8A00\\\\u677F\\\\\\\\n\\\\\\\\n* \\\\u6DFB\\\\u52A0\\\\u6D4B\\\\u8BD5\\\\\\\\n* dddd\",\"createTime\":1705381840000,\"id\":23,\"isCheck\":1,\"updateTime\":1705381840000,\"userName\":\"test\"},{\"content\":\"# 添加留言板\\n\\n* 添加测试aaa\",\"createTime\":1705382184000,\"id\":24,\"isCheck\":1,\"updateTime\":1705382184000,\"userName\":\"test\"},{\"content\":\"## 测试比较长的留言\\n\\n> 下面是一篇 c# 笔记\\n\\n<center>\\n    <h1>C#笔记</h1>\\n</center>\\n\\n\\n\\n[TOC] \\n\\n### 1、C#访问修饰符\\n\\n​\\t\\t在C#当中的访问修饰符及作用范围如下：\\n\\n|     访问修饰符     |                        说明                        |\\n| :----------------: | :------------------------------------------------: |\\n|       public       |              共有访问。不受任何限制。              |\\n|      private       |      私有访问。只有本类能访问，实例不能访问。      |\\n|     protected      |   保护访问。只限于本类和子类访问，实例不能访问。   |\\n|      internal      |      内部访问。只限于本项目访问，其他不能访问      |\\n| protected internal | 内部保护访问。只限于本项目或子类访问，其他不能访问 |\\n\\n​\\t\\tC#成员类型的可修饰及默认修饰符如下：\\n\\n| 成员类型  | 默认修饰符 |                           可被修饰                           |\\n| :-------: | :--------: | :----------------------------------------------------------: |\\n|   enum    |   public   |                             none                             |\\n|   class   |  private   | public、protected、internal、private、<br />protected internal |\\n| interface |   public   |                             none                             |\\n|  struct   |  private   |                  public、internal、private                   |\\n\\n> public 访问级别最高\\n>\\n> private 访问级别最低\\n\\n### 2、this 关键字\\n\\n看以下代码，有什么问题：\\n\\n```C#\\nclass Strdent\\n{\\n    private string _name;\\t//姓名\\t\\n    public int _age = 19;\\t//年龄\\n    public string _cardID = \\\"145236985674526685\\\";\\t//身份证号码\\n    public void SetName(string _name)\\n    {\\n        _name = _name;\\n    }\\n}\\n```\\n\\n分析： 在 Student 类中定义了一个 private 成员变量 _name,在 SetName()方法的参数中也定义了一个与之同名的变量 _name。这时编译器会发现成员变量和方法的参数重名了。\\n此时，编译器无法分辨代码中出现的这两个 _\",\"createTime\":1705382708000,\"id\":25,\"isCheck\":1,\"updateTime\":1705382708000,\"userName\":\"test\"},{\"content\":\"## 测试留言Markdown 编写\\n\\n> 不要报错\\n\\n> ~~没有bug~~\",\"createTime\":1705382870000,\"id\":26,\"isCheck\":1,\"updateTime\":1705382870000,\"userName\":\"test\"},{\"content\":\"### 留言bug 最后测试\",\"createTime\":1705382974000,\"id\":27,\"isCheck\":1,\"updateTime\":1705383023000,\"userName\":\"test\"}],\"msg\":\"success\"}', '/leaveWord/back/list', 19, '后台留言列表', '2024-03-14 11:27:14', '2024-03-14 11:27:14', 0);
INSERT INTO `sys_log` VALUES (2922, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ArticleController.listArticle()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg\",\"articleTitle\":\"非洲鸵鸟\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1710385962000,\"id\":41,\"isTop\":0,\"status\":1,\"tagsName\":[\"鸵鸟科目\",\"鸵鸟属\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"http://43.136.78.47:9000/blog/article/articleCover/cfce7f30-f9e7-4ca4-81b9-c0831cc9c221.png\",\"articleTitle\":\"测试\",\"articleType\":1,\"categoryId\":1,\"categoryName\":\"test\",\"createTime\":1709100336000,\"id\":40,\"isTop\":0,\"status\":1,\"tagsName\":[\"python\"],\"userId\":1,\"userName\":\"test\",\"visitCount\":16},{\"articleCover\":\"http://43.136.78.47:9000/blog/article/articleCover/d4574635-ba1d-4c01-beda-1ad25c4db0e3.png\",\"articleTitle\":\"测试文章\",\"articleType\":1,\"categoryId\":4,\"categoryName\":\"test3\",\"createTime\":1704375139000,\"id\":32,\"isTop\":0,\"status\":1,\"tagsName\":[\"python\",\"c#\"],\"userId\":1,\"userName\":\"test\",\"visitCount\":17},{\"articleCover\":\"http://cdn.kuailemao.lielfw.cn/articleCover/Sara11676693097117968.png\",\"articleTitle\":\"java的继承\",\"articleType\":1,\"categoryId\":2,\"categoryName\":\"test1\",\"createTime\":1697308005000,\"id\":1,\"isTop\":1,\"status\":1,\"tagsName\":[\"java\",\"python\",\"c#\"],\"userId\":1,\"userName\":\"test\",\"visitCount\":269},{\"articleCover\":\"http://cdn.kuailemao.lielfw.cn/PicGo/idea%E8%83%8C%E6%99%AF.png\",\"articleTitle\":\"今天出去玩了\",\"articleType\":1,\"categoryId\":2,\"categoryName\":\"test1\",\"createTime\":1697308005000,\"id\":3,\"isTop\":1,\"status\":1,\"tagsName\":[\"c#\",\"开心\"],\"userId\":1,\"userName\":\"test\",\"visitCount\":133},{\"articleCover\":\"http://cdn.kuailemao.lielfw.cn/PicGo/idea%E8%83%8C%E6%99%AF.png\",\"articleTitle\":\"测试分类3\",\"articleType\":1,\"categoryId\":3,\"categoryName\":\"test2\",\"createTime\":1697308005000,\"id\":24,\"isTop\":0,\"status\":1,\"tagsName\":[\"python\",\"c++\"],\"userId\":1,\"userName\":\"test\",\"visitCount\":131}],\"msg\":\"success\"}', '/article/back/list', 38, '获取所有的文章列表', '2024-03-14 11:27:32', '2024-03-14 11:27:32', 0);
INSERT INTO `sys_log` VALUES (2923, '文章管理', '修改', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ArticleController.updateArticleIsTop()', '[1,0]', 'POST', NULL, '{\"code\":200,\"msg\":\"success\"}', '/article/back/update/isTop', 4, '修改文章是否顶置', '2024-03-14 11:27:41', '2024-03-14 11:27:41', 0);
INSERT INTO `sys_log` VALUES (2924, '文章管理', '修改', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ArticleController.updateArticleIsTop()', '[3,0]', 'POST', NULL, '{\"code\":200,\"msg\":\"success\"}', '/article/back/update/isTop', 3, '修改文章是否顶置', '2024-03-14 11:27:42', '2024-03-14 11:27:42', 0);
INSERT INTO `sys_log` VALUES (2925, '标签管理', '删除', 'fish', '127.0.0.1', '内网IP', 1, 'xyz.kuailemao.controller.TagController.deleteTag()', '[[2]]', 'DELETE', NULL, '{\"code\":500,\"msg\":\"标签下存在文章，无法删除\"}', '/tag/back/delete', 3, '删除标签', '2024-03-14 11:27:55', '2024-03-14 11:27:55', 0);
INSERT INTO `sys_log` VALUES (2926, '文章管理', '删除', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ArticleController.deleteArticle()', '[[24]]', 'DELETE', NULL, '{\"code\":200,\"msg\":\"success\"}', '/article/back/delete', 15, '删除文章', '2024-03-14 11:28:08', '2024-03-14 11:28:08', 0);
INSERT INTO `sys_log` VALUES (2927, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ArticleController.listArticle()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg\",\"articleTitle\":\"非洲鸵鸟\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1710385962000,\"id\":41,\"isTop\":0,\"status\":1,\"tagsName\":[\"鸵鸟科目\",\"鸵鸟属\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"http://43.136.78.47:9000/blog/article/articleCover/cfce7f30-f9e7-4ca4-81b9-c0831cc9c221.png\",\"articleTitle\":\"测试\",\"articleType\":1,\"categoryId\":1,\"categoryName\":\"test\",\"createTime\":1709100336000,\"id\":40,\"isTop\":0,\"status\":1,\"tagsName\":[\"python\"],\"userId\":1,\"userName\":\"test\",\"visitCount\":16},{\"articleCover\":\"http://43.136.78.47:9000/blog/article/articleCover/d4574635-ba1d-4c01-beda-1ad25c4db0e3.png\",\"articleTitle\":\"测试文章\",\"articleType\":1,\"categoryId\":4,\"categoryName\":\"test3\",\"createTime\":1704375139000,\"id\":32,\"isTop\":0,\"status\":1,\"tagsName\":[\"python\",\"c#\"],\"userId\":1,\"userName\":\"test\",\"visitCount\":17},{\"articleCover\":\"http://cdn.kuailemao.lielfw.cn/articleCover/Sara11676693097117968.png\",\"articleTitle\":\"java的继承\",\"articleType\":1,\"categoryId\":2,\"categoryName\":\"test1\",\"createTime\":1697308005000,\"id\":1,\"isTop\":0,\"status\":1,\"tagsName\":[\"java\",\"python\",\"c#\"],\"userId\":1,\"userName\":\"test\",\"visitCount\":269},{\"articleCover\":\"http://cdn.kuailemao.lielfw.cn/PicGo/idea%E8%83%8C%E6%99%AF.png\",\"articleTitle\":\"今天出去玩了\",\"articleType\":1,\"categoryId\":2,\"categoryName\":\"test1\",\"createTime\":1697308005000,\"id\":3,\"isTop\":0,\"status\":1,\"tagsName\":[\"c#\",\"开心\"],\"userId\":1,\"userName\":\"test\",\"visitCount\":133}],\"msg\":\"success\"}', '/article/back/list', 22, '获取所有的文章列表', '2024-03-14 11:28:08', '2024-03-14 11:28:08', 0);
INSERT INTO `sys_log` VALUES (2928, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ArticleController.getArticleEcho()', '[3]', 'GET', NULL, '{\"code\":200,\"data\":{\"articleContent\":\"好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，好好玩啊，\",\"articleCover\":\"http://cdn.kuailemao.lielfw.cn/PicGo/idea%E8%83%8C%E6%99%AF.png\",\"articleTitle\":\"今天出去玩了\",\"articleType\":1,\"categoryId\":2,\"id\":3,\"isTop\":0,\"status\":1,\"tagId\":[3,5]},\"msg\":\"success\"}', '/article/back/echo/3', 5, '回显文章数据', '2024-03-14 11:28:15', '2024-03-14 11:28:15', 0);
INSERT INTO `sys_log` VALUES (2929, '文章管理', '删除', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ArticleController.deleteArticle()', '[[3]]', 'DELETE', NULL, '{\"code\":200,\"msg\":\"success\"}', '/article/back/delete', 11, '删除文章', '2024-03-14 11:28:29', '2024-03-14 11:28:29', 0);
INSERT INTO `sys_log` VALUES (2930, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ArticleController.listArticle()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg\",\"articleTitle\":\"非洲鸵鸟\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1710385962000,\"id\":41,\"isTop\":0,\"status\":1,\"tagsName\":[\"鸵鸟科目\",\"鸵鸟属\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"http://43.136.78.47:9000/blog/article/articleCover/cfce7f30-f9e7-4ca4-81b9-c0831cc9c221.png\",\"articleTitle\":\"测试\",\"articleType\":1,\"categoryId\":1,\"categoryName\":\"test\",\"createTime\":1709100336000,\"id\":40,\"isTop\":0,\"status\":1,\"tagsName\":[\"python\"],\"userId\":1,\"userName\":\"test\",\"visitCount\":16},{\"articleCover\":\"http://43.136.78.47:9000/blog/article/articleCover/d4574635-ba1d-4c01-beda-1ad25c4db0e3.png\",\"articleTitle\":\"测试文章\",\"articleType\":1,\"categoryId\":4,\"categoryName\":\"test3\",\"createTime\":1704375139000,\"id\":32,\"isTop\":0,\"status\":1,\"tagsName\":[\"python\",\"c#\"],\"userId\":1,\"userName\":\"test\",\"visitCount\":17},{\"articleCover\":\"http://cdn.kuailemao.lielfw.cn/articleCover/Sara11676693097117968.png\",\"articleTitle\":\"java的继承\",\"articleType\":1,\"categoryId\":2,\"categoryName\":\"test1\",\"createTime\":1697308005000,\"id\":1,\"isTop\":0,\"status\":1,\"tagsName\":[\"java\",\"python\",\"c#\"],\"userId\":1,\"userName\":\"test\",\"visitCount\":269}],\"msg\":\"success\"}', '/article/back/list', 19, '获取所有的文章列表', '2024-03-14 11:28:30', '2024-03-14 11:28:30', 0);
INSERT INTO `sys_log` VALUES (2931, '文章管理', '删除', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ArticleController.deleteArticle()', '[[1]]', 'DELETE', NULL, '{\"code\":200,\"msg\":\"success\"}', '/article/back/delete', 12, '删除文章', '2024-03-14 11:28:32', '2024-03-14 11:28:32', 0);
INSERT INTO `sys_log` VALUES (2932, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ArticleController.listArticle()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg\",\"articleTitle\":\"非洲鸵鸟\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1710385962000,\"id\":41,\"isTop\":0,\"status\":1,\"tagsName\":[\"鸵鸟科目\",\"鸵鸟属\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"http://43.136.78.47:9000/blog/article/articleCover/cfce7f30-f9e7-4ca4-81b9-c0831cc9c221.png\",\"articleTitle\":\"测试\",\"articleType\":1,\"categoryId\":1,\"categoryName\":\"test\",\"createTime\":1709100336000,\"id\":40,\"isTop\":0,\"status\":1,\"tagsName\":[\"python\"],\"userId\":1,\"userName\":\"test\",\"visitCount\":16},{\"articleCover\":\"http://43.136.78.47:9000/blog/article/articleCover/d4574635-ba1d-4c01-beda-1ad25c4db0e3.png\",\"articleTitle\":\"测试文章\",\"articleType\":1,\"categoryId\":4,\"categoryName\":\"test3\",\"createTime\":1704375139000,\"id\":32,\"isTop\":0,\"status\":1,\"tagsName\":[\"python\",\"c#\"],\"userId\":1,\"userName\":\"test\",\"visitCount\":17}],\"msg\":\"success\"}', '/article/back/list', 12, '获取所有的文章列表', '2024-03-14 11:28:33', '2024-03-14 11:28:33', 0);
INSERT INTO `sys_log` VALUES (2933, '文章管理', '删除', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ArticleController.deleteArticle()', '[[32]]', 'DELETE', NULL, '{\"code\":200,\"msg\":\"success\"}', '/article/back/delete', 8, '删除文章', '2024-03-14 11:28:34', '2024-03-14 11:28:34', 0);
INSERT INTO `sys_log` VALUES (2934, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ArticleController.listArticle()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg\",\"articleTitle\":\"非洲鸵鸟\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1710385962000,\"id\":41,\"isTop\":0,\"status\":1,\"tagsName\":[\"鸵鸟科目\",\"鸵鸟属\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"http://43.136.78.47:9000/blog/article/articleCover/cfce7f30-f9e7-4ca4-81b9-c0831cc9c221.png\",\"articleTitle\":\"测试\",\"articleType\":1,\"categoryId\":1,\"categoryName\":\"test\",\"createTime\":1709100336000,\"id\":40,\"isTop\":0,\"status\":1,\"tagsName\":[\"python\"],\"userId\":1,\"userName\":\"test\",\"visitCount\":16}],\"msg\":\"success\"}', '/article/back/list', 8, '获取所有的文章列表', '2024-03-14 11:28:34', '2024-03-14 11:28:34', 0);
INSERT INTO `sys_log` VALUES (2935, '文章管理', '删除', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ArticleController.deleteArticle()', '[[40]]', 'DELETE', NULL, '{\"code\":200,\"msg\":\"success\"}', '/article/back/delete', 10, '删除文章', '2024-03-14 11:28:37', '2024-03-14 11:28:37', 0);
INSERT INTO `sys_log` VALUES (2936, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ArticleController.listArticle()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg\",\"articleTitle\":\"非洲鸵鸟\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1710385962000,\"id\":41,\"isTop\":0,\"status\":1,\"tagsName\":[\"鸵鸟科目\",\"鸵鸟属\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0}],\"msg\":\"success\"}', '/article/back/list', 5, '获取所有的文章列表', '2024-03-14 11:28:37', '2024-03-14 11:28:37', 0);
INSERT INTO `sys_log` VALUES (2937, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ArticleController.getArticleEcho()', '[41]', 'GET', NULL, '{\"code\":200,\"data\":{\"articleContent\":\"## 测试文件\",\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg\",\"articleTitle\":\"非洲鸵鸟\",\"articleType\":1,\"categoryId\":6,\"id\":41,\"isTop\":0,\"status\":1,\"tagId\":[15,16]},\"msg\":\"success\"}', '/article/back/echo/41', 3, '回显文章数据', '2024-03-14 11:28:44', '2024-03-14 11:28:44', 0);
INSERT INTO `sys_log` VALUES (2938, '标签管理', '删除', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.deleteTag()', '[[1]]', 'DELETE', NULL, '{\"code\":200,\"msg\":\"success\"}', '/tag/back/delete', 5, '删除标签', '2024-03-14 11:28:59', '2024-03-14 11:28:59', 0);
INSERT INTO `sys_log` VALUES (2939, '标签管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.listArticleTag()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":3,\"createTime\":1697306573000,\"id\":2,\"tagName\":\"python\",\"updateTime\":1697306575000},{\"articleCount\":4,\"createTime\":1697306586000,\"id\":3,\"tagName\":\"c#\",\"updateTime\":1697306589000},{\"articleCount\":3,\"createTime\":1697306603000,\"id\":4,\"tagName\":\"c++\",\"updateTime\":1697306605000},{\"articleCount\":4,\"createTime\":1697383039000,\"id\":5,\"tagName\":\"开心\",\"updateTime\":1697383042000},{\"articleCount\":0,\"createTime\":1710331975000,\"id\":14,\"tagName\":\"鸵鸟目\",\"updateTime\":1710331977000},{\"articleCount\":1,\"createTime\":1710336543000,\"id\":15,\"tagName\":\"鸵鸟科目\",\"updateTime\":1710336543000},{\"articleCount\":1,\"createTime\":1710336559000,\"id\":16,\"tagName\":\"鸵鸟属\",\"updateTime\":1710336559000}],\"msg\":\"success\"}', '/tag/back/list', 8, '获取标签列表', '2024-03-14 11:29:00', '2024-03-14 11:29:00', 0);
INSERT INTO `sys_log` VALUES (2940, '标签管理', '删除', 'fish', '127.0.0.1', '内网IP', 1, 'xyz.kuailemao.controller.TagController.deleteTag()', '[[2]]', 'DELETE', NULL, '{\"code\":500,\"msg\":\"标签下存在文章，无法删除\"}', '/tag/back/delete', 1, '删除标签', '2024-03-14 11:29:01', '2024-03-14 11:29:01', 0);
INSERT INTO `sys_log` VALUES (2941, '标签管理', '删除', 'fish', '127.0.0.1', '内网IP', 1, 'xyz.kuailemao.controller.TagController.deleteTag()', '[[2]]', 'DELETE', NULL, '{\"code\":500,\"msg\":\"标签下存在文章，无法删除\"}', '/tag/back/delete', 2, '删除标签', '2024-03-14 11:29:03', '2024-03-14 11:29:03', 0);
INSERT INTO `sys_log` VALUES (2942, '标签管理', '删除', 'fish', '127.0.0.1', '内网IP', 1, 'xyz.kuailemao.controller.TagController.deleteTag()', '[[2]]', 'DELETE', NULL, '{\"code\":500,\"msg\":\"标签下存在文章，无法删除\"}', '/tag/back/delete', 2, '删除标签', '2024-03-14 11:29:05', '2024-03-14 11:29:05', 0);
INSERT INTO `sys_log` VALUES (2943, '标签管理', '删除', 'fish', '127.0.0.1', '内网IP', 1, 'xyz.kuailemao.controller.TagController.deleteTag()', '[[3]]', 'DELETE', NULL, '{\"code\":500,\"msg\":\"标签下存在文章，无法删除\"}', '/tag/back/delete', 2, '删除标签', '2024-03-14 11:29:10', '2024-03-14 11:29:10', 0);
INSERT INTO `sys_log` VALUES (2944, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ArticleController.listArticle()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg\",\"articleTitle\":\"非洲鸵鸟\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1710385962000,\"id\":41,\"isTop\":0,\"status\":1,\"tagsName\":[\"鸵鸟科目\",\"鸵鸟属\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0}],\"msg\":\"success\"}', '/article/back/list', 6, '获取所有的文章列表', '2024-03-14 11:29:21', '2024-03-14 11:29:21', 0);
INSERT INTO `sys_log` VALUES (2945, '标签管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.listArticleTag()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":3,\"createTime\":1697306573000,\"id\":2,\"tagName\":\"python\",\"updateTime\":1697306575000},{\"articleCount\":4,\"createTime\":1697306586000,\"id\":3,\"tagName\":\"c#\",\"updateTime\":1697306589000},{\"articleCount\":3,\"createTime\":1697306603000,\"id\":4,\"tagName\":\"c++\",\"updateTime\":1697306605000},{\"articleCount\":4,\"createTime\":1697383039000,\"id\":5,\"tagName\":\"开心\",\"updateTime\":1697383042000},{\"articleCount\":0,\"createTime\":1710331975000,\"id\":14,\"tagName\":\"鸵鸟目\",\"updateTime\":1710331977000},{\"articleCount\":1,\"createTime\":1710336543000,\"id\":15,\"tagName\":\"鸵鸟科目\",\"updateTime\":1710336543000},{\"articleCount\":1,\"createTime\":1710336559000,\"id\":16,\"tagName\":\"鸵鸟属\",\"updateTime\":1710336559000}],\"msg\":\"success\"}', '/tag/back/list', 9, '获取标签列表', '2024-03-14 11:29:28', '2024-03-14 11:29:28', 0);
INSERT INTO `sys_log` VALUES (2946, '标签管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.getTagById()', '[2]', 'GET', NULL, '{\"code\":200,\"data\":{\"createTime\":1697306573000,\"id\":2,\"tagName\":\"python\",\"updateTime\":1697306575000},\"msg\":\"success\"}', '/tag/back/get/2', 1, '根据id查询标签', '2024-03-14 11:29:32', '2024-03-14 11:29:32', 0);
INSERT INTO `sys_log` VALUES (2947, '标签管理', '删除', 'fish', '127.0.0.1', '内网IP', 1, 'xyz.kuailemao.controller.TagController.deleteTag()', '[[2]]', 'DELETE', NULL, '{\"code\":500,\"msg\":\"标签下存在文章，无法删除\"}', '/tag/back/delete', 2, '删除标签', '2024-03-14 11:29:37', '2024-03-14 11:29:37', 0);
INSERT INTO `sys_log` VALUES (2948, '标签管理', '删除', 'fish', '127.0.0.1', '内网IP', 1, 'xyz.kuailemao.controller.TagController.deleteTag()', '[[2,3,4,5]]', 'DELETE', NULL, '{\"code\":500,\"msg\":\"标签下存在文章，无法删除\"}', '/tag/back/delete', 2, '删除标签', '2024-03-14 11:29:57', '2024-03-14 11:29:57', 0);
INSERT INTO `sys_log` VALUES (2949, '标签管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.listArticleTag()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":3,\"createTime\":1697306573000,\"id\":2,\"tagName\":\"python\",\"updateTime\":1697306575000},{\"articleCount\":4,\"createTime\":1697306586000,\"id\":3,\"tagName\":\"c#\",\"updateTime\":1697306589000},{\"articleCount\":3,\"createTime\":1697306603000,\"id\":4,\"tagName\":\"c++\",\"updateTime\":1697306605000},{\"articleCount\":4,\"createTime\":1697383039000,\"id\":5,\"tagName\":\"开心\",\"updateTime\":1697383042000},{\"articleCount\":0,\"createTime\":1710331975000,\"id\":14,\"tagName\":\"鸵鸟目\",\"updateTime\":1710331977000},{\"articleCount\":1,\"createTime\":1710336543000,\"id\":15,\"tagName\":\"鸵鸟科目\",\"updateTime\":1710336543000},{\"articleCount\":1,\"createTime\":1710336559000,\"id\":16,\"tagName\":\"鸵鸟属\",\"updateTime\":1710336559000}],\"msg\":\"success\"}', '/tag/back/list', 73, '获取标签列表', '2024-03-14 11:48:45', '2024-03-14 11:48:45', 0);
INSERT INTO `sys_log` VALUES (2950, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ArticleController.listArticle()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg\",\"articleTitle\":\"非洲鸵鸟\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1710385962000,\"id\":41,\"isTop\":0,\"status\":1,\"tagsName\":[\"鸵鸟科目\",\"鸵鸟属\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0}],\"msg\":\"success\"}', '/article/back/list', 29, '获取所有的文章列表', '2024-03-14 11:50:52', '2024-03-14 11:50:52', 0);
INSERT INTO `sys_log` VALUES (2951, '文章管理', '搜索', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ArticleController.searchArticle()', '[{\"categoryId\":2}]', 'POST', NULL, '{\"code\":200,\"msg\":\"success\"}', '/article/back/search', 3, '搜索文章列表', '2024-03-14 11:53:43', '2024-03-14 11:53:43', 0);
INSERT INTO `sys_log` VALUES (2952, '文章管理', '搜索', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ArticleController.searchArticle()', '[{\"categoryId\":6}]', 'POST', NULL, '{\"code\":200,\"data\":[{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg\",\"articleTitle\":\"非洲鸵鸟\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1710385962000,\"id\":41,\"isTop\":0,\"status\":1,\"tagsName\":[\"鸵鸟科目\",\"鸵鸟属\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0}],\"msg\":\"success\"}', '/article/back/search', 9, '搜索文章列表', '2024-03-14 11:53:47', '2024-03-14 11:53:47', 0);
INSERT INTO `sys_log` VALUES (2953, '角色管理', '新增', 'fish', '127.0.0.1', '内网IP', 2, 'xyz.kuailemao.controller.RoleController.addRole()', '[{\"menuIds\":[21,42,70],\"orderNum\":4,\"remark\":\"基本用户进入后台可以观看到的内容\",\"roleKey\":\"test\",\"roleName\":\"鸟民\",\"status\":0}]', 'PUT', '/ by zero', NULL, '/role/add', 4, NULL, '2024-03-14 12:00:49', '2024-03-14 12:00:49', 0);
INSERT INTO `sys_log` VALUES (2954, '角色管理', '新增', 'fish', '127.0.0.1', '内网IP', 2, 'xyz.kuailemao.controller.RoleController.addRole()', '[{\"menuIds\":[21,42,70],\"orderNum\":4,\"remark\":\"可进入后台观战的用户\",\"roleKey\":\"test\",\"roleName\":\"鸟民\",\"status\":0}]', 'PUT', '/ by zero', NULL, '/role/add', 1, NULL, '2024-03-14 12:03:23', '2024-03-14 12:03:23', 0);
INSERT INTO `sys_log` VALUES (2955, '角色管理', '新增', 'fish', '127.0.0.1', '内网IP', 1, 'xyz.kuailemao.controller.RoleController.addRole()', '[{\"menuIds\":[21,42,70],\"orderNum\":4,\"remark\":\"用户可以观战的部分的后台\",\"roleKey\":\"test\",\"roleName\":\"鸟民\",\"status\":0}]', 'PUT', NULL, '{\"code\":500,\"msg\":\"角色字符不可重复\"}', '/role/add', 8, '添加角色信息', '2024-03-14 12:06:09', '2024-03-14 12:06:09', 0);
INSERT INTO `sys_log` VALUES (2956, '角色管理', '新增', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.RoleController.addRole()', '[{\"menuIds\":[21,70],\"orderNum\":6,\"remark\":\"testt\",\"roleKey\":\"testt\",\"roleName\":\"鸟民\",\"status\":0}]', 'PUT', NULL, '{\"code\":200,\"msg\":\"success\"}', '/role/add', 15, '添加角色信息', '2024-03-14 12:07:35', '2024-03-14 12:07:35', 0);
INSERT INTO `sys_log` VALUES (2957, '分类管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CategoryController.listArticleCategory()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":0,\"categoryName\":\"test\",\"createTime\":1697306622000,\"id\":1,\"updateTime\":1697306625000},{\"articleCount\":0,\"categoryName\":\"test1\",\"createTime\":1697306633000,\"id\":2,\"updateTime\":1697306636000},{\"articleCount\":0,\"categoryName\":\"test2\",\"createTime\":1697306644000,\"id\":3,\"updateTime\":1697306646000},{\"articleCount\":0,\"categoryName\":\"test3\",\"createTime\":1704338607000,\"id\":4,\"updateTime\":1704338607000},{\"articleCount\":1,\"categoryName\":\"鸵鸟科\",\"createTime\":1710330928000,\"id\":6,\"updateTime\":1710330928000}],\"msg\":\"success\"}', '/category/back/list', 16, '获取分类列表', '2024-03-14 12:34:47', '2024-03-14 12:34:47', 0);
INSERT INTO `sys_log` VALUES (2958, '收藏管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.FavoriteController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"msg\":\"success\"}', '/favorite/back/list', 6, '后台收藏列表', '2024-03-14 12:34:53', '2024-03-14 12:34:53', 0);
INSERT INTO `sys_log` VALUES (2959, '分类管理', '删除', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CategoryController.deleteCategory()', '[[1]]', 'DELETE', NULL, '{\"code\":200,\"msg\":\"success\"}', '/category/back/delete', 8, '删除分类', '2024-03-14 12:34:58', '2024-03-14 12:34:58', 0);
INSERT INTO `sys_log` VALUES (2960, '分类管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CategoryController.listArticleCategory()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":0,\"categoryName\":\"test1\",\"createTime\":1697306633000,\"id\":2,\"updateTime\":1697306636000},{\"articleCount\":0,\"categoryName\":\"test2\",\"createTime\":1697306644000,\"id\":3,\"updateTime\":1697306646000},{\"articleCount\":0,\"categoryName\":\"test3\",\"createTime\":1704338607000,\"id\":4,\"updateTime\":1704338607000},{\"articleCount\":1,\"categoryName\":\"鸵鸟科\",\"createTime\":1710330928000,\"id\":6,\"updateTime\":1710330928000}],\"msg\":\"success\"}', '/category/back/list', 7, '获取分类列表', '2024-03-14 12:34:59', '2024-03-14 12:34:59', 0);
INSERT INTO `sys_log` VALUES (2961, '分类管理', '删除', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CategoryController.deleteCategory()', '[[2]]', 'DELETE', NULL, '{\"code\":200,\"msg\":\"success\"}', '/category/back/delete', 7, '删除分类', '2024-03-14 12:35:01', '2024-03-14 12:35:01', 0);
INSERT INTO `sys_log` VALUES (2962, '分类管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CategoryController.listArticleCategory()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":0,\"categoryName\":\"test2\",\"createTime\":1697306644000,\"id\":3,\"updateTime\":1697306646000},{\"articleCount\":0,\"categoryName\":\"test3\",\"createTime\":1704338607000,\"id\":4,\"updateTime\":1704338607000},{\"articleCount\":1,\"categoryName\":\"鸵鸟科\",\"createTime\":1710330928000,\"id\":6,\"updateTime\":1710330928000}],\"msg\":\"success\"}', '/category/back/list', 7, '获取分类列表', '2024-03-14 12:35:01', '2024-03-14 12:35:01', 0);
INSERT INTO `sys_log` VALUES (2963, '分类管理', '删除', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CategoryController.deleteCategory()', '[[3]]', 'DELETE', NULL, '{\"code\":200,\"msg\":\"success\"}', '/category/back/delete', 6, '删除分类', '2024-03-14 12:35:03', '2024-03-14 12:35:03', 0);
INSERT INTO `sys_log` VALUES (2964, '分类管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CategoryController.listArticleCategory()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":0,\"categoryName\":\"test3\",\"createTime\":1704338607000,\"id\":4,\"updateTime\":1704338607000},{\"articleCount\":1,\"categoryName\":\"鸵鸟科\",\"createTime\":1710330928000,\"id\":6,\"updateTime\":1710330928000}],\"msg\":\"success\"}', '/category/back/list', 6, '获取分类列表', '2024-03-14 12:35:03', '2024-03-14 12:35:03', 0);
INSERT INTO `sys_log` VALUES (2965, '分类管理', '删除', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CategoryController.deleteCategory()', '[[4]]', 'DELETE', NULL, '{\"code\":200,\"msg\":\"success\"}', '/category/back/delete', 6, '删除分类', '2024-03-14 12:35:06', '2024-03-14 12:35:06', 0);
INSERT INTO `sys_log` VALUES (2966, '分类管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CategoryController.listArticleCategory()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":1,\"categoryName\":\"鸵鸟科\",\"createTime\":1710330928000,\"id\":6,\"updateTime\":1710330928000}],\"msg\":\"success\"}', '/category/back/list', 2, '获取分类列表', '2024-03-14 12:35:06', '2024-03-14 12:35:06', 0);
INSERT INTO `sys_log` VALUES (2967, '标签管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.listArticleTag()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":3,\"createTime\":1697306573000,\"id\":2,\"tagName\":\"python\",\"updateTime\":1697306575000},{\"articleCount\":4,\"createTime\":1697306586000,\"id\":3,\"tagName\":\"c#\",\"updateTime\":1697306589000},{\"articleCount\":3,\"createTime\":1697306603000,\"id\":4,\"tagName\":\"c++\",\"updateTime\":1697306605000},{\"articleCount\":4,\"createTime\":1697383039000,\"id\":5,\"tagName\":\"开心\",\"updateTime\":1697383042000},{\"articleCount\":0,\"createTime\":1710331975000,\"id\":14,\"tagName\":\"鸵鸟目\",\"updateTime\":1710331977000},{\"articleCount\":1,\"createTime\":1710336543000,\"id\":15,\"tagName\":\"鸵鸟科目\",\"updateTime\":1710336543000},{\"articleCount\":1,\"createTime\":1710336559000,\"id\":16,\"tagName\":\"鸵鸟属\",\"updateTime\":1710336559000}],\"msg\":\"success\"}', '/tag/back/list', 23, '获取标签列表', '2024-03-14 12:35:10', '2024-03-14 12:35:10', 0);
INSERT INTO `sys_log` VALUES (2968, '标签管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.listArticleTag()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":0,\"createTime\":1697306573000,\"id\":2,\"tagName\":\"python\",\"updateTime\":1697306575000},{\"articleCount\":1,\"createTime\":1697306586000,\"id\":3,\"tagName\":\"c#\",\"updateTime\":1697306589000},{\"articleCount\":0,\"createTime\":1697306603000,\"id\":4,\"tagName\":\"c++\",\"updateTime\":1697306605000},{\"articleCount\":2,\"createTime\":1697383039000,\"id\":5,\"tagName\":\"开心\",\"updateTime\":1697383042000},{\"articleCount\":0,\"createTime\":1710331975000,\"id\":14,\"tagName\":\"鸵鸟目\",\"updateTime\":1710331977000},{\"articleCount\":1,\"createTime\":1710336543000,\"id\":15,\"tagName\":\"鸵鸟科目\",\"updateTime\":1710336543000},{\"articleCount\":1,\"createTime\":1710336559000,\"id\":16,\"tagName\":\"鸵鸟属\",\"updateTime\":1710336559000}],\"msg\":\"success\"}', '/tag/back/list', 14, '获取标签列表', '2024-03-14 12:40:02', '2024-03-14 12:40:02', 0);
INSERT INTO `sys_log` VALUES (2969, '标签管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.getTagById()', '[3]', 'GET', NULL, '{\"code\":200,\"data\":{\"createTime\":1697306586000,\"id\":3,\"tagName\":\"c#\",\"updateTime\":1697306589000},\"msg\":\"success\"}', '/tag/back/get/3', 1, '根据id查询标签', '2024-03-14 12:40:19', '2024-03-14 12:40:19', 0);
INSERT INTO `sys_log` VALUES (2970, '标签管理', '删除', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.deleteTag()', '[[4]]', 'DELETE', NULL, '{\"code\":200,\"msg\":\"success\"}', '/tag/back/delete', 8, '删除标签', '2024-03-14 12:40:24', '2024-03-14 12:40:24', 0);
INSERT INTO `sys_log` VALUES (2971, '标签管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.listArticleTag()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":0,\"createTime\":1697306573000,\"id\":2,\"tagName\":\"python\",\"updateTime\":1697306575000},{\"articleCount\":1,\"createTime\":1697306586000,\"id\":3,\"tagName\":\"c#\",\"updateTime\":1697306589000},{\"articleCount\":2,\"createTime\":1697383039000,\"id\":5,\"tagName\":\"开心\",\"updateTime\":1697383042000},{\"articleCount\":0,\"createTime\":1710331975000,\"id\":14,\"tagName\":\"鸵鸟目\",\"updateTime\":1710331977000},{\"articleCount\":1,\"createTime\":1710336543000,\"id\":15,\"tagName\":\"鸵鸟科目\",\"updateTime\":1710336543000},{\"articleCount\":1,\"createTime\":1710336559000,\"id\":16,\"tagName\":\"鸵鸟属\",\"updateTime\":1710336559000}],\"msg\":\"success\"}', '/tag/back/list', 12, '获取标签列表', '2024-03-14 12:40:24', '2024-03-14 12:40:24', 0);
INSERT INTO `sys_log` VALUES (2972, '标签管理', '删除', 'fish', '127.0.0.1', '内网IP', 1, 'xyz.kuailemao.controller.TagController.deleteTag()', '[[3]]', 'DELETE', NULL, '{\"code\":500,\"msg\":\"标签下存在文章，无法删除\"}', '/tag/back/delete', 2, '删除标签', '2024-03-14 12:40:26', '2024-03-14 12:40:26', 0);
INSERT INTO `sys_log` VALUES (2973, '留言管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LeaveWordController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"content\":\"## 测试比较长的留言\\\\n\\\\n> 下面是一篇 c# 笔记\\\\n\\\\n<center>\\\\n    <h1>C#笔记</h1>\\\\n</center>\\\\n\\\\n\\\\n\\\\n[TOC] \\\\n\\\\n### 1、C#访问修饰符\\\\n\\\\n​\\\\t\\\\t在C#当中的访问修饰符及作用范围如下：\\\\n\\\\n|     访问修饰符     |                        说明                        |\\\\n| :----------------: | :------------------------------------------------: |\\\\n|       public       |              共有访问。不受任何限制。              |\\\\n|      private       |      私有访问。只有本类能访问，实例不能访问。      |\\\\n|     protected      |   保护访问。只限于本类和子类访问，实例不能访问。   |\\\\n|      internal      |      内部访问。只限于本项目访问，其他不能访问      |\\\\n| protected internal | 内部保护访问。只限于本项目或子类访问，其他不能访问 |\\\\n\\\\n​\\\\t\\\\tC#成员类型的可修饰及默认修饰符如下：\\\\n\\\\n| 成员类型  | 默认修饰符 |                           可被修饰                           |\\\\n| :-------: | :--------: | :----------------------------------------------------------: |\\\\n|   enum    |   public   |                             none                             |\\\\n|   class   |  private   | public、protected、internal、private、<br />protected internal |\\\\n| interface |   public   |                             none                             |\\\\n|  struct   |  private   |                  public、internal、private                   |\\\\n\\\\n> public 访问级别最高\\\\n>\\\\n> private 访问级别最低\\\\n\\\\n### 2、this 关键字\\\\n\\\\n看以下代码，有什么问题：\\\\n\\\\n```C#\\\\nclass Strdent\\\\n{\\\\n    private string _name;\\\\t//姓名\\\\t\\\\n    public int _age = 19;\\\\t//年龄\\\\n    public string _cardID = \\\\\\\"145236985674526685\\\\\\\";\\\\t//身份证号码\\\\n    public void SetName(string _name)\\\\n    {\\\\n        _name = _name;\\\\n    }\\\\n}\\\\n```\\\\n\\\\n分析： 在 Student 类中定义了一个 private 成员变量 _name,在 SetName()方法的参数中也定义了一个与之同名的变量 _name。这时编译器会发现成员变量和方法的参数重名了。\\\\n此时，编译器无法分辨代码中出现的这两个 _name 那个是成员变量，哪个是方法中的参数。我们可以借助 this 关键字来解决这个问题。\\\\n\\\\n> this 关键字是指当前对象本身。通过 this 可以引用当前类的成员变量和方法。\\\\n\\\\n因此可以改变以上代码为：\\\\n\\\\n```C#\\\\nclass Strdent\\\\n{\\\\n    private string _name;\\\\t//姓名\\\\t\\\\n    public int _age = 19;\\\\t//年龄\\\\n    public string _cardID = \\\\\\\"145236985674526685\\\\\\\";\\\\t//身份证号码\\\\n    public void SetName(string _name)\\\\n    {\\\\n        this._name = _name;\\\\n    }\\\\n}\\\\n```\\\\n\\\\n> 使用 this 关键字可以解决成员变量和局部变量名称冲突的问题。\\\\n\\\\n### 3、C#属性\\\\n\\\\n#### 3.1、用方法保证数据安全\",\"createTime\":1705378527000,\"id\":13,\"isCheck\":1,\"updateTime\":1705378527000,\"userName\":\"test\"},{\"content\":\"# \\\\u6DFB\\\\u52A0\\\\u7559\\\\u8A00\\\\u677F\\\\\\\\n\\\\\\\\n* \\\\u6DFB\\\\u52A0\\\\u6D4B\\\\u8BD5\\\\\\\\n* dddd\",\"createTime\":1705381840000,\"id\":23,\"isCheck\":1,\"updateTime\":1705381840000,\"userName\":\"test\"},{\"content\":\"# 添加留言板\\n\\n* 添加测试aaa\",\"createTime\":1705382184000,\"id\":24,\"isCheck\":1,\"updateTime\":1705382184000,\"userName\":\"test\"},{\"content\":\"## 测试比较长的留言\\n\\n> 下面是一篇 c# 笔记\\n\\n<center>\\n    <h1>C#笔记</h1>\\n</center>\\n\\n\\n\\n[TOC] \\n\\n### 1、C#访问修饰符\\n\\n​\\t\\t在C#当中的访问修饰符及作用范围如下：\\n\\n|     访问修饰符     |                        说明                        |\\n| :----------------: | :------------------------------------------------: |\\n|       public       |              共有访问。不受任何限制。              |\\n|      private       |      私有访问。只有本类能访问，实例不能访问。      |\\n|     protected      |   保护访问。只限于本类和子类访问，实例不能访问。   |\\n|      internal      |      内部访问。只限于本项目访问，其他不能访问      |\\n| protected internal | 内部保护访问。只限于本项目或子类访问，其他不能访问 |\\n\\n​\\t\\tC#成员类型的可修饰及默认修饰符如下：\\n\\n| 成员类型  | 默认修饰符 |                           可被修饰                           |\\n| :-------: | :--------: | :----------------------------------------------------------: |\\n|   enum    |   public   |                             none                             |\\n|   class   |  private   | public、protected、internal、private、<br />protected internal |\\n| interface |   public   |                             none                             |\\n|  struct   |  private   |                  public、internal、private                   |\\n\\n> public 访问级别最高\\n>\\n> private 访问级别最低\\n\\n### 2、this 关键字\\n\\n看以下代码，有什么问题：\\n\\n```C#\\nclass Strdent\\n{\\n    private string _name;\\t//姓名\\t\\n    public int _age = 19;\\t//年龄\\n    public string _cardID = \\\"145236985674526685\\\";\\t//身份证号码\\n    public void SetName(string _name)\\n    {\\n        _name = _name;\\n    }\\n}\\n```\\n\\n分析： 在 Student 类中定义了一个 private 成员变量 _name,在 SetName()方法的参数中也定义了一个与之同名的变量 _name。这时编译器会发现成员变量和方法的参数重名了。\\n此时，编译器无法分辨代码中出现的这两个 _\",\"createTime\":1705382708000,\"id\":25,\"isCheck\":1,\"updateTime\":1705382708000,\"userName\":\"test\"},{\"content\":\"## 测试留言Markdown 编写\\n\\n> 不要报错\\n\\n> ~~没有bug~~\",\"createTime\":1705382870000,\"id\":26,\"isCheck\":1,\"updateTime\":1705382870000,\"userName\":\"test\"},{\"content\":\"### 留言bug 最后测试\",\"createTime\":1705382974000,\"id\":27,\"isCheck\":1,\"updateTime\":1705383023000,\"userName\":\"test\"}],\"msg\":\"success\"}', '/leaveWord/back/list', 15, '后台留言列表', '2024-03-14 12:40:30', '2024-03-14 12:40:30', 0);
INSERT INTO `sys_log` VALUES (2974, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ArticleController.listArticle()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg\",\"articleTitle\":\"非洲鸵鸟\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1710385962000,\"id\":41,\"isTop\":0,\"status\":1,\"tagsName\":[\"鸵鸟科目\",\"鸵鸟属\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0}],\"msg\":\"success\"}', '/article/back/list', 15, '获取所有的文章列表', '2024-03-14 12:40:36', '2024-03-14 12:40:36', 0);
INSERT INTO `sys_log` VALUES (2975, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ArticleController.getArticleEcho()', '[41]', 'GET', NULL, '{\"code\":200,\"data\":{\"articleContent\":\"## 测试文件\",\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg\",\"articleTitle\":\"非洲鸵鸟\",\"articleType\":1,\"categoryId\":6,\"id\":41,\"isTop\":0,\"status\":1,\"tagId\":[15,16]},\"msg\":\"success\"}', '/article/back/echo/41', 5, '回显文章数据', '2024-03-14 12:40:41', '2024-03-14 12:40:41', 0);
INSERT INTO `sys_log` VALUES (2976, '标签管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.listArticleTag()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":0,\"createTime\":1697306573000,\"id\":2,\"tagName\":\"python\",\"updateTime\":1697306575000},{\"articleCount\":0,\"createTime\":1697306586000,\"id\":3,\"tagName\":\"c#\",\"updateTime\":1697306589000},{\"articleCount\":0,\"createTime\":1697383039000,\"id\":5,\"tagName\":\"开心\",\"updateTime\":1697383042000},{\"articleCount\":0,\"createTime\":1710331975000,\"id\":14,\"tagName\":\"鸵鸟目\",\"updateTime\":1710331977000},{\"articleCount\":1,\"createTime\":1710336543000,\"id\":15,\"tagName\":\"鸵鸟科目\",\"updateTime\":1710336543000},{\"articleCount\":1,\"createTime\":1710336559000,\"id\":16,\"tagName\":\"鸵鸟属\",\"updateTime\":1710336559000}],\"msg\":\"success\"}', '/tag/back/list', 10, '获取标签列表', '2024-03-14 12:41:18', '2024-03-14 12:41:18', 0);
INSERT INTO `sys_log` VALUES (2977, '标签管理', '删除', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.deleteTag()', '[[2]]', 'DELETE', NULL, '{\"code\":200,\"msg\":\"success\"}', '/tag/back/delete', 5, '删除标签', '2024-03-14 12:41:23', '2024-03-14 12:41:23', 0);
INSERT INTO `sys_log` VALUES (2978, '标签管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.listArticleTag()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":0,\"createTime\":1697306586000,\"id\":3,\"tagName\":\"c#\",\"updateTime\":1697306589000},{\"articleCount\":0,\"createTime\":1697383039000,\"id\":5,\"tagName\":\"开心\",\"updateTime\":1697383042000},{\"articleCount\":0,\"createTime\":1710331975000,\"id\":14,\"tagName\":\"鸵鸟目\",\"updateTime\":1710331977000},{\"articleCount\":1,\"createTime\":1710336543000,\"id\":15,\"tagName\":\"鸵鸟科目\",\"updateTime\":1710336543000},{\"articleCount\":1,\"createTime\":1710336559000,\"id\":16,\"tagName\":\"鸵鸟属\",\"updateTime\":1710336559000}],\"msg\":\"success\"}', '/tag/back/list', 8, '获取标签列表', '2024-03-14 12:41:23', '2024-03-14 12:41:23', 0);
INSERT INTO `sys_log` VALUES (2979, '标签管理', '删除', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.deleteTag()', '[[3]]', 'DELETE', NULL, '{\"code\":200,\"msg\":\"success\"}', '/tag/back/delete', 5, '删除标签', '2024-03-14 12:41:24', '2024-03-14 12:41:24', 0);
INSERT INTO `sys_log` VALUES (2980, '标签管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.listArticleTag()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":0,\"createTime\":1697383039000,\"id\":5,\"tagName\":\"开心\",\"updateTime\":1697383042000},{\"articleCount\":0,\"createTime\":1710331975000,\"id\":14,\"tagName\":\"鸵鸟目\",\"updateTime\":1710331977000},{\"articleCount\":1,\"createTime\":1710336543000,\"id\":15,\"tagName\":\"鸵鸟科目\",\"updateTime\":1710336543000},{\"articleCount\":1,\"createTime\":1710336559000,\"id\":16,\"tagName\":\"鸵鸟属\",\"updateTime\":1710336559000}],\"msg\":\"success\"}', '/tag/back/list', 7, '获取标签列表', '2024-03-14 12:41:25', '2024-03-14 12:41:25', 0);
INSERT INTO `sys_log` VALUES (2981, '标签管理', '删除', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.deleteTag()', '[[5]]', 'DELETE', NULL, '{\"code\":200,\"msg\":\"success\"}', '/tag/back/delete', 6, '删除标签', '2024-03-14 12:41:27', '2024-03-14 12:41:27', 0);
INSERT INTO `sys_log` VALUES (2982, '标签管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.listArticleTag()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":0,\"createTime\":1710331975000,\"id\":14,\"tagName\":\"鸵鸟目\",\"updateTime\":1710331977000},{\"articleCount\":1,\"createTime\":1710336543000,\"id\":15,\"tagName\":\"鸵鸟科目\",\"updateTime\":1710336543000},{\"articleCount\":1,\"createTime\":1710336559000,\"id\":16,\"tagName\":\"鸵鸟属\",\"updateTime\":1710336559000}],\"msg\":\"success\"}', '/tag/back/list', 6, '获取标签列表', '2024-03-14 12:41:27', '2024-03-14 12:41:27', 0);
INSERT INTO `sys_log` VALUES (2983, '标签管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.getTagById()', '[15]', 'GET', NULL, '{\"code\":200,\"data\":{\"createTime\":1710336543000,\"id\":15,\"tagName\":\"鸵鸟科目\",\"updateTime\":1710336543000},\"msg\":\"success\"}', '/tag/back/get/15', 1, '根据id查询标签', '2024-03-14 12:41:31', '2024-03-14 12:41:31', 0);
INSERT INTO `sys_log` VALUES (2984, '标签管理', '修改', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.updateTag()', '[{\"id\":15,\"tagName\":\"鸵鸟科\"}]', 'POST', NULL, '{\"code\":200,\"msg\":\"success\"}', '/tag/back/update', 6, '修改标签', '2024-03-14 12:41:35', '2024-03-14 12:41:35', 0);
INSERT INTO `sys_log` VALUES (2985, '标签管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.listArticleTag()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":0,\"createTime\":1710331975000,\"id\":14,\"tagName\":\"鸵鸟目\",\"updateTime\":1710331977000},{\"articleCount\":1,\"createTime\":1710336543000,\"id\":15,\"tagName\":\"鸵鸟科\",\"updateTime\":1710391295000},{\"articleCount\":1,\"createTime\":1710336559000,\"id\":16,\"tagName\":\"鸵鸟属\",\"updateTime\":1710336559000}],\"msg\":\"success\"}', '/tag/back/list', 4, '获取标签列表', '2024-03-14 12:41:36', '2024-03-14 12:41:36', 0);
INSERT INTO `sys_log` VALUES (2986, '留言管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LeaveWordController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"content\":\"## 测试比较长的留言\\\\n\\\\n> 下面是一篇 c# 笔记\\\\n\\\\n<center>\\\\n    <h1>C#笔记</h1>\\\\n</center>\\\\n\\\\n\\\\n\\\\n[TOC] \\\\n\\\\n### 1、C#访问修饰符\\\\n\\\\n​\\\\t\\\\t在C#当中的访问修饰符及作用范围如下：\\\\n\\\\n|     访问修饰符     |                        说明                        |\\\\n| :----------------: | :------------------------------------------------: |\\\\n|       public       |              共有访问。不受任何限制。              |\\\\n|      private       |      私有访问。只有本类能访问，实例不能访问。      |\\\\n|     protected      |   保护访问。只限于本类和子类访问，实例不能访问。   |\\\\n|      internal      |      内部访问。只限于本项目访问，其他不能访问      |\\\\n| protected internal | 内部保护访问。只限于本项目或子类访问，其他不能访问 |\\\\n\\\\n​\\\\t\\\\tC#成员类型的可修饰及默认修饰符如下：\\\\n\\\\n| 成员类型  | 默认修饰符 |                           可被修饰                           |\\\\n| :-------: | :--------: | :----------------------------------------------------------: |\\\\n|   enum    |   public   |                             none                             |\\\\n|   class   |  private   | public、protected、internal、private、<br />protected internal |\\\\n| interface |   public   |                             none                             |\\\\n|  struct   |  private   |                  public、internal、private                   |\\\\n\\\\n> public 访问级别最高\\\\n>\\\\n> private 访问级别最低\\\\n\\\\n### 2、this 关键字\\\\n\\\\n看以下代码，有什么问题：\\\\n\\\\n```C#\\\\nclass Strdent\\\\n{\\\\n    private string _name;\\\\t//姓名\\\\t\\\\n    public int _age = 19;\\\\t//年龄\\\\n    public string _cardID = \\\\\\\"145236985674526685\\\\\\\";\\\\t//身份证号码\\\\n    public void SetName(string _name)\\\\n    {\\\\n        _name = _name;\\\\n    }\\\\n}\\\\n```\\\\n\\\\n分析： 在 Student 类中定义了一个 private 成员变量 _name,在 SetName()方法的参数中也定义了一个与之同名的变量 _name。这时编译器会发现成员变量和方法的参数重名了。\\\\n此时，编译器无法分辨代码中出现的这两个 _name 那个是成员变量，哪个是方法中的参数。我们可以借助 this 关键字来解决这个问题。\\\\n\\\\n> this 关键字是指当前对象本身。通过 this 可以引用当前类的成员变量和方法。\\\\n\\\\n因此可以改变以上代码为：\\\\n\\\\n```C#\\\\nclass Strdent\\\\n{\\\\n    private string _name;\\\\t//姓名\\\\t\\\\n    public int _age = 19;\\\\t//年龄\\\\n    public string _cardID = \\\\\\\"145236985674526685\\\\\\\";\\\\t//身份证号码\\\\n    public void SetName(string _name)\\\\n    {\\\\n        this._name = _name;\\\\n    }\\\\n}\\\\n```\\\\n\\\\n> 使用 this 关键字可以解决成员变量和局部变量名称冲突的问题。\\\\n\\\\n### 3、C#属性\\\\n\\\\n#### 3.1、用方法保证数据安全\",\"createTime\":1705378527000,\"id\":13,\"isCheck\":1,\"updateTime\":1705378527000,\"userName\":\"test\"},{\"content\":\"# \\\\u6DFB\\\\u52A0\\\\u7559\\\\u8A00\\\\u677F\\\\\\\\n\\\\\\\\n* \\\\u6DFB\\\\u52A0\\\\u6D4B\\\\u8BD5\\\\\\\\n* dddd\",\"createTime\":1705381840000,\"id\":23,\"isCheck\":1,\"updateTime\":1705381840000,\"userName\":\"test\"},{\"content\":\"# 添加留言板\\n\\n* 添加测试aaa\",\"createTime\":1705382184000,\"id\":24,\"isCheck\":1,\"updateTime\":1705382184000,\"userName\":\"test\"},{\"content\":\"## 测试比较长的留言\\n\\n> 下面是一篇 c# 笔记\\n\\n<center>\\n    <h1>C#笔记</h1>\\n</center>\\n\\n\\n\\n[TOC] \\n\\n### 1、C#访问修饰符\\n\\n​\\t\\t在C#当中的访问修饰符及作用范围如下：\\n\\n|     访问修饰符     |                        说明                        |\\n| :----------------: | :------------------------------------------------: |\\n|       public       |              共有访问。不受任何限制。              |\\n|      private       |      私有访问。只有本类能访问，实例不能访问。      |\\n|     protected      |   保护访问。只限于本类和子类访问，实例不能访问。   |\\n|      internal      |      内部访问。只限于本项目访问，其他不能访问      |\\n| protected internal | 内部保护访问。只限于本项目或子类访问，其他不能访问 |\\n\\n​\\t\\tC#成员类型的可修饰及默认修饰符如下：\\n\\n| 成员类型  | 默认修饰符 |                           可被修饰                           |\\n| :-------: | :--------: | :----------------------------------------------------------: |\\n|   enum    |   public   |                             none                             |\\n|   class   |  private   | public、protected、internal、private、<br />protected internal |\\n| interface |   public   |                             none                             |\\n|  struct   |  private   |                  public、internal、private                   |\\n\\n> public 访问级别最高\\n>\\n> private 访问级别最低\\n\\n### 2、this 关键字\\n\\n看以下代码，有什么问题：\\n\\n```C#\\nclass Strdent\\n{\\n    private string _name;\\t//姓名\\t\\n    public int _age = 19;\\t//年龄\\n    public string _cardID = \\\"145236985674526685\\\";\\t//身份证号码\\n    public void SetName(string _name)\\n    {\\n        _name = _name;\\n    }\\n}\\n```\\n\\n分析： 在 Student 类中定义了一个 private 成员变量 _name,在 SetName()方法的参数中也定义了一个与之同名的变量 _name。这时编译器会发现成员变量和方法的参数重名了。\\n此时，编译器无法分辨代码中出现的这两个 _\",\"createTime\":1705382708000,\"id\":25,\"isCheck\":1,\"updateTime\":1705382708000,\"userName\":\"test\"},{\"content\":\"## 测试留言Markdown 编写\\n\\n> 不要报错\\n\\n> ~~没有bug~~\",\"createTime\":1705382870000,\"id\":26,\"isCheck\":1,\"updateTime\":1705382870000,\"userName\":\"test\"},{\"content\":\"### 留言bug 最后测试\",\"createTime\":1705382974000,\"id\":27,\"isCheck\":1,\"updateTime\":1705383023000,\"userName\":\"test\"}],\"msg\":\"success\"}', '/leaveWord/back/list', 11, '后台留言列表', '2024-03-14 12:41:48', '2024-03-14 12:41:48', 0);
INSERT INTO `sys_log` VALUES (2987, '收藏管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.FavoriteController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"msg\":\"success\"}', '/favorite/back/list', 1, '后台收藏列表', '2024-03-14 12:41:55', '2024-03-14 12:41:55', 0);
INSERT INTO `sys_log` VALUES (2988, '评论管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CommentController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"commentContent\":\"666[哭泣]\",\"commentUserName\":\"test\",\"createTime\":1699241423000,\"id\":43,\"isCheck\":1,\"type\":2,\"typeId\":4,\"updateTime\":1699241423000},{\"commentContent\":\"哈哈哈🤑\",\"commentUserName\":\"test\",\"createTime\":1699241550000,\"id\":44,\"isCheck\":1,\"parentId\":43,\"replyId\":43,\"type\":2,\"typeId\":4,\"updateTime\":1699241550000},{\"commentContent\":\"好像是\",\"commentUserName\":\"test\",\"createTime\":1699241734000,\"id\":47,\"isCheck\":1,\"parentId\":41,\"replyId\":46,\"type\":2,\"typeId\":4,\"updateTime\":1699241734000},{\"commentContent\":\"你好啊[扶额]\",\"commentUserName\":\"test\",\"createTime\":1702804389000,\"id\":48,\"isCheck\":1,\"type\":2,\"typeId\":3,\"updateTime\":1702804389000},{\"commentContent\":\"😦\",\"commentUserName\":\"test\",\"createTime\":1704633870000,\"id\":51,\"isCheck\":1,\"type\":2,\"typeId\":2,\"updateTime\":1704633870000}],\"msg\":\"success\"}', '/comment/back/list', 11, '后台评论列表', '2024-03-14 12:41:58', '2024-03-14 12:41:58', 0);
INSERT INTO `sys_log` VALUES (2989, '聊天管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ChatGptController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"avatar\":\"http://cdn.kuailemao.lielfw.cn/articleCover/Sara11676693014447852.png\",\"conversation\":\"{\\\"content\\\":[{\\\"content\\\":\\\"你好\\\",\\\"type\\\":\\\"question\\\"},{\\\"content\\\":\\\"你好！有什么我可以帮助你的呢？\\\",\\\"type\\\":\\\"response\\\"}],\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\"}\",\"createTime\":1700132069000,\"id\":29,\"isCheck\":1,\"updateTime\":1705811476000,\"userName\":\"test\"},{\"avatar\":\"http://cdn.kuailemao.lielfw.cn/articleCover/Sara11676693014447852.png\",\"conversation\":\"{\\\"content\\\":[{\\\"content\\\":\\\"前端路由的保活是什么意思？\\\",\\\"type\\\":\\\"question\\\"},{\\\"content\\\":\\\"\\\\\\\"前端路由的保活\\\\\\\"主要是针对SPA（单页应用）中的一个重要概念。在单页应用中，当跳转到新的路由地址时，之前的组件会被卸载，新的页面组件会重新加载，这就好像在不刷新网页的情况下对页面进行了重新渲染。而这个过程可能会涉及到耗时较长的异步操作，例如请求数据等。\\\\n\\\\n\\\\\\\"保活\\\\\\\"（也常称为 \\\\\\\"keep alive\\\\\\\"）则是指保持这些组件的状态，而不是每次都进行重新加载。这样可以避免不必要的重新加载，提高应用性能，改善用户体验。 在Vue.js这样的前端框架中，它通过`<keep-alive>`组件提供了保活的功能。\\\\n\\\\n例如，用户在一个列表页浏览到第10页，点击某个项目进入详情页，然后再返回列表页，期望的行为应该是回到第10页，而不是重新加载列表页。如果没有使用保活，那么在返回列表页时会重新加载，展示的可能是第1页的内容。但如果使用了保活，那么用户的浏览状态（第10页）就可以被保持住。\\\\n\\\\n注意并不是所有的情况下都需要使用保活，比如一些数据必须保持最新状态的页面，就不适合使用这个功能。在不需要保持状态的页面使用保活，可能会导致数据过期或不一致。\\\",\\\"type\\\":\\\"response\\\"}],\\\"model\\\":\\\"gpt-4\\\"}\",\"createTime\":1700181466000,\"id\":30,\"isCheck\":1,\"updateTime\":1705811721000,\"userName\":\"test\"}],\"msg\":\"success\"}', '/chatGpt/back/list', 14, '后台聊天列表', '2024-03-14 12:42:02', '2024-03-14 12:42:02', 0);
INSERT INTO `sys_log` VALUES (2990, '友链管理', '获取', 'fish', '127.0.0.1', '内网IP', 2, 'xyz.kuailemao.controller.LinkController.backList()', '[]', 'GET', 'Cannot invoke \"xyz.kuailemao.domain.entity.User.getUsername()\" because the return value of \"xyz.kuailemao.mapper.UserMapper.selectOne(com.baomidou.mybatisplus.core.conditions.Wrapper)\" is null', NULL, '/link/back/list', 10, NULL, '2024-03-14 12:42:05', '2024-03-14 12:42:05', 0);
INSERT INTO `sys_log` VALUES (2991, '友链管理', '获取', 'fish', '127.0.0.1', '内网IP', 2, 'xyz.kuailemao.controller.LinkController.backList()', '[]', 'GET', 'Cannot invoke \"xyz.kuailemao.domain.entity.User.getUsername()\" because the return value of \"xyz.kuailemao.mapper.UserMapper.selectOne(com.baomidou.mybatisplus.core.conditions.Wrapper)\" is null', NULL, '/link/back/list', 12, NULL, '2024-03-14 12:43:29', '2024-03-14 12:43:29', 0);
INSERT INTO `sys_log` VALUES (2992, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ArticleController.listArticle()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg\",\"articleTitle\":\"非洲鸵鸟\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1710385962000,\"id\":41,\"isTop\":0,\"status\":1,\"tagsName\":[\"鸵鸟科\",\"鸵鸟属\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0}],\"msg\":\"success\"}', '/article/back/list', 11, '获取所有的文章列表', '2024-03-14 12:45:10', '2024-03-14 12:45:10', 0);
INSERT INTO `sys_log` VALUES (2993, '新增分类', '新增', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CategoryController.addCategory()', '[{\"categoryName\":\"鹬鸵科\",\"id\":7}]', 'PUT', NULL, '{\"code\":200,\"msg\":\"success\"}', '/category', 5, '新增分类-文章列表', '2024-03-14 12:46:29', '2024-03-14 12:46:29', 0);
INSERT INTO `sys_log` VALUES (2994, '标签管理', '新增', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.addTag()', '[{\"id\":17,\"tagName\":\"鹬鸵科\"}]', 'PUT', NULL, '{\"code\":200,\"msg\":\"success\"}', '/tag', 3, '新增标签-文章列表', '2024-03-14 12:47:22', '2024-03-14 12:47:22', 0);
INSERT INTO `sys_log` VALUES (2995, '文章管理', '上传图片', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ArticleController.uploadArticleCover()', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@5027a23d]', 'POST', NULL, '{\"code\":200,\"data\":\"http://127.0.0.1:9005/test/article/articleCover/296fd6a7-c585-4f11-bf5f-43eaee733d91.jpg\",\"msg\":\"success\"}', '/article/upload/articleCover', 119, '上传文章封面', '2024-03-14 12:48:15', '2024-03-14 12:48:15', 0);
INSERT INTO `sys_log` VALUES (2996, '文章管理', '新增', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ArticleController.publish()', '[{\"articleContent\":\"## 还是一篇测试文章\",\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/296fd6a7-c585-4f11-bf5f-43eaee733d91.jpg\",\"articleTitle\":\"test\",\"articleType\":1,\"categoryId\":7,\"isTop\":1,\"status\":1,\"tagId\":[17]}]', 'POST', NULL, '{\"code\":200,\"msg\":\"success\"}', '/article/publish', 240, '发布文章', '2024-03-14 12:48:15', '2024-03-14 12:48:15', 0);
INSERT INTO `sys_log` VALUES (2997, '标签管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.listArticleTag()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":0,\"createTime\":1710331975000,\"id\":14,\"tagName\":\"鸵鸟目\",\"updateTime\":1710331977000},{\"articleCount\":1,\"createTime\":1710336543000,\"id\":15,\"tagName\":\"鸵鸟科\",\"updateTime\":1710391295000},{\"articleCount\":1,\"createTime\":1710336559000,\"id\":16,\"tagName\":\"鸵鸟属\",\"updateTime\":1710336559000},{\"articleCount\":1,\"createTime\":1710391642000,\"id\":17,\"tagName\":\"鹬鸵科\",\"updateTime\":1710391642000}],\"msg\":\"success\"}', '/tag/back/list', 8, '获取标签列表', '2024-03-14 13:45:54', '2024-03-14 13:45:54', 0);
INSERT INTO `sys_log` VALUES (2998, '分类管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CategoryController.listArticleCategory()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":1,\"categoryName\":\"鸵鸟科\",\"createTime\":1710330928000,\"id\":6,\"updateTime\":1710330928000},{\"articleCount\":1,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391589000,\"id\":7,\"updateTime\":1710391589000}],\"msg\":\"success\"}', '/category/back/list', 8, '获取分类列表', '2024-03-14 16:13:08', '2024-03-14 16:13:08', 0);
INSERT INTO `sys_log` VALUES (2999, '分类管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CategoryController.listArticleCategory()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":1,\"categoryName\":\"鸵鸟科\",\"createTime\":1710330928000,\"id\":6,\"updateTime\":1710330928000},{\"articleCount\":1,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391589000,\"id\":7,\"updateTime\":1710391589000}],\"msg\":\"success\"}', '/category/back/list', 5, '获取分类列表', '2024-03-14 16:17:18', '2024-03-14 16:17:18', 0);
INSERT INTO `sys_log` VALUES (3000, '分类管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CategoryController.listArticleCategory()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":1,\"categoryName\":\"鸵鸟科\",\"createTime\":1710330928000,\"id\":6,\"updateTime\":1710330928000},{\"articleCount\":1,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391589000,\"id\":7,\"updateTime\":1710391589000}],\"msg\":\"success\"}', '/category/back/list', 3, '获取分类列表', '2024-03-14 16:30:12', '2024-03-14 16:30:12', 0);
INSERT INTO `sys_log` VALUES (3001, '分类管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CategoryController.listArticleCategory()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":1,\"categoryName\":\"鸵鸟科\",\"createTime\":1710330928000,\"id\":6,\"updateTime\":1710330928000},{\"articleCount\":1,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391589000,\"id\":7,\"updateTime\":1710391589000}],\"msg\":\"success\"}', '/category/back/list', 5, '获取分类列表', '2024-03-14 16:31:50', '2024-03-14 16:31:50', 0);
INSERT INTO `sys_log` VALUES (3002, '分类管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CategoryController.listArticleCategory()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":1,\"categoryName\":\"鸵鸟科\",\"createTime\":1710330928000,\"id\":6,\"updateTime\":1710330928000},{\"articleCount\":1,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391589000,\"id\":7,\"updateTime\":1710391589000}],\"msg\":\"success\"}', '/category/back/list', 4, '获取分类列表', '2024-03-14 16:37:45', '2024-03-14 16:37:45', 0);
INSERT INTO `sys_log` VALUES (3003, '分类管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CategoryController.listArticleCategory()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":1,\"categoryName\":\"鸵鸟科\",\"createTime\":1710330928000,\"id\":6,\"updateTime\":1710330928000},{\"articleCount\":1,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391589000,\"id\":7,\"updateTime\":1710391589000}],\"msg\":\"success\"}', '/category/back/list', 4, '获取分类列表', '2024-03-14 17:03:59', '2024-03-14 17:03:59', 0);
INSERT INTO `sys_log` VALUES (3004, '分类管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CategoryController.listArticleCategory()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":1,\"categoryName\":\"鸵鸟科\",\"createTime\":1710330928000,\"id\":6,\"updateTime\":1710330928000},{\"articleCount\":1,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391589000,\"id\":7,\"updateTime\":1710391589000}],\"msg\":\"success\"}', '/category/back/list', 5, '获取分类列表', '2024-03-14 17:12:35', '2024-03-14 17:12:35', 0);
INSERT INTO `sys_log` VALUES (3005, '分类管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CategoryController.listArticleCategory()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":1,\"categoryName\":\"鸵鸟科\",\"createTime\":1710330928000,\"id\":6,\"updateTime\":1710330928000},{\"articleCount\":1,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391589000,\"id\":7,\"updateTime\":1710391589000}],\"msg\":\"success\"}', '/category/back/list', 5, '获取分类列表', '2024-03-14 17:12:40', '2024-03-14 17:12:40', 0);
INSERT INTO `sys_log` VALUES (3006, '分类管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CategoryController.listArticleCategory()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":1,\"categoryName\":\"鸵鸟科\",\"createTime\":1710330928000,\"id\":6,\"updateTime\":1710330928000},{\"articleCount\":1,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391589000,\"id\":7,\"updateTime\":1710391589000}],\"msg\":\"success\"}', '/category/back/list', 5, '获取分类列表', '2024-03-14 17:15:03', '2024-03-14 17:15:03', 0);
INSERT INTO `sys_log` VALUES (3007, '评论管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CommentController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"commentContent\":\"支持\",\"commentUserName\":\"seaflows\",\"createTime\":1710392394000,\"id\":60,\"isCheck\":1,\"type\":1,\"typeId\":42,\"updateTime\":1710392394000},{\"commentContent\":\"这是一个子评论测试\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1710392432000,\"id\":61,\"isCheck\":1,\"parentId\":60,\"replyId\":60,\"type\":1,\"typeId\":42,\"updateTime\":1710392432000},{\"commentContent\":\"孙子评论测试\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1710392468000,\"id\":62,\"isCheck\":1,\"parentId\":60,\"replyId\":61,\"type\":1,\"typeId\":42,\"updateTime\":1710392468000}],\"msg\":\"success\"}', '/comment/back/list', 68, '后台评论列表', '2024-03-14 20:12:07', '2024-03-14 20:12:07', 0);
INSERT INTO `sys_log` VALUES (3008, '评论管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CommentController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"commentContent\":\"支持\",\"commentUserName\":\"seaflows\",\"createTime\":1710392394000,\"id\":60,\"isCheck\":1,\"type\":1,\"typeId\":42,\"updateTime\":1710392394000},{\"commentContent\":\"这是一个子评论测试\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1710392432000,\"id\":61,\"isCheck\":1,\"parentId\":60,\"replyId\":60,\"type\":1,\"typeId\":42,\"updateTime\":1710392432000},{\"commentContent\":\"孙子评论测试\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1710392468000,\"id\":62,\"isCheck\":1,\"parentId\":60,\"replyId\":61,\"type\":1,\"typeId\":42,\"updateTime\":1710392468000}],\"msg\":\"success\"}', '/comment/back/list', 9, '后台评论列表', '2024-03-14 20:12:09', '2024-03-14 20:12:09', 0);
INSERT INTO `sys_log` VALUES (3009, '收藏管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.FavoriteController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"msg\":\"success\"}', '/favorite/back/list', 6, '后台收藏列表', '2024-03-14 20:12:18', '2024-03-14 20:12:18', 0);
INSERT INTO `sys_log` VALUES (3010, '标签管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.listArticleTag()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":0,\"createTime\":1710331975000,\"id\":14,\"tagName\":\"鸵鸟目\",\"updateTime\":1710331977000},{\"articleCount\":1,\"createTime\":1710336543000,\"id\":15,\"tagName\":\"鸵鸟科\",\"updateTime\":1710391295000},{\"articleCount\":1,\"createTime\":1710336559000,\"id\":16,\"tagName\":\"鸵鸟属\",\"updateTime\":1710336559000},{\"articleCount\":1,\"createTime\":1710391642000,\"id\":17,\"tagName\":\"鹬鸵科\",\"updateTime\":1710391642000}],\"msg\":\"success\"}', '/tag/back/list', 17, '获取标签列表', '2024-03-14 20:12:22', '2024-03-14 20:12:22', 0);
INSERT INTO `sys_log` VALUES (3011, '聊天管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ChatGptController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"avatar\":\"http://cdn.kuailemao.lielfw.cn/articleCover/Sara11676693014447852.png\",\"conversation\":\"{\\\"content\\\":[{\\\"content\\\":\\\"你好\\\",\\\"type\\\":\\\"question\\\"},{\\\"content\\\":\\\"你好！有什么我可以帮助你的呢？\\\",\\\"type\\\":\\\"response\\\"}],\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\"}\",\"createTime\":1700132069000,\"id\":29,\"isCheck\":1,\"updateTime\":1705811476000,\"userName\":\"test\"},{\"avatar\":\"http://cdn.kuailemao.lielfw.cn/articleCover/Sara11676693014447852.png\",\"conversation\":\"{\\\"content\\\":[{\\\"content\\\":\\\"前端路由的保活是什么意思？\\\",\\\"type\\\":\\\"question\\\"},{\\\"content\\\":\\\"\\\\\\\"前端路由的保活\\\\\\\"主要是针对SPA（单页应用）中的一个重要概念。在单页应用中，当跳转到新的路由地址时，之前的组件会被卸载，新的页面组件会重新加载，这就好像在不刷新网页的情况下对页面进行了重新渲染。而这个过程可能会涉及到耗时较长的异步操作，例如请求数据等。\\\\n\\\\n\\\\\\\"保活\\\\\\\"（也常称为 \\\\\\\"keep alive\\\\\\\"）则是指保持这些组件的状态，而不是每次都进行重新加载。这样可以避免不必要的重新加载，提高应用性能，改善用户体验。 在Vue.js这样的前端框架中，它通过`<keep-alive>`组件提供了保活的功能。\\\\n\\\\n例如，用户在一个列表页浏览到第10页，点击某个项目进入详情页，然后再返回列表页，期望的行为应该是回到第10页，而不是重新加载列表页。如果没有使用保活，那么在返回列表页时会重新加载，展示的可能是第1页的内容。但如果使用了保活，那么用户的浏览状态（第10页）就可以被保持住。\\\\n\\\\n注意并不是所有的情况下都需要使用保活，比如一些数据必须保持最新状态的页面，就不适合使用这个功能。在不需要保持状态的页面使用保活，可能会导致数据过期或不一致。\\\",\\\"type\\\":\\\"response\\\"}],\\\"model\\\":\\\"gpt-4\\\"}\",\"createTime\":1700181466000,\"id\":30,\"isCheck\":1,\"updateTime\":1705811721000,\"userName\":\"test\"}],\"msg\":\"success\"}', '/chatGpt/back/list', 14, '后台聊天列表', '2024-03-14 20:12:34', '2024-03-14 20:12:34', 0);
INSERT INTO `sys_log` VALUES (3012, '标签管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.listArticleTag()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":0,\"createTime\":1710331975000,\"id\":14,\"tagName\":\"鸵鸟目\",\"updateTime\":1710331977000},{\"articleCount\":1,\"createTime\":1710336543000,\"id\":15,\"tagName\":\"鸵鸟科\",\"updateTime\":1710391295000},{\"articleCount\":1,\"createTime\":1710336559000,\"id\":16,\"tagName\":\"鸵鸟属\",\"updateTime\":1710336559000},{\"articleCount\":1,\"createTime\":1710391642000,\"id\":17,\"tagName\":\"鹬鸵科\",\"updateTime\":1710391642000}],\"msg\":\"success\"}', '/tag/back/list', 66, '获取标签列表', '2024-03-15 12:40:13', '2024-03-15 12:40:13', 0);
INSERT INTO `sys_log` VALUES (3013, '标签管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.listArticleTag()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":0,\"createTime\":1710331975000,\"id\":14,\"tagName\":\"鸵鸟目\",\"updateTime\":1710331977000},{\"articleCount\":1,\"createTime\":1710336543000,\"id\":15,\"tagName\":\"鸵鸟科\",\"updateTime\":1710391295000},{\"articleCount\":1,\"createTime\":1710336559000,\"id\":16,\"tagName\":\"鸵鸟属\",\"updateTime\":1710336559000},{\"articleCount\":1,\"createTime\":1710391642000,\"id\":17,\"tagName\":\"鹬鸵科\",\"updateTime\":1710391642000}],\"msg\":\"success\"}', '/tag/back/list', 9, '获取标签列表', '2024-03-15 12:40:16', '2024-03-15 12:40:16', 0);
INSERT INTO `sys_log` VALUES (3014, '标签管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.listArticleTag()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":0,\"createTime\":1710331975000,\"id\":14,\"tagName\":\"鸵鸟目\",\"updateTime\":1710331977000},{\"articleCount\":1,\"createTime\":1710336543000,\"id\":15,\"tagName\":\"鸵鸟科\",\"updateTime\":1710391295000},{\"articleCount\":1,\"createTime\":1710336559000,\"id\":16,\"tagName\":\"鸵鸟属\",\"updateTime\":1710336559000},{\"articleCount\":1,\"createTime\":1710391642000,\"id\":17,\"tagName\":\"鹬鸵科\",\"updateTime\":1710391642000}],\"msg\":\"success\"}', '/tag/back/list', 9, '获取标签列表', '2024-03-15 12:40:25', '2024-03-15 12:40:25', 0);
INSERT INTO `sys_log` VALUES (3015, '评论管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CommentController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"commentContent\":\"支持\",\"commentUserName\":\"seaflows\",\"createTime\":1710392394000,\"id\":60,\"isCheck\":1,\"type\":1,\"typeId\":42,\"updateTime\":1710392394000},{\"commentContent\":\"这是一个子评论测试\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1710392432000,\"id\":61,\"isCheck\":1,\"parentId\":60,\"replyId\":60,\"type\":1,\"typeId\":42,\"updateTime\":1710392432000},{\"commentContent\":\"孙子评论测试\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1710392468000,\"id\":62,\"isCheck\":1,\"parentId\":60,\"replyId\":61,\"type\":1,\"typeId\":42,\"updateTime\":1710392468000}],\"msg\":\"success\"}', '/comment/back/list', 27, '后台评论列表', '2024-03-15 13:32:59', '2024-03-15 13:32:59', 0);
INSERT INTO `sys_log` VALUES (3016, '评论管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CommentController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"commentContent\":\"支持\",\"commentUserName\":\"seaflows\",\"createTime\":1710392394000,\"id\":60,\"isCheck\":1,\"type\":1,\"typeId\":42,\"updateTime\":1710392394000},{\"commentContent\":\"这是一个子评论测试\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1710392432000,\"id\":61,\"isCheck\":1,\"parentId\":60,\"replyId\":60,\"type\":1,\"typeId\":42,\"updateTime\":1710392432000},{\"commentContent\":\"孙子评论测试\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1710392468000,\"id\":62,\"isCheck\":1,\"parentId\":60,\"replyId\":61,\"type\":1,\"typeId\":42,\"updateTime\":1710392468000}],\"msg\":\"success\"}', '/comment/back/list', 7, '后台评论列表', '2024-03-15 13:33:06', '2024-03-15 13:33:06', 0);
INSERT INTO `sys_log` VALUES (3017, '标签管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.listArticleTag()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":0,\"createTime\":1710331975000,\"id\":14,\"tagName\":\"鸵鸟目\",\"updateTime\":1710331977000},{\"articleCount\":1,\"createTime\":1710336543000,\"id\":15,\"tagName\":\"鸵鸟科\",\"updateTime\":1710391295000},{\"articleCount\":1,\"createTime\":1710336559000,\"id\":16,\"tagName\":\"鸵鸟属\",\"updateTime\":1710336559000},{\"articleCount\":1,\"createTime\":1710391642000,\"id\":17,\"tagName\":\"鹬鸵科\",\"updateTime\":1710391642000}],\"msg\":\"success\"}', '/tag/back/list', 12, '获取标签列表', '2024-03-15 13:33:10', '2024-03-15 13:33:10', 0);
INSERT INTO `sys_log` VALUES (3018, '分类管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CategoryController.listArticleCategory()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":1,\"categoryName\":\"鸵鸟科\",\"createTime\":1710330928000,\"id\":6,\"updateTime\":1710330928000},{\"articleCount\":1,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391589000,\"id\":7,\"updateTime\":1710391589000}],\"msg\":\"success\"}', '/category/back/list', 11, '获取分类列表', '2024-03-15 13:45:04', '2024-03-15 13:45:04', 0);
INSERT INTO `sys_log` VALUES (3019, '分类管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CategoryController.listArticleCategory()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":1,\"categoryName\":\"鸵鸟科\",\"createTime\":1710330928000,\"id\":6,\"updateTime\":1710330928000},{\"articleCount\":1,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391589000,\"id\":7,\"updateTime\":1710391589000}],\"msg\":\"success\"}', '/category/back/list', 5, '获取分类列表', '2024-03-15 14:00:20', '2024-03-15 14:00:20', 0);
INSERT INTO `sys_log` VALUES (3020, '分类管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.CategoryController.listArticleCategory()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":1,\"categoryName\":\"鸵鸟科\",\"createTime\":1710330928000,\"id\":6,\"updateTime\":1710330928000},{\"articleCount\":1,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391589000,\"id\":7,\"updateTime\":1710391589000}],\"msg\":\"success\"}', '/category/back/list', 6, '获取分类列表', '2024-03-15 14:00:26', '2024-03-15 14:00:26', 0);
INSERT INTO `sys_log` VALUES (3021, '标签管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.TagController.listArticleTag()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":0,\"createTime\":1710331975000,\"id\":14,\"tagName\":\"鸵鸟目\",\"updateTime\":1710331977000},{\"articleCount\":1,\"createTime\":1710336543000,\"id\":15,\"tagName\":\"鸵鸟科\",\"updateTime\":1710391295000},{\"articleCount\":1,\"createTime\":1710336559000,\"id\":16,\"tagName\":\"鸵鸟属\",\"updateTime\":1710336559000},{\"articleCount\":1,\"createTime\":1710391642000,\"id\":17,\"tagName\":\"鹬鸵科\",\"updateTime\":1710391642000}],\"msg\":\"success\"}', '/tag/back/list', 8, '获取标签列表', '2024-03-15 14:06:27', '2024-03-15 14:06:27', 0);
INSERT INTO `sys_log` VALUES (3022, '留言管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.LeaveWordController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"content\":\"## 测试比较长的留言\\\\n\\\\n> 下面是一篇 c# 笔记\\\\n\\\\n<center>\\\\n    <h1>C#笔记</h1>\\\\n</center>\\\\n\\\\n\\\\n\\\\n[TOC] \\\\n\\\\n### 1、C#访问修饰符\\\\n\\\\n​\\\\t\\\\t在C#当中的访问修饰符及作用范围如下：\\\\n\\\\n|     访问修饰符     |                        说明                        |\\\\n| :----------------: | :------------------------------------------------: |\\\\n|       public       |              共有访问。不受任何限制。              |\\\\n|      private       |      私有访问。只有本类能访问，实例不能访问。      |\\\\n|     protected      |   保护访问。只限于本类和子类访问，实例不能访问。   |\\\\n|      internal      |      内部访问。只限于本项目访问，其他不能访问      |\\\\n| protected internal | 内部保护访问。只限于本项目或子类访问，其他不能访问 |\\\\n\\\\n​\\\\t\\\\tC#成员类型的可修饰及默认修饰符如下：\\\\n\\\\n| 成员类型  | 默认修饰符 |                           可被修饰                           |\\\\n| :-------: | :--------: | :----------------------------------------------------------: |\\\\n|   enum    |   public   |                             none                             |\\\\n|   class   |  private   | public、protected、internal、private、<br />protected internal |\\\\n| interface |   public   |                             none                             |\\\\n|  struct   |  private   |                  public、internal、private                   |\\\\n\\\\n> public 访问级别最高\\\\n>\\\\n> private 访问级别最低\\\\n\\\\n### 2、this 关键字\\\\n\\\\n看以下代码，有什么问题：\\\\n\\\\n```C#\\\\nclass Strdent\\\\n{\\\\n    private string _name;\\\\t//姓名\\\\t\\\\n    public int _age = 19;\\\\t//年龄\\\\n    public string _cardID = \\\\\\\"145236985674526685\\\\\\\";\\\\t//身份证号码\\\\n    public void SetName(string _name)\\\\n    {\\\\n        _name = _name;\\\\n    }\\\\n}\\\\n```\\\\n\\\\n分析： 在 Student 类中定义了一个 private 成员变量 _name,在 SetName()方法的参数中也定义了一个与之同名的变量 _name。这时编译器会发现成员变量和方法的参数重名了。\\\\n此时，编译器无法分辨代码中出现的这两个 _name 那个是成员变量，哪个是方法中的参数。我们可以借助 this 关键字来解决这个问题。\\\\n\\\\n> this 关键字是指当前对象本身。通过 this 可以引用当前类的成员变量和方法。\\\\n\\\\n因此可以改变以上代码为：\\\\n\\\\n```C#\\\\nclass Strdent\\\\n{\\\\n    private string _name;\\\\t//姓名\\\\t\\\\n    public int _age = 19;\\\\t//年龄\\\\n    public string _cardID = \\\\\\\"145236985674526685\\\\\\\";\\\\t//身份证号码\\\\n    public void SetName(string _name)\\\\n    {\\\\n        this._name = _name;\\\\n    }\\\\n}\\\\n```\\\\n\\\\n> 使用 this 关键字可以解决成员变量和局部变量名称冲突的问题。\\\\n\\\\n### 3、C#属性\\\\n\\\\n#### 3.1、用方法保证数据安全\",\"createTime\":1705378527000,\"id\":13,\"isCheck\":1,\"updateTime\":1705378527000,\"userName\":\"test\"},{\"content\":\"# \\\\u6DFB\\\\u52A0\\\\u7559\\\\u8A00\\\\u677F\\\\\\\\n\\\\\\\\n* \\\\u6DFB\\\\u52A0\\\\u6D4B\\\\u8BD5\\\\\\\\n* dddd\",\"createTime\":1705381840000,\"id\":23,\"isCheck\":1,\"updateTime\":1705381840000,\"userName\":\"test\"},{\"content\":\"# 添加留言板\\n\\n* 添加测试aaa\",\"createTime\":1705382184000,\"id\":24,\"isCheck\":1,\"updateTime\":1705382184000,\"userName\":\"test\"},{\"content\":\"## 测试比较长的留言\\n\\n> 下面是一篇 c# 笔记\\n\\n<center>\\n    <h1>C#笔记</h1>\\n</center>\\n\\n\\n\\n[TOC] \\n\\n### 1、C#访问修饰符\\n\\n​\\t\\t在C#当中的访问修饰符及作用范围如下：\\n\\n|     访问修饰符     |                        说明                        |\\n| :----------------: | :------------------------------------------------: |\\n|       public       |              共有访问。不受任何限制。              |\\n|      private       |      私有访问。只有本类能访问，实例不能访问。      |\\n|     protected      |   保护访问。只限于本类和子类访问，实例不能访问。   |\\n|      internal      |      内部访问。只限于本项目访问，其他不能访问      |\\n| protected internal | 内部保护访问。只限于本项目或子类访问，其他不能访问 |\\n\\n​\\t\\tC#成员类型的可修饰及默认修饰符如下：\\n\\n| 成员类型  | 默认修饰符 |                           可被修饰                           |\\n| :-------: | :--------: | :----------------------------------------------------------: |\\n|   enum    |   public   |                             none                             |\\n|   class   |  private   | public、protected、internal、private、<br />protected internal |\\n| interface |   public   |                             none                             |\\n|  struct   |  private   |                  public、internal、private                   |\\n\\n> public 访问级别最高\\n>\\n> private 访问级别最低\\n\\n### 2、this 关键字\\n\\n看以下代码，有什么问题：\\n\\n```C#\\nclass Strdent\\n{\\n    private string _name;\\t//姓名\\t\\n    public int _age = 19;\\t//年龄\\n    public string _cardID = \\\"145236985674526685\\\";\\t//身份证号码\\n    public void SetName(string _name)\\n    {\\n        _name = _name;\\n    }\\n}\\n```\\n\\n分析： 在 Student 类中定义了一个 private 成员变量 _name,在 SetName()方法的参数中也定义了一个与之同名的变量 _name。这时编译器会发现成员变量和方法的参数重名了。\\n此时，编译器无法分辨代码中出现的这两个 _\",\"createTime\":1705382708000,\"id\":25,\"isCheck\":1,\"updateTime\":1705382708000,\"userName\":\"test\"},{\"content\":\"## 测试留言Markdown 编写\\n\\n> 不要报错\\n\\n> ~~没有bug~~\",\"createTime\":1705382870000,\"id\":26,\"isCheck\":1,\"updateTime\":1705382870000,\"userName\":\"test\"},{\"content\":\"### 留言bug 最后测试\",\"createTime\":1705382974000,\"id\":27,\"isCheck\":1,\"updateTime\":1705383023000,\"userName\":\"test\"}],\"msg\":\"success\"}', '/leaveWord/back/list', 24, '后台留言列表', '2024-03-15 14:06:29', '2024-03-15 14:06:29', 0);
INSERT INTO `sys_log` VALUES (3023, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'xyz.kuailemao.controller.ArticleController.listArticle()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/296fd6a7-c585-4f11-bf5f-43eaee733d91.jpg\",\"articleTitle\":\"test\",\"articleType\":1,\"categoryId\":7,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391695000,\"id\":42,\"isTop\":1,\"status\":1,\"tagsName\":[\"鹬鸵科\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg\",\"articleTitle\":\"非洲鸵鸟\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1710385962000,\"id\":41,\"isTop\":0,\"status\":1,\"tagsName\":[\"鸵鸟科\",\"鸵鸟属\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0}],\"msg\":\"success\"}', '/article/back/list', 18, '获取所有的文章列表', '2024-03-15 14:06:33', '2024-03-15 14:06:33', 0);
INSERT INTO `sys_log` VALUES (3024, '新增分类', '新增', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.CategoryController.addCategory()', '[{\"categoryName\":\"鸟类\",\"id\":8}]', 'PUT', NULL, '{\"code\":200,\"msg\":\"success\"}', '/category', 4, '新增分类-文章列表', '2024-03-28 21:18:32', '2024-03-28 21:18:32', 0);
INSERT INTO `sys_log` VALUES (3025, '标签管理', '新增', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.TagController.addTag()', '[{\"id\":18,\"tagName\":\"bird\"}]', 'PUT', NULL, '{\"code\":200,\"msg\":\"success\"}', '/tag', 81, '新增标签-文章列表', '2024-03-28 21:18:46', '2024-03-28 21:18:46', 0);
INSERT INTO `sys_log` VALUES (3026, '文章管理', '上传图片', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.uploadArticleImage()', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@5a3797ee]', 'POST', NULL, '{\"code\":200,\"data\":\"http://127.0.0.1:9005/test/article/articleImage/834ae260-85f7-4ec2-b064-206c89b3e706.jpg\",\"msg\":\"success\"}', '/article/upload/articleImage', 154, '上传文章图片', '2024-03-28 21:24:53', '2024-03-28 21:24:53', 0);
INSERT INTO `sys_log` VALUES (3027, '文章管理', '上传图片', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.uploadArticleCover()', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@32bdbc5f]', 'POST', NULL, '{\"code\":200,\"data\":\"http://127.0.0.1:9005/test/article/articleCover/96bedb1b-a93a-4a4d-bffe-a01074917051.jpg\",\"msg\":\"success\"}', '/article/upload/articleCover', 10, '上传文章封面', '2024-03-28 21:26:19', '2024-03-28 21:26:19', 0);
INSERT INTO `sys_log` VALUES (3028, '文章管理', '新增', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.publish()', '[{\"articleContent\":\"## 这是一篇关于角叫鸭的介绍\\n![](http://127.0.0.1:9005/test/article/articleImage/834ae260-85f7-4ec2-b064-206c89b3e706.jpg)\\n*在南美大陆上，有一种非常神秘的动物正等着我们探访。它身为雁鸭，身材体貌却迥异同类；鸟喙如鸡、头生硬角，还天生一副大嗓门——它就是鸟类独一档，人送外号“击剑贵族”与“喧嚣狂徒”的角叫鸭。*\\n\\n在热气蒸腾、雨林密布的南美洲大地上，有一种非常神秘的动物正在等待着我们的探访。\\n\\n它身为雁鸭类，身材体貌却迥异同类；鸟喙如鸡、头生硬角，宛若深海垂钓的大嘴鮟鱇，容貌怪异至极。\\n\\n它健走爱游水，却全身覆羽，轻盈善飞，骨骼含气度堪称鸟类之最！它拥有极高的语言天赋，不仅自创了一套“鸟语”，还天生一副大嗓门，其音发出后，相隔三公里亦清晰可闻。\\n\\n它就是南美鸟类独一档，人送外号“击剑贵族”与“喧嚣狂徒”的角叫鸭。\\n\\n\\n\\n一石四鸟，生活无忧\\n角叫鸭为南美洲特有物种，为雁形目叫鸭科下独一属独一种之同名物种，其学名为Anhima cornuta，由“生物分类学之父”卡尔·林奈爵士亲自操刀命名。\\n\\n角叫鸭虽属留鸟，但活动范围甚广，广泛分布于南美大陆的中北部区域，栖地涵盖玻利维亚、巴西、哥伦比亚、秘鲁、巴拉圭和委内瑞拉等国，甚至在加勒比海诸国甚或美国、墨西哥都能看见其身影。\\n\\n它们惯常栖息于热带雨林、沼泽、河谷与平原草地地带，一般栖息高度不会超过海拔800米，为典型的“再往上住就高反给你看”一族。\",\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/96bedb1b-a93a-4a4d-bffe-a01074917051.jpg\",\"articleTitle\":\"角叫鸭\",\"articleType\":1,\"categoryId\":8,\"isTop\":0,\"status\":1,\"tagId\":[18]}]', 'POST', NULL, '{\"code\":200,\"msg\":\"success\"}', '/article/publish', 17, '发布文章', '2024-03-28 21:26:19', '2024-03-28 21:26:19', 0);
INSERT INTO `sys_log` VALUES (3029, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.listArticle()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/96bedb1b-a93a-4a4d-bffe-a01074917051.jpg\",\"articleTitle\":\"角叫鸭\",\"articleType\":1,\"categoryId\":8,\"categoryName\":\"鸟类\",\"createTime\":1711632379000,\"id\":43,\"isTop\":0,\"status\":1,\"tagsName\":[\"bird\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/296fd6a7-c585-4f11-bf5f-43eaee733d91.jpg\",\"articleTitle\":\"test\",\"articleType\":1,\"categoryId\":7,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391695000,\"id\":42,\"isTop\":1,\"status\":1,\"tagsName\":[\"鹬鸵科\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":1},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg\",\"articleTitle\":\"非洲鸵鸟\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1710385962000,\"id\":41,\"isTop\":0,\"status\":1,\"tagsName\":[\"鸵鸟科\",\"鸵鸟属\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":2}],\"msg\":\"success\"}', '/article/back/list', 22, '获取所有的文章列表', '2024-03-28 21:28:00', '2024-03-28 21:28:00', 0);
INSERT INTO `sys_log` VALUES (3030, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.getArticleEcho()', '[43]', 'GET', NULL, '{\"code\":200,\"data\":{\"articleContent\":\"## 这是一篇关于角叫鸭的介绍\\n![](http://127.0.0.1:9005/test/article/articleImage/834ae260-85f7-4ec2-b064-206c89b3e706.jpg)\\n*在南美大陆上，有一种非常神秘的动物正等着我们探访。它身为雁鸭，身材体貌却迥异同类；鸟喙如鸡、头生硬角，还天生一副大嗓门——它就是鸟类独一档，人送外号“击剑贵族”与“喧嚣狂徒”的角叫鸭。*\\n\\n在热气蒸腾、雨林密布的南美洲大地上，有一种非常神秘的动物正在等待着我们的探访。\\n\\n它身为雁鸭类，身材体貌却迥异同类；鸟喙如鸡、头生硬角，宛若深海垂钓的大嘴鮟鱇，容貌怪异至极。\\n\\n它健走爱游水，却全身覆羽，轻盈善飞，骨骼含气度堪称鸟类之最！它拥有极高的语言天赋，不仅自创了一套“鸟语”，还天生一副大嗓门，其音发出后，相隔三公里亦清晰可闻。\\n\\n它就是南美鸟类独一档，人送外号“击剑贵族”与“喧嚣狂徒”的角叫鸭。\\n\\n\\n\\n一石四鸟，生活无忧\\n角叫鸭为南美洲特有物种，为雁形目叫鸭科下独一属独一种之同名物种，其学名为Anhima cornuta，由“生物分类学之父”卡尔·林奈爵士亲自操刀命名。\\n\\n角叫鸭虽属留鸟，但活动范围甚广，广泛分布于南美大陆的中北部区域，栖地涵盖玻利维亚、巴西、哥伦比亚、秘鲁、巴拉圭和委内瑞拉等国，甚至在加勒比海诸国甚或美国、墨西哥都能看见其身影。\\n\\n它们惯常栖息于热带雨林、沼泽、河谷与平原草地地带，一般栖息高度不会超过海拔800米，为典型的“再往上住就高反给你看”一族。\",\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/96bedb1b-a93a-4a4d-bffe-a01074917051.jpg\",\"articleTitle\":\"角叫鸭\",\"articleType\":1,\"categoryId\":8,\"id\":43,\"isTop\":0,\"status\":1,\"tagId\":[18]},\"msg\":\"success\"}', '/article/back/echo/43', 5, '回显文章数据', '2024-03-28 21:28:11', '2024-03-28 21:28:11', 0);
INSERT INTO `sys_log` VALUES (3031, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.getArticleEcho()', '[43]', 'GET', NULL, '{\"code\":200,\"data\":{\"articleContent\":\"## 这是一篇关于角叫鸭的介绍\\n![](http://127.0.0.1:9005/test/article/articleImage/834ae260-85f7-4ec2-b064-206c89b3e706.jpg)\\n*在南美大陆上，有一种非常神秘的动物正等着我们探访。它身为雁鸭，身材体貌却迥异同类；鸟喙如鸡、头生硬角，还天生一副大嗓门——它就是鸟类独一档，人送外号“击剑贵族”与“喧嚣狂徒”的角叫鸭。*\\n\\n在热气蒸腾、雨林密布的南美洲大地上，有一种非常神秘的动物正在等待着我们的探访。\\n\\n它身为雁鸭类，身材体貌却迥异同类；鸟喙如鸡、头生硬角，宛若深海垂钓的大嘴鮟鱇，容貌怪异至极。\\n\\n它健走爱游水，却全身覆羽，轻盈善飞，骨骼含气度堪称鸟类之最！它拥有极高的语言天赋，不仅自创了一套“鸟语”，还天生一副大嗓门，其音发出后，相隔三公里亦清晰可闻。\\n\\n它就是南美鸟类独一档，人送外号“击剑贵族”与“喧嚣狂徒”的角叫鸭。\\n\\n\\n\\n一石四鸟，生活无忧\\n角叫鸭为南美洲特有物种，为雁形目叫鸭科下独一属独一种之同名物种，其学名为Anhima cornuta，由“生物分类学之父”卡尔·林奈爵士亲自操刀命名。\\n\\n角叫鸭虽属留鸟，但活动范围甚广，广泛分布于南美大陆的中北部区域，栖地涵盖玻利维亚、巴西、哥伦比亚、秘鲁、巴拉圭和委内瑞拉等国，甚至在加勒比海诸国甚或美国、墨西哥都能看见其身影。\\n\\n它们惯常栖息于热带雨林、沼泽、河谷与平原草地地带，一般栖息高度不会超过海拔800米，为典型的“再往上住就高反给你看”一族。\",\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/96bedb1b-a93a-4a4d-bffe-a01074917051.jpg\",\"articleTitle\":\"角叫鸭\",\"articleType\":1,\"categoryId\":8,\"id\":43,\"isTop\":0,\"status\":1,\"tagId\":[18]},\"msg\":\"success\"}', '/article/back/echo/43', 4, '回显文章数据', '2024-03-28 21:30:19', '2024-03-28 21:30:19', 0);
INSERT INTO `sys_log` VALUES (3032, '文章管理', '新增', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.publish()', '[{\"articleContent\":\"## 这是一篇关于角叫鸭的介绍\\n![](http://127.0.0.1:9005/test/article/articleImage/834ae260-85f7-4ec2-b064-206c89b3e706.jpg)\\n*在南美大陆上，有一种非常神秘的动物正等着我们探访。它身为雁鸭，身材体貌却迥异同类；鸟喙如鸡、头生硬角，还天生一副大嗓门——它就是鸟类独一档，人送外号“击剑贵族”与“喧嚣狂徒”的角叫鸭。*\\n\\n在热气蒸腾、雨林密布的南美洲大地上，有一种非常神秘的动物正在等待着我们的探访。\\n\\n它身为雁鸭类，身材体貌却迥异同类；鸟喙如鸡、头生硬角，宛若深海垂钓的大嘴鮟鱇，容貌怪异至极。\\n\\n它健走爱游水，却全身覆羽，轻盈善飞，骨骼含气度堪称鸟类之最！它拥有极高的语言天赋，不仅自创了一套“鸟语”，还天生一副大嗓门，其音发出后，相隔三公里亦清晰可闻。\\n\\n它就是南美鸟类独一档，人送外号“击剑贵族”与“喧嚣狂徒”的角叫鸭。\\n\\n<div align=\\\"center\\\">\\n  <iframe src=\\\"//player.bilibili.com/player.html?aid=644729401&bvid=BV1FY4y1F7Kz&cid=810072630&p=0&autoplay=0\\\" scrolling=\\\"no\\\" border=\\\"0\\\" frameborder=\\\"no\\\" framespacing=\\\"0\\\" allowfullscreen=\\\"false\\\"  height=\\\"498\\\" width=\\\"510\\\"> </iframe>\\n</div>\\n\\n\\n一石四鸟，生活无忧\\n角叫鸭为南美洲特有物种，为雁形目叫鸭科下独一属独一种之同名物种，其学名为Anhima cornuta，由“生物分类学之父”卡尔·林奈爵士亲自操刀命名。\\n\\n角叫鸭虽属留鸟，但活动范围甚广，广泛分布于南美大陆的中北部区域，栖地涵盖玻利维亚、巴西、哥伦比亚、秘鲁、巴拉圭和委内瑞拉等国，甚至在加勒比海诸国甚或美国、墨西哥都能看见其身影。\\n\\n它们惯常栖息于热带雨林、沼泽、河谷与平原草地地带，一般栖息高度不会超过海拔800米，为典型的“再往上住就高反给你看”一族。\",\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/96bedb1b-a93a-4a4d-bffe-a01074917051.jpg\",\"articleTitle\":\"角叫鸭\",\"articleType\":1,\"categoryId\":8,\"id\":43,\"isTop\":0,\"status\":1,\"tagId\":[18]}]', 'POST', NULL, '{\"code\":200,\"msg\":\"success\"}', '/article/publish', 9, '发布文章', '2024-03-28 21:41:25', '2024-03-28 21:41:25', 0);
INSERT INTO `sys_log` VALUES (3033, '评论管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.CommentController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"commentContent\":\"支持\",\"commentUserName\":\"seaflows\",\"createTime\":1710392394000,\"id\":60,\"isCheck\":1,\"type\":1,\"typeId\":42,\"updateTime\":1710392394000},{\"commentContent\":\"这是一个子评论测试\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1710392432000,\"id\":61,\"isCheck\":1,\"parentId\":60,\"replyId\":60,\"type\":1,\"typeId\":42,\"updateTime\":1710392432000},{\"commentContent\":\"孙子评论测试\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1710392468000,\"id\":62,\"isCheck\":1,\"parentId\":60,\"replyId\":61,\"type\":1,\"typeId\":42,\"updateTime\":1710392468000},{\"commentContent\":\"堂吉诃德鸭鸭\",\"commentUserName\":\"seaflows\",\"createTime\":1711633770000,\"id\":63,\"isCheck\":1,\"type\":1,\"typeId\":43,\"updateTime\":1711633770000},{\"commentContent\":\"超可爱的鸭鸭\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1711633790000,\"id\":64,\"isCheck\":1,\"parentId\":63,\"replyId\":63,\"type\":1,\"typeId\":43,\"updateTime\":1711633790000}],\"msg\":\"success\"}', '/comment/back/list', 9, '后台评论列表', '2024-03-28 21:50:00', '2024-03-28 21:50:00', 0);
INSERT INTO `sys_log` VALUES (3034, '树洞管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.TreeHoleController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"content\":\"测试添加\",\"createTime\":1698636750000,\"id\":1,\"isCheck\":1,\"updateTime\":1698636750000,\"userName\":\"test\"},{\"content\":\"真的是服了！！\",\"createTime\":1698655275000,\"id\":29,\"isCheck\":1,\"updateTime\":1698655275000,\"userName\":\"test\"},{\"content\":\"记得一定要快乐啊！！\",\"createTime\":1698655317000,\"id\":30,\"isCheck\":1,\"updateTime\":1705671081000,\"userName\":\"test\"},{\"content\":\"天天开心\",\"createTime\":1705671204000,\"id\":34,\"isCheck\":1,\"updateTime\":1705671204000,\"userName\":\"test\"}],\"msg\":\"success\"}', '/treeHole/back/list', 16, '后台树洞列表', '2024-03-28 21:50:16', '2024-03-28 21:50:16', 0);
INSERT INTO `sys_log` VALUES (3035, '评论管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.CommentController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"commentContent\":\"支持\",\"commentUserName\":\"seaflows\",\"createTime\":1710392394000,\"id\":60,\"isCheck\":1,\"type\":1,\"typeId\":42,\"updateTime\":1710392394000},{\"commentContent\":\"这是一个子评论测试\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1710392432000,\"id\":61,\"isCheck\":1,\"parentId\":60,\"replyId\":60,\"type\":1,\"typeId\":42,\"updateTime\":1710392432000},{\"commentContent\":\"孙子评论测试\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1710392468000,\"id\":62,\"isCheck\":1,\"parentId\":60,\"replyId\":61,\"type\":1,\"typeId\":42,\"updateTime\":1710392468000},{\"commentContent\":\"堂吉诃德鸭鸭\",\"commentUserName\":\"seaflows\",\"createTime\":1711633770000,\"id\":63,\"isCheck\":1,\"type\":1,\"typeId\":43,\"updateTime\":1711633770000},{\"commentContent\":\"超可爱的鸭鸭\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1711633790000,\"id\":64,\"isCheck\":1,\"parentId\":63,\"replyId\":63,\"type\":1,\"typeId\":43,\"updateTime\":1711633790000}],\"msg\":\"success\"}', '/comment/back/list', 9, '后台评论列表', '2024-03-28 21:57:31', '2024-03-28 21:57:31', 0);
INSERT INTO `sys_log` VALUES (3036, '聊天管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ChatGptController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"avatar\":\"http://cdn.kuailemao.lielfw.cn/articleCover/Sara11676693014447852.png\",\"conversation\":\"{\\\"content\\\":[{\\\"content\\\":\\\"你好\\\",\\\"type\\\":\\\"question\\\"},{\\\"content\\\":\\\"你好！有什么我可以帮助你的呢？\\\",\\\"type\\\":\\\"response\\\"}],\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\"}\",\"createTime\":1700132069000,\"id\":29,\"isCheck\":1,\"updateTime\":1705811476000,\"userName\":\"test\"},{\"avatar\":\"http://cdn.kuailemao.lielfw.cn/articleCover/Sara11676693014447852.png\",\"conversation\":\"{\\\"content\\\":[{\\\"content\\\":\\\"前端路由的保活是什么意思？\\\",\\\"type\\\":\\\"question\\\"},{\\\"content\\\":\\\"\\\\\\\"前端路由的保活\\\\\\\"主要是针对SPA（单页应用）中的一个重要概念。在单页应用中，当跳转到新的路由地址时，之前的组件会被卸载，新的页面组件会重新加载，这就好像在不刷新网页的情况下对页面进行了重新渲染。而这个过程可能会涉及到耗时较长的异步操作，例如请求数据等。\\\\n\\\\n\\\\\\\"保活\\\\\\\"（也常称为 \\\\\\\"keep alive\\\\\\\"）则是指保持这些组件的状态，而不是每次都进行重新加载。这样可以避免不必要的重新加载，提高应用性能，改善用户体验。 在Vue.js这样的前端框架中，它通过`<keep-alive>`组件提供了保活的功能。\\\\n\\\\n例如，用户在一个列表页浏览到第10页，点击某个项目进入详情页，然后再返回列表页，期望的行为应该是回到第10页，而不是重新加载列表页。如果没有使用保活，那么在返回列表页时会重新加载，展示的可能是第1页的内容。但如果使用了保活，那么用户的浏览状态（第10页）就可以被保持住。\\\\n\\\\n注意并不是所有的情况下都需要使用保活，比如一些数据必须保持最新状态的页面，就不适合使用这个功能。在不需要保持状态的页面使用保活，可能会导致数据过期或不一致。\\\",\\\"type\\\":\\\"response\\\"}],\\\"model\\\":\\\"gpt-4\\\"}\",\"createTime\":1700181466000,\"id\":30,\"isCheck\":1,\"updateTime\":1705811721000,\"userName\":\"test\"}],\"msg\":\"success\"}', '/chatGpt/back/list', 12, '后台聊天列表', '2024-03-28 21:57:36', '2024-03-28 21:57:36', 0);
INSERT INTO `sys_log` VALUES (3037, '友链管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.LinkController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699927987000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":1,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"test\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710329708000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":36,\"isCheck\":1,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"https://avibase.bsc-eoc.org/\",\"userName\":\"seaflows\"}],\"msg\":\"success\"}', '/link/back/list', 6, '后台友链列表', '2024-03-28 21:57:43', '2024-03-28 21:57:43', 0);
INSERT INTO `sys_log` VALUES (3038, '评论管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.CommentController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"commentContent\":\"支持\",\"commentUserName\":\"seaflows\",\"createTime\":1710392394000,\"id\":60,\"isCheck\":1,\"type\":1,\"typeId\":42,\"updateTime\":1710392394000},{\"commentContent\":\"这是一个子评论测试\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1710392432000,\"id\":61,\"isCheck\":1,\"parentId\":60,\"replyId\":60,\"type\":1,\"typeId\":42,\"updateTime\":1710392432000},{\"commentContent\":\"孙子评论测试\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1710392468000,\"id\":62,\"isCheck\":1,\"parentId\":60,\"replyId\":61,\"type\":1,\"typeId\":42,\"updateTime\":1710392468000},{\"commentContent\":\"堂吉诃德鸭鸭\",\"commentUserName\":\"seaflows\",\"createTime\":1711633770000,\"id\":63,\"isCheck\":1,\"type\":1,\"typeId\":43,\"updateTime\":1711633770000},{\"commentContent\":\"超可爱的鸭鸭\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1711633790000,\"id\":64,\"isCheck\":1,\"parentId\":63,\"replyId\":63,\"type\":1,\"typeId\":43,\"updateTime\":1711633790000}],\"msg\":\"success\"}', '/comment/back/list', 51, '后台评论列表', '2024-03-28 22:09:24', '2024-03-28 22:09:24', 0);
INSERT INTO `sys_log` VALUES (3039, '收藏管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.FavoriteController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"msg\":\"success\"}', '/favorite/back/list', 6, '后台收藏列表', '2024-03-28 22:09:27', '2024-03-28 22:09:27', 0);
INSERT INTO `sys_log` VALUES (3040, '分类管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.CategoryController.listArticleCategory()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":1,\"categoryName\":\"鸵鸟科\",\"createTime\":1710330928000,\"id\":6,\"updateTime\":1710330928000},{\"articleCount\":1,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391589000,\"id\":7,\"updateTime\":1710391589000},{\"articleCount\":1,\"categoryName\":\"鸟类\",\"createTime\":1711631912000,\"id\":8,\"updateTime\":1711631912000}],\"msg\":\"success\"}', '/category/back/list', 11, '获取分类列表', '2024-03-28 22:09:29', '2024-03-28 22:09:29', 0);
INSERT INTO `sys_log` VALUES (3041, '分类管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.CategoryController.listArticleCategory()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":1,\"categoryName\":\"鸵鸟科\",\"createTime\":1710330928000,\"id\":6,\"updateTime\":1710330928000},{\"articleCount\":1,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391589000,\"id\":7,\"updateTime\":1710391589000},{\"articleCount\":1,\"categoryName\":\"鸟类\",\"createTime\":1711631912000,\"id\":8,\"updateTime\":1711631912000}],\"msg\":\"success\"}', '/category/back/list', 48, '获取分类列表', '2024-03-28 22:15:49', '2024-03-28 22:15:49', 0);
INSERT INTO `sys_log` VALUES (3042, '友链管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.LinkController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699927987000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":1,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"test\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710329708000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":36,\"isCheck\":1,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"https://avibase.bsc-eoc.org/\",\"userName\":\"seaflows\"}],\"msg\":\"success\"}', '/link/back/list', 9, '后台友链列表', '2024-03-28 22:21:07', '2024-03-28 22:21:07', 0);
INSERT INTO `sys_log` VALUES (3043, '聊天管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ChatGptController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"avatar\":\"http://cdn.kuailemao.lielfw.cn/articleCover/Sara11676693014447852.png\",\"conversation\":\"{\\\"content\\\":[{\\\"content\\\":\\\"你好\\\",\\\"type\\\":\\\"question\\\"},{\\\"content\\\":\\\"你好！有什么我可以帮助你的呢？\\\",\\\"type\\\":\\\"response\\\"}],\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\"}\",\"createTime\":1700132069000,\"id\":29,\"isCheck\":1,\"updateTime\":1705811476000,\"userName\":\"test\"},{\"avatar\":\"http://cdn.kuailemao.lielfw.cn/articleCover/Sara11676693014447852.png\",\"conversation\":\"{\\\"content\\\":[{\\\"content\\\":\\\"前端路由的保活是什么意思？\\\",\\\"type\\\":\\\"question\\\"},{\\\"content\\\":\\\"\\\\\\\"前端路由的保活\\\\\\\"主要是针对SPA（单页应用）中的一个重要概念。在单页应用中，当跳转到新的路由地址时，之前的组件会被卸载，新的页面组件会重新加载，这就好像在不刷新网页的情况下对页面进行了重新渲染。而这个过程可能会涉及到耗时较长的异步操作，例如请求数据等。\\\\n\\\\n\\\\\\\"保活\\\\\\\"（也常称为 \\\\\\\"keep alive\\\\\\\"）则是指保持这些组件的状态，而不是每次都进行重新加载。这样可以避免不必要的重新加载，提高应用性能，改善用户体验。 在Vue.js这样的前端框架中，它通过`<keep-alive>`组件提供了保活的功能。\\\\n\\\\n例如，用户在一个列表页浏览到第10页，点击某个项目进入详情页，然后再返回列表页，期望的行为应该是回到第10页，而不是重新加载列表页。如果没有使用保活，那么在返回列表页时会重新加载，展示的可能是第1页的内容。但如果使用了保活，那么用户的浏览状态（第10页）就可以被保持住。\\\\n\\\\n注意并不是所有的情况下都需要使用保活，比如一些数据必须保持最新状态的页面，就不适合使用这个功能。在不需要保持状态的页面使用保活，可能会导致数据过期或不一致。\\\",\\\"type\\\":\\\"response\\\"}],\\\"model\\\":\\\"gpt-4\\\"}\",\"createTime\":1700181466000,\"id\":30,\"isCheck\":1,\"updateTime\":1705811721000,\"userName\":\"test\"}],\"msg\":\"success\"}', '/chatGpt/back/list', 21, '后台聊天列表', '2024-03-28 22:21:09', '2024-03-28 22:21:09', 0);
INSERT INTO `sys_log` VALUES (3044, '评论管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.CommentController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"commentContent\":\"支持\",\"commentUserName\":\"seaflows\",\"createTime\":1710392394000,\"id\":60,\"isCheck\":1,\"type\":1,\"typeId\":42,\"updateTime\":1710392394000},{\"commentContent\":\"这是一个子评论测试\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1710392432000,\"id\":61,\"isCheck\":1,\"parentId\":60,\"replyId\":60,\"type\":1,\"typeId\":42,\"updateTime\":1710392432000},{\"commentContent\":\"孙子评论测试\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1710392468000,\"id\":62,\"isCheck\":1,\"parentId\":60,\"replyId\":61,\"type\":1,\"typeId\":42,\"updateTime\":1710392468000},{\"commentContent\":\"堂吉诃德鸭鸭\",\"commentUserName\":\"seaflows\",\"createTime\":1711633770000,\"id\":63,\"isCheck\":1,\"type\":1,\"typeId\":43,\"updateTime\":1711633770000},{\"commentContent\":\"超可爱的鸭鸭\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1711633790000,\"id\":64,\"isCheck\":1,\"parentId\":63,\"replyId\":63,\"type\":1,\"typeId\":43,\"updateTime\":1711633790000}],\"msg\":\"success\"}', '/comment/back/list', 18, '后台评论列表', '2024-03-28 22:21:16', '2024-03-28 22:21:16', 0);
INSERT INTO `sys_log` VALUES (3045, '评论管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.CommentController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"commentContent\":\"支持\",\"commentUserName\":\"seaflows\",\"createTime\":1710392394000,\"id\":60,\"isCheck\":1,\"type\":1,\"typeId\":42,\"updateTime\":1710392394000},{\"commentContent\":\"这是一个子评论测试\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1710392432000,\"id\":61,\"isCheck\":1,\"parentId\":60,\"replyId\":60,\"type\":1,\"typeId\":42,\"updateTime\":1710392432000},{\"commentContent\":\"孙子评论测试\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1710392468000,\"id\":62,\"isCheck\":1,\"parentId\":60,\"replyId\":61,\"type\":1,\"typeId\":42,\"updateTime\":1710392468000},{\"commentContent\":\"堂吉诃德鸭鸭\",\"commentUserName\":\"seaflows\",\"createTime\":1711633770000,\"id\":63,\"isCheck\":1,\"type\":1,\"typeId\":43,\"updateTime\":1711633770000},{\"commentContent\":\"超可爱的鸭鸭\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1711633790000,\"id\":64,\"isCheck\":1,\"parentId\":63,\"replyId\":63,\"type\":1,\"typeId\":43,\"updateTime\":1711633790000}],\"msg\":\"success\"}', '/comment/back/list', 10, '后台评论列表', '2024-03-28 22:23:27', '2024-03-28 22:23:27', 0);
INSERT INTO `sys_log` VALUES (3046, '评论管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.CommentController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"commentContent\":\"支持\",\"commentUserName\":\"seaflows\",\"createTime\":1710392394000,\"id\":60,\"isCheck\":1,\"type\":1,\"typeId\":42,\"updateTime\":1710392394000},{\"commentContent\":\"这是一个子评论测试\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1710392432000,\"id\":61,\"isCheck\":1,\"parentId\":60,\"replyId\":60,\"type\":1,\"typeId\":42,\"updateTime\":1710392432000},{\"commentContent\":\"孙子评论测试\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1710392468000,\"id\":62,\"isCheck\":1,\"parentId\":60,\"replyId\":61,\"type\":1,\"typeId\":42,\"updateTime\":1710392468000},{\"commentContent\":\"堂吉诃德鸭鸭\",\"commentUserName\":\"seaflows\",\"createTime\":1711633770000,\"id\":63,\"isCheck\":1,\"type\":1,\"typeId\":43,\"updateTime\":1711633770000},{\"commentContent\":\"超可爱的鸭鸭\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1711633790000,\"id\":64,\"isCheck\":1,\"parentId\":63,\"replyId\":63,\"type\":1,\"typeId\":43,\"updateTime\":1711633790000}],\"msg\":\"success\"}', '/comment/back/list', 9, '后台评论列表', '2024-03-28 22:27:48', '2024-03-28 22:27:48', 0);
INSERT INTO `sys_log` VALUES (3047, '聊天管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ChatGptController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"avatar\":\"http://cdn.kuailemao.lielfw.cn/articleCover/Sara11676693014447852.png\",\"conversation\":\"{\\\"content\\\":[{\\\"content\\\":\\\"你好\\\",\\\"type\\\":\\\"question\\\"},{\\\"content\\\":\\\"你好！有什么我可以帮助你的呢？\\\",\\\"type\\\":\\\"response\\\"}],\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\"}\",\"createTime\":1700132069000,\"id\":29,\"isCheck\":1,\"updateTime\":1705811476000,\"userName\":\"test\"},{\"avatar\":\"http://cdn.kuailemao.lielfw.cn/articleCover/Sara11676693014447852.png\",\"conversation\":\"{\\\"content\\\":[{\\\"content\\\":\\\"前端路由的保活是什么意思？\\\",\\\"type\\\":\\\"question\\\"},{\\\"content\\\":\\\"\\\\\\\"前端路由的保活\\\\\\\"主要是针对SPA（单页应用）中的一个重要概念。在单页应用中，当跳转到新的路由地址时，之前的组件会被卸载，新的页面组件会重新加载，这就好像在不刷新网页的情况下对页面进行了重新渲染。而这个过程可能会涉及到耗时较长的异步操作，例如请求数据等。\\\\n\\\\n\\\\\\\"保活\\\\\\\"（也常称为 \\\\\\\"keep alive\\\\\\\"）则是指保持这些组件的状态，而不是每次都进行重新加载。这样可以避免不必要的重新加载，提高应用性能，改善用户体验。 在Vue.js这样的前端框架中，它通过`<keep-alive>`组件提供了保活的功能。\\\\n\\\\n例如，用户在一个列表页浏览到第10页，点击某个项目进入详情页，然后再返回列表页，期望的行为应该是回到第10页，而不是重新加载列表页。如果没有使用保活，那么在返回列表页时会重新加载，展示的可能是第1页的内容。但如果使用了保活，那么用户的浏览状态（第10页）就可以被保持住。\\\\n\\\\n注意并不是所有的情况下都需要使用保活，比如一些数据必须保持最新状态的页面，就不适合使用这个功能。在不需要保持状态的页面使用保活，可能会导致数据过期或不一致。\\\",\\\"type\\\":\\\"response\\\"}],\\\"model\\\":\\\"gpt-4\\\"}\",\"createTime\":1700181466000,\"id\":30,\"isCheck\":1,\"updateTime\":1705811721000,\"userName\":\"test\"}],\"msg\":\"success\"}', '/chatGpt/back/list', 13, '后台聊天列表', '2024-03-28 22:36:24', '2024-03-28 22:36:24', 0);
INSERT INTO `sys_log` VALUES (3048, '分类管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.CategoryController.listArticleCategory()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":1,\"categoryName\":\"鸵鸟科\",\"createTime\":1710330928000,\"id\":6,\"updateTime\":1710330928000},{\"articleCount\":1,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391589000,\"id\":7,\"updateTime\":1710391589000},{\"articleCount\":1,\"categoryName\":\"鸟类\",\"createTime\":1711631912000,\"id\":8,\"updateTime\":1711631912000}],\"msg\":\"success\"}', '/category/back/list', 9, '获取分类列表', '2024-03-28 23:26:24', '2024-03-28 23:26:24', 0);
INSERT INTO `sys_log` VALUES (3049, '收藏管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.FavoriteController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"msg\":\"success\"}', '/favorite/back/list', 3, '后台收藏列表', '2024-03-28 23:26:25', '2024-03-28 23:26:25', 0);
INSERT INTO `sys_log` VALUES (3050, '收藏管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.FavoriteController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"content\":\"## 这是一篇关于角叫鸭的介绍\\n![](http://127.0.0.1:9005/test/article/articleImage/834ae260-85f7-4ec2-b064-206c89b3e706.jpg)\\n*在南美大陆上，有一种非常神秘的动物正等着我们探访。它身为雁鸭，身材体貌却迥异同类；鸟喙如鸡、头生硬角，还天生一副大嗓门——它就是鸟类独一档，人送外号“击剑贵族”与“喧嚣狂徒”的角叫鸭。*\\n\\n在热气蒸腾、雨林密布的南美洲大地上，有一种非常神秘的动物正在等待着我们的探访。\\n\\n它身为雁鸭类，身材体貌却迥异同类；鸟喙如鸡、头生硬角，宛若深海垂钓的大嘴鮟鱇，容貌怪异至极。\\n\\n它健走爱游水，却全身覆羽，轻盈善飞，骨骼含气度堪称鸟类之最！它拥有极高的语言天赋，不仅自创了一套“鸟语”，还天生一副大嗓门，其音发出后，相隔三公里亦清晰可闻。\\n\\n它就是南美鸟类独一档，人送外号“击剑贵族”与“喧嚣狂徒”的角叫鸭。\\n\\n<div align=\\\"center\\\">\\n  <iframe src=\\\"//player.bilibili.com/player.html?aid=644729401&bvid=BV1FY4y1F7Kz&cid=810072630&p=0&autoplay=0\\\" scrolling=\\\"no\\\" border=\\\"0\\\" frameborder=\\\"no\\\" framespacing=\\\"0\\\" allowfullscreen=\\\"false\\\"  height=\\\"498\\\" width=\\\"510\\\"> </iframe>\\n</div>\\n\\n\\n一石四鸟，生活无忧\\n角叫鸭为南美洲特有物种，为雁形目叫鸭科下独一属独一种之同名物种，其学名为Anhima cornuta，由“生物分类学之父”卡尔·林奈爵士亲自操刀命名。\\n\\n角叫鸭虽属留鸟，但活动范围甚广，广泛分布于南美大陆的中北部区域，栖地涵盖玻利维亚、巴西、哥伦比亚、秘鲁、巴拉圭和委内瑞拉等国，甚至在加勒比海诸国甚或美国、墨西哥都能看见其身影。\\n\\n它们惯常栖息于热带雨林、沼泽、河谷与平原草地地带，一般栖息高度不会超过海拔800米，为典型的“再往上住就高反给你看”一族。\",\"createTime\":1711639590000,\"id\":168,\"isCheck\":1,\"type\":1,\"userName\":\"seaflows\"}],\"msg\":\"success\"}', '/favorite/back/list', 6, '后台收藏列表', '2024-03-28 23:26:35', '2024-03-28 23:26:35', 0);
INSERT INTO `sys_log` VALUES (3051, '收藏管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.FavoriteController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"content\":\"## 这是一篇关于角叫鸭的介绍\\n![](http://127.0.0.1:9005/test/article/articleImage/834ae260-85f7-4ec2-b064-206c89b3e706.jpg)\\n*在南美大陆上，有一种非常神秘的动物正等着我们探访。它身为雁鸭，身材体貌却迥异同类；鸟喙如鸡、头生硬角，还天生一副大嗓门——它就是鸟类独一档，人送外号“击剑贵族”与“喧嚣狂徒”的角叫鸭。*\\n\\n在热气蒸腾、雨林密布的南美洲大地上，有一种非常神秘的动物正在等待着我们的探访。\\n\\n它身为雁鸭类，身材体貌却迥异同类；鸟喙如鸡、头生硬角，宛若深海垂钓的大嘴鮟鱇，容貌怪异至极。\\n\\n它健走爱游水，却全身覆羽，轻盈善飞，骨骼含气度堪称鸟类之最！它拥有极高的语言天赋，不仅自创了一套“鸟语”，还天生一副大嗓门，其音发出后，相隔三公里亦清晰可闻。\\n\\n它就是南美鸟类独一档，人送外号“击剑贵族”与“喧嚣狂徒”的角叫鸭。\\n\\n<div align=\\\"center\\\">\\n  <iframe src=\\\"//player.bilibili.com/player.html?aid=644729401&bvid=BV1FY4y1F7Kz&cid=810072630&p=0&autoplay=0\\\" scrolling=\\\"no\\\" border=\\\"0\\\" frameborder=\\\"no\\\" framespacing=\\\"0\\\" allowfullscreen=\\\"false\\\"  height=\\\"498\\\" width=\\\"510\\\"> </iframe>\\n</div>\\n\\n\\n一石四鸟，生活无忧\\n角叫鸭为南美洲特有物种，为雁形目叫鸭科下独一属独一种之同名物种，其学名为Anhima cornuta，由“生物分类学之父”卡尔·林奈爵士亲自操刀命名。\\n\\n角叫鸭虽属留鸟，但活动范围甚广，广泛分布于南美大陆的中北部区域，栖地涵盖玻利维亚、巴西、哥伦比亚、秘鲁、巴拉圭和委内瑞拉等国，甚至在加勒比海诸国甚或美国、墨西哥都能看见其身影。\\n\\n它们惯常栖息于热带雨林、沼泽、河谷与平原草地地带，一般栖息高度不会超过海拔800米，为典型的“再往上住就高反给你看”一族。\",\"createTime\":1711639590000,\"id\":168,\"isCheck\":1,\"type\":1,\"userName\":\"seaflows\"}],\"msg\":\"success\"}', '/favorite/back/list', 6, '后台收藏列表', '2024-03-28 23:28:18', '2024-03-28 23:28:18', 0);
INSERT INTO `sys_log` VALUES (3052, '收藏管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.FavoriteController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"content\":\"## 这是一篇关于角叫鸭的介绍\\n![](http://127.0.0.1:9005/test/article/articleImage/834ae260-85f7-4ec2-b064-206c89b3e706.jpg)\\n*在南美大陆上，有一种非常神秘的动物正等着我们探访。它身为雁鸭，身材体貌却迥异同类；鸟喙如鸡、头生硬角，还天生一副大嗓门——它就是鸟类独一档，人送外号“击剑贵族”与“喧嚣狂徒”的角叫鸭。*\\n\\n在热气蒸腾、雨林密布的南美洲大地上，有一种非常神秘的动物正在等待着我们的探访。\\n\\n它身为雁鸭类，身材体貌却迥异同类；鸟喙如鸡、头生硬角，宛若深海垂钓的大嘴鮟鱇，容貌怪异至极。\\n\\n它健走爱游水，却全身覆羽，轻盈善飞，骨骼含气度堪称鸟类之最！它拥有极高的语言天赋，不仅自创了一套“鸟语”，还天生一副大嗓门，其音发出后，相隔三公里亦清晰可闻。\\n\\n它就是南美鸟类独一档，人送外号“击剑贵族”与“喧嚣狂徒”的角叫鸭。\\n\\n<div align=\\\"center\\\">\\n  <iframe src=\\\"//player.bilibili.com/player.html?aid=644729401&bvid=BV1FY4y1F7Kz&cid=810072630&p=0&autoplay=0\\\" scrolling=\\\"no\\\" border=\\\"0\\\" frameborder=\\\"no\\\" framespacing=\\\"0\\\" allowfullscreen=\\\"false\\\"  height=\\\"498\\\" width=\\\"510\\\"> </iframe>\\n</div>\\n\\n\\n一石四鸟，生活无忧\\n角叫鸭为南美洲特有物种，为雁形目叫鸭科下独一属独一种之同名物种，其学名为Anhima cornuta，由“生物分类学之父”卡尔·林奈爵士亲自操刀命名。\\n\\n角叫鸭虽属留鸟，但活动范围甚广，广泛分布于南美大陆的中北部区域，栖地涵盖玻利维亚、巴西、哥伦比亚、秘鲁、巴拉圭和委内瑞拉等国，甚至在加勒比海诸国甚或美国、墨西哥都能看见其身影。\\n\\n它们惯常栖息于热带雨林、沼泽、河谷与平原草地地带，一般栖息高度不会超过海拔800米，为典型的“再往上住就高反给你看”一族。\",\"createTime\":1711639590000,\"id\":168,\"isCheck\":1,\"type\":1,\"userName\":\"seaflows\"}],\"msg\":\"success\"}', '/favorite/back/list', 66, '后台收藏列表', '2024-03-28 23:31:14', '2024-03-28 23:31:14', 0);
INSERT INTO `sys_log` VALUES (3053, '分类管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.CategoryController.listArticleCategory()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":1,\"categoryName\":\"鸵鸟科\",\"createTime\":1710330928000,\"id\":6,\"updateTime\":1710330928000},{\"articleCount\":1,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391589000,\"id\":7,\"updateTime\":1710391589000},{\"articleCount\":1,\"categoryName\":\"鸟类\",\"createTime\":1711631912000,\"id\":8,\"updateTime\":1711631912000}],\"msg\":\"success\"}', '/category/back/list', 28, '获取分类列表', '2024-03-28 23:31:17', '2024-03-28 23:31:17', 0);
INSERT INTO `sys_log` VALUES (3054, '留言管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.LeaveWordController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"content\":\"## 测试比较长的留言\\\\n\\\\n> 下面是一篇 c# 笔记\\\\n\\\\n<center>\\\\n    <h1>C#笔记</h1>\\\\n</center>\\\\n\\\\n\\\\n\\\\n[TOC] \\\\n\\\\n### 1、C#访问修饰符\\\\n\\\\n​\\\\t\\\\t在C#当中的访问修饰符及作用范围如下：\\\\n\\\\n|     访问修饰符     |                        说明                        |\\\\n| :----------------: | :------------------------------------------------: |\\\\n|       public       |              共有访问。不受任何限制。              |\\\\n|      private       |      私有访问。只有本类能访问，实例不能访问。      |\\\\n|     protected      |   保护访问。只限于本类和子类访问，实例不能访问。   |\\\\n|      internal      |      内部访问。只限于本项目访问，其他不能访问      |\\\\n| protected internal | 内部保护访问。只限于本项目或子类访问，其他不能访问 |\\\\n\\\\n​\\\\t\\\\tC#成员类型的可修饰及默认修饰符如下：\\\\n\\\\n| 成员类型  | 默认修饰符 |                           可被修饰                           |\\\\n| :-------: | :--------: | :----------------------------------------------------------: |\\\\n|   enum    |   public   |                             none                             |\\\\n|   class   |  private   | public、protected、internal、private、<br />protected internal |\\\\n| interface |   public   |                             none                             |\\\\n|  struct   |  private   |                  public、internal、private                   |\\\\n\\\\n> public 访问级别最高\\\\n>\\\\n> private 访问级别最低\\\\n\\\\n### 2、this 关键字\\\\n\\\\n看以下代码，有什么问题：\\\\n\\\\n```C#\\\\nclass Strdent\\\\n{\\\\n    private string _name;\\\\t//姓名\\\\t\\\\n    public int _age = 19;\\\\t//年龄\\\\n    public string _cardID = \\\\\\\"145236985674526685\\\\\\\";\\\\t//身份证号码\\\\n    public void SetName(string _name)\\\\n    {\\\\n        _name = _name;\\\\n    }\\\\n}\\\\n```\\\\n\\\\n分析： 在 Student 类中定义了一个 private 成员变量 _name,在 SetName()方法的参数中也定义了一个与之同名的变量 _name。这时编译器会发现成员变量和方法的参数重名了。\\\\n此时，编译器无法分辨代码中出现的这两个 _name 那个是成员变量，哪个是方法中的参数。我们可以借助 this 关键字来解决这个问题。\\\\n\\\\n> this 关键字是指当前对象本身。通过 this 可以引用当前类的成员变量和方法。\\\\n\\\\n因此可以改变以上代码为：\\\\n\\\\n```C#\\\\nclass Strdent\\\\n{\\\\n    private string _name;\\\\t//姓名\\\\t\\\\n    public int _age = 19;\\\\t//年龄\\\\n    public string _cardID = \\\\\\\"145236985674526685\\\\\\\";\\\\t//身份证号码\\\\n    public void SetName(string _name)\\\\n    {\\\\n        this._name = _name;\\\\n    }\\\\n}\\\\n```\\\\n\\\\n> 使用 this 关键字可以解决成员变量和局部变量名称冲突的问题。\\\\n\\\\n### 3、C#属性\\\\n\\\\n#### 3.1、用方法保证数据安全\",\"createTime\":1705378527000,\"id\":13,\"isCheck\":1,\"updateTime\":1705378527000,\"userName\":\"test\"},{\"content\":\"# \\\\u6DFB\\\\u52A0\\\\u7559\\\\u8A00\\\\u677F\\\\\\\\n\\\\\\\\n* \\\\u6DFB\\\\u52A0\\\\u6D4B\\\\u8BD5\\\\\\\\n* dddd\",\"createTime\":1705381840000,\"id\":23,\"isCheck\":1,\"updateTime\":1705381840000,\"userName\":\"test\"},{\"content\":\"# 添加留言板\\n\\n* 添加测试aaa\",\"createTime\":1705382184000,\"id\":24,\"isCheck\":1,\"updateTime\":1705382184000,\"userName\":\"test\"},{\"content\":\"## 测试比较长的留言\\n\\n> 下面是一篇 c# 笔记\\n\\n<center>\\n    <h1>C#笔记</h1>\\n</center>\\n\\n\\n\\n[TOC] \\n\\n### 1、C#访问修饰符\\n\\n​\\t\\t在C#当中的访问修饰符及作用范围如下：\\n\\n|     访问修饰符     |                        说明                        |\\n| :----------------: | :------------------------------------------------: |\\n|       public       |              共有访问。不受任何限制。              |\\n|      private       |      私有访问。只有本类能访问，实例不能访问。      |\\n|     protected      |   保护访问。只限于本类和子类访问，实例不能访问。   |\\n|      internal      |      内部访问。只限于本项目访问，其他不能访问      |\\n| protected internal | 内部保护访问。只限于本项目或子类访问，其他不能访问 |\\n\\n​\\t\\tC#成员类型的可修饰及默认修饰符如下：\\n\\n| 成员类型  | 默认修饰符 |                           可被修饰                           |\\n| :-------: | :--------: | :----------------------------------------------------------: |\\n|   enum    |   public   |                             none                             |\\n|   class   |  private   | public、protected、internal、private、<br />protected internal |\\n| interface |   public   |                             none                             |\\n|  struct   |  private   |                  public、internal、private                   |\\n\\n> public 访问级别最高\\n>\\n> private 访问级别最低\\n\\n### 2、this 关键字\\n\\n看以下代码，有什么问题：\\n\\n```C#\\nclass Strdent\\n{\\n    private string _name;\\t//姓名\\t\\n    public int _age = 19;\\t//年龄\\n    public string _cardID = \\\"145236985674526685\\\";\\t//身份证号码\\n    public void SetName(string _name)\\n    {\\n        _name = _name;\\n    }\\n}\\n```\\n\\n分析： 在 Student 类中定义了一个 private 成员变量 _name,在 SetName()方法的参数中也定义了一个与之同名的变量 _name。这时编译器会发现成员变量和方法的参数重名了。\\n此时，编译器无法分辨代码中出现的这两个 _\",\"createTime\":1705382708000,\"id\":25,\"isCheck\":1,\"updateTime\":1705382708000,\"userName\":\"test\"},{\"content\":\"## 测试留言Markdown 编写\\n\\n> 不要报错\\n\\n> ~~没有bug~~\",\"createTime\":1705382870000,\"id\":26,\"isCheck\":1,\"updateTime\":1705382870000,\"userName\":\"test\"},{\"content\":\"### 留言bug 最后测试\",\"createTime\":1705382974000,\"id\":27,\"isCheck\":1,\"updateTime\":1705383023000,\"userName\":\"test\"}],\"msg\":\"success\"}', '/leaveWord/back/list', 20, '后台留言列表', '2024-03-28 23:47:08', '2024-03-28 23:47:08', 0);
INSERT INTO `sys_log` VALUES (3055, '留言管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.LeaveWordController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"content\":\"## 测试比较长的留言\\\\n\\\\n> 下面是一篇 c# 笔记\\\\n\\\\n<center>\\\\n    <h1>C#笔记</h1>\\\\n</center>\\\\n\\\\n\\\\n\\\\n[TOC] \\\\n\\\\n### 1、C#访问修饰符\\\\n\\\\n​\\\\t\\\\t在C#当中的访问修饰符及作用范围如下：\\\\n\\\\n|     访问修饰符     |                        说明                        |\\\\n| :----------------: | :------------------------------------------------: |\\\\n|       public       |              共有访问。不受任何限制。              |\\\\n|      private       |      私有访问。只有本类能访问，实例不能访问。      |\\\\n|     protected      |   保护访问。只限于本类和子类访问，实例不能访问。   |\\\\n|      internal      |      内部访问。只限于本项目访问，其他不能访问      |\\\\n| protected internal | 内部保护访问。只限于本项目或子类访问，其他不能访问 |\\\\n\\\\n​\\\\t\\\\tC#成员类型的可修饰及默认修饰符如下：\\\\n\\\\n| 成员类型  | 默认修饰符 |                           可被修饰                           |\\\\n| :-------: | :--------: | :----------------------------------------------------------: |\\\\n|   enum    |   public   |                             none                             |\\\\n|   class   |  private   | public、protected、internal、private、<br />protected internal |\\\\n| interface |   public   |                             none                             |\\\\n|  struct   |  private   |                  public、internal、private                   |\\\\n\\\\n> public 访问级别最高\\\\n>\\\\n> private 访问级别最低\\\\n\\\\n### 2、this 关键字\\\\n\\\\n看以下代码，有什么问题：\\\\n\\\\n```C#\\\\nclass Strdent\\\\n{\\\\n    private string _name;\\\\t//姓名\\\\t\\\\n    public int _age = 19;\\\\t//年龄\\\\n    public string _cardID = \\\\\\\"145236985674526685\\\\\\\";\\\\t//身份证号码\\\\n    public void SetName(string _name)\\\\n    {\\\\n        _name = _name;\\\\n    }\\\\n}\\\\n```\\\\n\\\\n分析： 在 Student 类中定义了一个 private 成员变量 _name,在 SetName()方法的参数中也定义了一个与之同名的变量 _name。这时编译器会发现成员变量和方法的参数重名了。\\\\n此时，编译器无法分辨代码中出现的这两个 _name 那个是成员变量，哪个是方法中的参数。我们可以借助 this 关键字来解决这个问题。\\\\n\\\\n> this 关键字是指当前对象本身。通过 this 可以引用当前类的成员变量和方法。\\\\n\\\\n因此可以改变以上代码为：\\\\n\\\\n```C#\\\\nclass Strdent\\\\n{\\\\n    private string _name;\\\\t//姓名\\\\t\\\\n    public int _age = 19;\\\\t//年龄\\\\n    public string _cardID = \\\\\\\"145236985674526685\\\\\\\";\\\\t//身份证号码\\\\n    public void SetName(string _name)\\\\n    {\\\\n        this._name = _name;\\\\n    }\\\\n}\\\\n```\\\\n\\\\n> 使用 this 关键字可以解决成员变量和局部变量名称冲突的问题。\\\\n\\\\n### 3、C#属性\\\\n\\\\n#### 3.1、用方法保证数据安全\",\"createTime\":1705378527000,\"id\":13,\"isCheck\":1,\"updateTime\":1705378527000,\"userName\":\"test\"},{\"content\":\"# \\\\u6DFB\\\\u52A0\\\\u7559\\\\u8A00\\\\u677F\\\\\\\\n\\\\\\\\n* \\\\u6DFB\\\\u52A0\\\\u6D4B\\\\u8BD5\\\\\\\\n* dddd\",\"createTime\":1705381840000,\"id\":23,\"isCheck\":1,\"updateTime\":1705381840000,\"userName\":\"test\"},{\"content\":\"# 添加留言板\\n\\n* 添加测试aaa\",\"createTime\":1705382184000,\"id\":24,\"isCheck\":1,\"updateTime\":1705382184000,\"userName\":\"test\"},{\"content\":\"## 测试比较长的留言\\n\\n> 下面是一篇 c# 笔记\\n\\n<center>\\n    <h1>C#笔记</h1>\\n</center>\\n\\n\\n\\n[TOC] \\n\\n### 1、C#访问修饰符\\n\\n​\\t\\t在C#当中的访问修饰符及作用范围如下：\\n\\n|     访问修饰符     |                        说明                        |\\n| :----------------: | :------------------------------------------------: |\\n|       public       |              共有访问。不受任何限制。              |\\n|      private       |      私有访问。只有本类能访问，实例不能访问。      |\\n|     protected      |   保护访问。只限于本类和子类访问，实例不能访问。   |\\n|      internal      |      内部访问。只限于本项目访问，其他不能访问      |\\n| protected internal | 内部保护访问。只限于本项目或子类访问，其他不能访问 |\\n\\n​\\t\\tC#成员类型的可修饰及默认修饰符如下：\\n\\n| 成员类型  | 默认修饰符 |                           可被修饰                           |\\n| :-------: | :--------: | :----------------------------------------------------------: |\\n|   enum    |   public   |                             none                             |\\n|   class   |  private   | public、protected、internal、private、<br />protected internal |\\n| interface |   public   |                             none                             |\\n|  struct   |  private   |                  public、internal、private                   |\\n\\n> public 访问级别最高\\n>\\n> private 访问级别最低\\n\\n### 2、this 关键字\\n\\n看以下代码，有什么问题：\\n\\n```C#\\nclass Strdent\\n{\\n    private string _name;\\t//姓名\\t\\n    public int _age = 19;\\t//年龄\\n    public string _cardID = \\\"145236985674526685\\\";\\t//身份证号码\\n    public void SetName(string _name)\\n    {\\n        _name = _name;\\n    }\\n}\\n```\\n\\n分析： 在 Student 类中定义了一个 private 成员变量 _name,在 SetName()方法的参数中也定义了一个与之同名的变量 _name。这时编译器会发现成员变量和方法的参数重名了。\\n此时，编译器无法分辨代码中出现的这两个 _\",\"createTime\":1705382708000,\"id\":25,\"isCheck\":1,\"updateTime\":1705382708000,\"userName\":\"test\"},{\"content\":\"## 测试留言Markdown 编写\\n\\n> 不要报错\\n\\n> ~~没有bug~~\",\"createTime\":1705382870000,\"id\":26,\"isCheck\":1,\"updateTime\":1705382870000,\"userName\":\"test\"},{\"content\":\"### 留言bug 最后测试\",\"createTime\":1705382974000,\"id\":27,\"isCheck\":1,\"updateTime\":1705383023000,\"userName\":\"test\"}],\"msg\":\"success\"}', '/leaveWord/back/list', 22, '后台留言列表', '2024-03-28 23:47:39', '2024-03-28 23:47:39', 0);
INSERT INTO `sys_log` VALUES (3056, '留言管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.LeaveWordController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"content\":\"## 测试比较长的留言\\\\n\\\\n> 下面是一篇 c# 笔记\\\\n\\\\n<center>\\\\n    <h1>C#笔记</h1>\\\\n</center>\\\\n\\\\n\\\\n\\\\n[TOC] \\\\n\\\\n### 1、C#访问修饰符\\\\n\\\\n​\\\\t\\\\t在C#当中的访问修饰符及作用范围如下：\\\\n\\\\n|     访问修饰符     |                        说明                        |\\\\n| :----------------: | :------------------------------------------------: |\\\\n|       public       |              共有访问。不受任何限制。              |\\\\n|      private       |      私有访问。只有本类能访问，实例不能访问。      |\\\\n|     protected      |   保护访问。只限于本类和子类访问，实例不能访问。   |\\\\n|      internal      |      内部访问。只限于本项目访问，其他不能访问      |\\\\n| protected internal | 内部保护访问。只限于本项目或子类访问，其他不能访问 |\\\\n\\\\n​\\\\t\\\\tC#成员类型的可修饰及默认修饰符如下：\\\\n\\\\n| 成员类型  | 默认修饰符 |                           可被修饰                           |\\\\n| :-------: | :--------: | :----------------------------------------------------------: |\\\\n|   enum    |   public   |                             none                             |\\\\n|   class   |  private   | public、protected、internal、private、<br />protected internal |\\\\n| interface |   public   |                             none                             |\\\\n|  struct   |  private   |                  public、internal、private                   |\\\\n\\\\n> public 访问级别最高\\\\n>\\\\n> private 访问级别最低\\\\n\\\\n### 2、this 关键字\\\\n\\\\n看以下代码，有什么问题：\\\\n\\\\n```C#\\\\nclass Strdent\\\\n{\\\\n    private string _name;\\\\t//姓名\\\\t\\\\n    public int _age = 19;\\\\t//年龄\\\\n    public string _cardID = \\\\\\\"145236985674526685\\\\\\\";\\\\t//身份证号码\\\\n    public void SetName(string _name)\\\\n    {\\\\n        _name = _name;\\\\n    }\\\\n}\\\\n```\\\\n\\\\n分析： 在 Student 类中定义了一个 private 成员变量 _name,在 SetName()方法的参数中也定义了一个与之同名的变量 _name。这时编译器会发现成员变量和方法的参数重名了。\\\\n此时，编译器无法分辨代码中出现的这两个 _name 那个是成员变量，哪个是方法中的参数。我们可以借助 this 关键字来解决这个问题。\\\\n\\\\n> this 关键字是指当前对象本身。通过 this 可以引用当前类的成员变量和方法。\\\\n\\\\n因此可以改变以上代码为：\\\\n\\\\n```C#\\\\nclass Strdent\\\\n{\\\\n    private string _name;\\\\t//姓名\\\\t\\\\n    public int _age = 19;\\\\t//年龄\\\\n    public string _cardID = \\\\\\\"145236985674526685\\\\\\\";\\\\t//身份证号码\\\\n    public void SetName(string _name)\\\\n    {\\\\n        this._name = _name;\\\\n    }\\\\n}\\\\n```\\\\n\\\\n> 使用 this 关键字可以解决成员变量和局部变量名称冲突的问题。\\\\n\\\\n### 3、C#属性\\\\n\\\\n#### 3.1、用方法保证数据安全\",\"createTime\":1705378527000,\"id\":13,\"isCheck\":1,\"updateTime\":1705378527000,\"userName\":\"test\"},{\"content\":\"# \\\\u6DFB\\\\u52A0\\\\u7559\\\\u8A00\\\\u677F\\\\\\\\n\\\\\\\\n* \\\\u6DFB\\\\u52A0\\\\u6D4B\\\\u8BD5\\\\\\\\n* dddd\",\"createTime\":1705381840000,\"id\":23,\"isCheck\":1,\"updateTime\":1705381840000,\"userName\":\"test\"},{\"content\":\"# 添加留言板\\n\\n* 添加测试aaa\",\"createTime\":1705382184000,\"id\":24,\"isCheck\":1,\"updateTime\":1705382184000,\"userName\":\"test\"},{\"content\":\"## 测试比较长的留言\\n\\n> 下面是一篇 c# 笔记\\n\\n<center>\\n    <h1>C#笔记</h1>\\n</center>\\n\\n\\n\\n[TOC] \\n\\n### 1、C#访问修饰符\\n\\n​\\t\\t在C#当中的访问修饰符及作用范围如下：\\n\\n|     访问修饰符     |                        说明                        |\\n| :----------------: | :------------------------------------------------: |\\n|       public       |              共有访问。不受任何限制。              |\\n|      private       |      私有访问。只有本类能访问，实例不能访问。      |\\n|     protected      |   保护访问。只限于本类和子类访问，实例不能访问。   |\\n|      internal      |      内部访问。只限于本项目访问，其他不能访问      |\\n| protected internal | 内部保护访问。只限于本项目或子类访问，其他不能访问 |\\n\\n​\\t\\tC#成员类型的可修饰及默认修饰符如下：\\n\\n| 成员类型  | 默认修饰符 |                           可被修饰                           |\\n| :-------: | :--------: | :----------------------------------------------------------: |\\n|   enum    |   public   |                             none                             |\\n|   class   |  private   | public、protected、internal、private、<br />protected internal |\\n| interface |   public   |                             none                             |\\n|  struct   |  private   |                  public、internal、private                   |\\n\\n> public 访问级别最高\\n>\\n> private 访问级别最低\\n\\n### 2、this 关键字\\n\\n看以下代码，有什么问题：\\n\\n```C#\\nclass Strdent\\n{\\n    private string _name;\\t//姓名\\t\\n    public int _age = 19;\\t//年龄\\n    public string _cardID = \\\"145236985674526685\\\";\\t//身份证号码\\n    public void SetName(string _name)\\n    {\\n        _name = _name;\\n    }\\n}\\n```\\n\\n分析： 在 Student 类中定义了一个 private 成员变量 _name,在 SetName()方法的参数中也定义了一个与之同名的变量 _name。这时编译器会发现成员变量和方法的参数重名了。\\n此时，编译器无法分辨代码中出现的这两个 _\",\"createTime\":1705382708000,\"id\":25,\"isCheck\":1,\"updateTime\":1705382708000,\"userName\":\"test\"},{\"content\":\"## 测试留言Markdown 编写\\n\\n> 不要报错\\n\\n> ~~没有bug~~\",\"createTime\":1705382870000,\"id\":26,\"isCheck\":1,\"updateTime\":1705382870000,\"userName\":\"test\"},{\"content\":\"### 留言bug 最后测试\",\"createTime\":1705382974000,\"id\":27,\"isCheck\":1,\"updateTime\":1705383023000,\"userName\":\"test\"}],\"msg\":\"success\"}', '/leaveWord/back/list', 14, '后台留言列表', '2024-03-28 23:47:39', '2024-03-28 23:47:39', 0);
INSERT INTO `sys_log` VALUES (3057, '留言管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.LeaveWordController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"content\":\"## 测试比较长的留言\\\\n\\\\n> 下面是一篇 c# 笔记\\\\n\\\\n<center>\\\\n    <h1>C#笔记</h1>\\\\n</center>\\\\n\\\\n\\\\n\\\\n[TOC] \\\\n\\\\n### 1、C#访问修饰符\\\\n\\\\n​\\\\t\\\\t在C#当中的访问修饰符及作用范围如下：\\\\n\\\\n|     访问修饰符     |                        说明                        |\\\\n| :----------------: | :------------------------------------------------: |\\\\n|       public       |              共有访问。不受任何限制。              |\\\\n|      private       |      私有访问。只有本类能访问，实例不能访问。      |\\\\n|     protected      |   保护访问。只限于本类和子类访问，实例不能访问。   |\\\\n|      internal      |      内部访问。只限于本项目访问，其他不能访问      |\\\\n| protected internal | 内部保护访问。只限于本项目或子类访问，其他不能访问 |\\\\n\\\\n​\\\\t\\\\tC#成员类型的可修饰及默认修饰符如下：\\\\n\\\\n| 成员类型  | 默认修饰符 |                           可被修饰                           |\\\\n| :-------: | :--------: | :----------------------------------------------------------: |\\\\n|   enum    |   public   |                             none                             |\\\\n|   class   |  private   | public、protected、internal、private、<br />protected internal |\\\\n| interface |   public   |                             none                             |\\\\n|  struct   |  private   |                  public、internal、private                   |\\\\n\\\\n> public 访问级别最高\\\\n>\\\\n> private 访问级别最低\\\\n\\\\n### 2、this 关键字\\\\n\\\\n看以下代码，有什么问题：\\\\n\\\\n```C#\\\\nclass Strdent\\\\n{\\\\n    private string _name;\\\\t//姓名\\\\t\\\\n    public int _age = 19;\\\\t//年龄\\\\n    public string _cardID = \\\\\\\"145236985674526685\\\\\\\";\\\\t//身份证号码\\\\n    public void SetName(string _name)\\\\n    {\\\\n        _name = _name;\\\\n    }\\\\n}\\\\n```\\\\n\\\\n分析： 在 Student 类中定义了一个 private 成员变量 _name,在 SetName()方法的参数中也定义了一个与之同名的变量 _name。这时编译器会发现成员变量和方法的参数重名了。\\\\n此时，编译器无法分辨代码中出现的这两个 _name 那个是成员变量，哪个是方法中的参数。我们可以借助 this 关键字来解决这个问题。\\\\n\\\\n> this 关键字是指当前对象本身。通过 this 可以引用当前类的成员变量和方法。\\\\n\\\\n因此可以改变以上代码为：\\\\n\\\\n```C#\\\\nclass Strdent\\\\n{\\\\n    private string _name;\\\\t//姓名\\\\t\\\\n    public int _age = 19;\\\\t//年龄\\\\n    public string _cardID = \\\\\\\"145236985674526685\\\\\\\";\\\\t//身份证号码\\\\n    public void SetName(string _name)\\\\n    {\\\\n        this._name = _name;\\\\n    }\\\\n}\\\\n```\\\\n\\\\n> 使用 this 关键字可以解决成员变量和局部变量名称冲突的问题。\\\\n\\\\n### 3、C#属性\\\\n\\\\n#### 3.1、用方法保证数据安全\",\"createTime\":1705378527000,\"id\":13,\"isCheck\":1,\"updateTime\":1705378527000,\"userName\":\"test\"},{\"content\":\"# \\\\u6DFB\\\\u52A0\\\\u7559\\\\u8A00\\\\u677F\\\\\\\\n\\\\\\\\n* \\\\u6DFB\\\\u52A0\\\\u6D4B\\\\u8BD5\\\\\\\\n* dddd\",\"createTime\":1705381840000,\"id\":23,\"isCheck\":1,\"updateTime\":1705381840000,\"userName\":\"test\"},{\"content\":\"# 添加留言板\\n\\n* 添加测试aaa\",\"createTime\":1705382184000,\"id\":24,\"isCheck\":1,\"updateTime\":1705382184000,\"userName\":\"test\"},{\"content\":\"## 测试比较长的留言\\n\\n> 下面是一篇 c# 笔记\\n\\n<center>\\n    <h1>C#笔记</h1>\\n</center>\\n\\n\\n\\n[TOC] \\n\\n### 1、C#访问修饰符\\n\\n​\\t\\t在C#当中的访问修饰符及作用范围如下：\\n\\n|     访问修饰符     |                        说明                        |\\n| :----------------: | :------------------------------------------------: |\\n|       public       |              共有访问。不受任何限制。              |\\n|      private       |      私有访问。只有本类能访问，实例不能访问。      |\\n|     protected      |   保护访问。只限于本类和子类访问，实例不能访问。   |\\n|      internal      |      内部访问。只限于本项目访问，其他不能访问      |\\n| protected internal | 内部保护访问。只限于本项目或子类访问，其他不能访问 |\\n\\n​\\t\\tC#成员类型的可修饰及默认修饰符如下：\\n\\n| 成员类型  | 默认修饰符 |                           可被修饰                           |\\n| :-------: | :--------: | :----------------------------------------------------------: |\\n|   enum    |   public   |                             none                             |\\n|   class   |  private   | public、protected、internal、private、<br />protected internal |\\n| interface |   public   |                             none                             |\\n|  struct   |  private   |                  public、internal、private                   |\\n\\n> public 访问级别最高\\n>\\n> private 访问级别最低\\n\\n### 2、this 关键字\\n\\n看以下代码，有什么问题：\\n\\n```C#\\nclass Strdent\\n{\\n    private string _name;\\t//姓名\\t\\n    public int _age = 19;\\t//年龄\\n    public string _cardID = \\\"145236985674526685\\\";\\t//身份证号码\\n    public void SetName(string _name)\\n    {\\n        _name = _name;\\n    }\\n}\\n```\\n\\n分析： 在 Student 类中定义了一个 private 成员变量 _name,在 SetName()方法的参数中也定义了一个与之同名的变量 _name。这时编译器会发现成员变量和方法的参数重名了。\\n此时，编译器无法分辨代码中出现的这两个 _\",\"createTime\":1705382708000,\"id\":25,\"isCheck\":1,\"updateTime\":1705382708000,\"userName\":\"test\"},{\"content\":\"## 测试留言Markdown 编写\\n\\n> 不要报错\\n\\n> ~~没有bug~~\",\"createTime\":1705382870000,\"id\":26,\"isCheck\":1,\"updateTime\":1705382870000,\"userName\":\"test\"},{\"content\":\"### 留言bug 最后测试\",\"createTime\":1705382974000,\"id\":27,\"isCheck\":1,\"updateTime\":1705383023000,\"userName\":\"test\"}],\"msg\":\"success\"}', '/leaveWord/back/list', 14, '后台留言列表', '2024-03-28 23:48:13', '2024-03-28 23:48:13', 0);
INSERT INTO `sys_log` VALUES (3058, '留言管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.LeaveWordController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"content\":\"## 测试比较长的留言\\\\n\\\\n> 下面是一篇 c# 笔记\\\\n\\\\n<center>\\\\n    <h1>C#笔记</h1>\\\\n</center>\\\\n\\\\n\\\\n\\\\n[TOC] \\\\n\\\\n### 1、C#访问修饰符\\\\n\\\\n​\\\\t\\\\t在C#当中的访问修饰符及作用范围如下：\\\\n\\\\n|     访问修饰符     |                        说明                        |\\\\n| :----------------: | :------------------------------------------------: |\\\\n|       public       |              共有访问。不受任何限制。              |\\\\n|      private       |      私有访问。只有本类能访问，实例不能访问。      |\\\\n|     protected      |   保护访问。只限于本类和子类访问，实例不能访问。   |\\\\n|      internal      |      内部访问。只限于本项目访问，其他不能访问      |\\\\n| protected internal | 内部保护访问。只限于本项目或子类访问，其他不能访问 |\\\\n\\\\n​\\\\t\\\\tC#成员类型的可修饰及默认修饰符如下：\\\\n\\\\n| 成员类型  | 默认修饰符 |                           可被修饰                           |\\\\n| :-------: | :--------: | :----------------------------------------------------------: |\\\\n|   enum    |   public   |                             none                             |\\\\n|   class   |  private   | public、protected、internal、private、<br />protected internal |\\\\n| interface |   public   |                             none                             |\\\\n|  struct   |  private   |                  public、internal、private                   |\\\\n\\\\n> public 访问级别最高\\\\n>\\\\n> private 访问级别最低\\\\n\\\\n### 2、this 关键字\\\\n\\\\n看以下代码，有什么问题：\\\\n\\\\n```C#\\\\nclass Strdent\\\\n{\\\\n    private string _name;\\\\t//姓名\\\\t\\\\n    public int _age = 19;\\\\t//年龄\\\\n    public string _cardID = \\\\\\\"145236985674526685\\\\\\\";\\\\t//身份证号码\\\\n    public void SetName(string _name)\\\\n    {\\\\n        _name = _name;\\\\n    }\\\\n}\\\\n```\\\\n\\\\n分析： 在 Student 类中定义了一个 private 成员变量 _name,在 SetName()方法的参数中也定义了一个与之同名的变量 _name。这时编译器会发现成员变量和方法的参数重名了。\\\\n此时，编译器无法分辨代码中出现的这两个 _name 那个是成员变量，哪个是方法中的参数。我们可以借助 this 关键字来解决这个问题。\\\\n\\\\n> this 关键字是指当前对象本身。通过 this 可以引用当前类的成员变量和方法。\\\\n\\\\n因此可以改变以上代码为：\\\\n\\\\n```C#\\\\nclass Strdent\\\\n{\\\\n    private string _name;\\\\t//姓名\\\\t\\\\n    public int _age = 19;\\\\t//年龄\\\\n    public string _cardID = \\\\\\\"145236985674526685\\\\\\\";\\\\t//身份证号码\\\\n    public void SetName(string _name)\\\\n    {\\\\n        this._name = _name;\\\\n    }\\\\n}\\\\n```\\\\n\\\\n> 使用 this 关键字可以解决成员变量和局部变量名称冲突的问题。\\\\n\\\\n### 3、C#属性\\\\n\\\\n#### 3.1、用方法保证数据安全\",\"createTime\":1705378527000,\"id\":13,\"isCheck\":1,\"updateTime\":1705378527000,\"userName\":\"test\"},{\"content\":\"# \\\\u6DFB\\\\u52A0\\\\u7559\\\\u8A00\\\\u677F\\\\\\\\n\\\\\\\\n* \\\\u6DFB\\\\u52A0\\\\u6D4B\\\\u8BD5\\\\\\\\n* dddd\",\"createTime\":1705381840000,\"id\":23,\"isCheck\":1,\"updateTime\":1705381840000,\"userName\":\"test\"},{\"content\":\"# 添加留言板\\n\\n* 添加测试aaa\",\"createTime\":1705382184000,\"id\":24,\"isCheck\":1,\"updateTime\":1705382184000,\"userName\":\"test\"},{\"content\":\"## 测试比较长的留言\\n\\n> 下面是一篇 c# 笔记\\n\\n<center>\\n    <h1>C#笔记</h1>\\n</center>\\n\\n\\n\\n[TOC] \\n\\n### 1、C#访问修饰符\\n\\n​\\t\\t在C#当中的访问修饰符及作用范围如下：\\n\\n|     访问修饰符     |                        说明                        |\\n| :----------------: | :------------------------------------------------: |\\n|       public       |              共有访问。不受任何限制。              |\\n|      private       |      私有访问。只有本类能访问，实例不能访问。      |\\n|     protected      |   保护访问。只限于本类和子类访问，实例不能访问。   |\\n|      internal      |      内部访问。只限于本项目访问，其他不能访问      |\\n| protected internal | 内部保护访问。只限于本项目或子类访问，其他不能访问 |\\n\\n​\\t\\tC#成员类型的可修饰及默认修饰符如下：\\n\\n| 成员类型  | 默认修饰符 |                           可被修饰                           |\\n| :-------: | :--------: | :----------------------------------------------------------: |\\n|   enum    |   public   |                             none                             |\\n|   class   |  private   | public、protected、internal、private、<br />protected internal |\\n| interface |   public   |                             none                             |\\n|  struct   |  private   |                  public、internal、private                   |\\n\\n> public 访问级别最高\\n>\\n> private 访问级别最低\\n\\n### 2、this 关键字\\n\\n看以下代码，有什么问题：\\n\\n```C#\\nclass Strdent\\n{\\n    private string _name;\\t//姓名\\t\\n    public int _age = 19;\\t//年龄\\n    public string _cardID = \\\"145236985674526685\\\";\\t//身份证号码\\n    public void SetName(string _name)\\n    {\\n        _name = _name;\\n    }\\n}\\n```\\n\\n分析： 在 Student 类中定义了一个 private 成员变量 _name,在 SetName()方法的参数中也定义了一个与之同名的变量 _name。这时编译器会发现成员变量和方法的参数重名了。\\n此时，编译器无法分辨代码中出现的这两个 _\",\"createTime\":1705382708000,\"id\":25,\"isCheck\":1,\"updateTime\":1705382708000,\"userName\":\"test\"},{\"content\":\"## 测试留言Markdown 编写\\n\\n> 不要报错\\n\\n> ~~没有bug~~\",\"createTime\":1705382870000,\"id\":26,\"isCheck\":1,\"updateTime\":1705382870000,\"userName\":\"test\"},{\"content\":\"### 留言bug 最后测试\",\"createTime\":1705382974000,\"id\":27,\"isCheck\":1,\"updateTime\":1705383023000,\"userName\":\"test\"},{\"content\":\"Markdown 视频\\n由于 Markdown 支持 HTML 语法，会对相应的标签进行解析。所以我们可以通过 HTML 语法将视频放入到我们的 Markdown 中。\\n\\n用法如下：\\n\\n<iframe height=498 width=510 src=\\\"视频地址\\\">\\n1\\n其中 height 和 width 是 HTML 中的属性可以设置视频的大小，我们也可以使用 HTML 中的其他属性对插入视频进行相应设置。\\n\\n本地插入\\n在 src 中加入本地视频所对应的路径即可。\\n\\n<iframe height=498 width=510 src=\\\"本地视频路径\\\">\\n1\\n在线插入\\n在 src 中加入视频链接即可。\\n\\n<iframe height=498 width=510 src=\\\"在线视频链接\\\">\",\"createTime\":1711640995000,\"id\":28,\"isCheck\":1,\"updateTime\":1711640995000,\"userName\":\"seaflows\"}],\"msg\":\"success\"}', '/leaveWord/back/list', 20, '后台留言列表', '2024-03-28 23:50:01', '2024-03-28 23:50:01', 0);
INSERT INTO `sys_log` VALUES (3059, '留言管理', '删除', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.LeaveWordController.delete()', '[[13,23,24,25,26]]', 'DELETE', NULL, '{\"code\":200,\"msg\":\"success\"}', '/leaveWord/back/delete', 14, '删除留言', '2024-03-28 23:51:08', '2024-03-28 23:51:08', 0);
INSERT INTO `sys_log` VALUES (3060, '留言管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.LeaveWordController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"content\":\"### 留言bug 最后测试\",\"createTime\":1705382974000,\"id\":27,\"isCheck\":1,\"updateTime\":1705383023000,\"userName\":\"test\"},{\"content\":\"Markdown 视频\\n由于 Markdown 支持 HTML 语法，会对相应的标签进行解析。所以我们可以通过 HTML 语法将视频放入到我们的 Markdown 中。\\n\\n用法如下：\\n\\n<iframe height=498 width=510 src=\\\"视频地址\\\">\\n1\\n其中 height 和 width 是 HTML 中的属性可以设置视频的大小，我们也可以使用 HTML 中的其他属性对插入视频进行相应设置。\\n\\n本地插入\\n在 src 中加入本地视频所对应的路径即可。\\n\\n<iframe height=498 width=510 src=\\\"本地视频路径\\\">\\n1\\n在线插入\\n在 src 中加入视频链接即可。\\n\\n<iframe height=498 width=510 src=\\\"在线视频链接\\\">\",\"createTime\":1711640995000,\"id\":28,\"isCheck\":1,\"updateTime\":1711640995000,\"userName\":\"seaflows\"}],\"msg\":\"success\"}', '/leaveWord/back/list', 7, '后台留言列表', '2024-03-28 23:51:08', '2024-03-28 23:51:08', 0);
INSERT INTO `sys_log` VALUES (3061, '聊天管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ChatGptController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"avatar\":\"http://cdn.kuailemao.lielfw.cn/articleCover/Sara11676693014447852.png\",\"conversation\":\"{\\\"content\\\":[{\\\"content\\\":\\\"你好\\\",\\\"type\\\":\\\"question\\\"},{\\\"content\\\":\\\"你好！有什么我可以帮助你的呢？\\\",\\\"type\\\":\\\"response\\\"}],\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\"}\",\"createTime\":1700132069000,\"id\":29,\"isCheck\":1,\"updateTime\":1705811476000,\"userName\":\"test\"},{\"avatar\":\"http://cdn.kuailemao.lielfw.cn/articleCover/Sara11676693014447852.png\",\"conversation\":\"{\\\"content\\\":[{\\\"content\\\":\\\"前端路由的保活是什么意思？\\\",\\\"type\\\":\\\"question\\\"},{\\\"content\\\":\\\"\\\\\\\"前端路由的保活\\\\\\\"主要是针对SPA（单页应用）中的一个重要概念。在单页应用中，当跳转到新的路由地址时，之前的组件会被卸载，新的页面组件会重新加载，这就好像在不刷新网页的情况下对页面进行了重新渲染。而这个过程可能会涉及到耗时较长的异步操作，例如请求数据等。\\\\n\\\\n\\\\\\\"保活\\\\\\\"（也常称为 \\\\\\\"keep alive\\\\\\\"）则是指保持这些组件的状态，而不是每次都进行重新加载。这样可以避免不必要的重新加载，提高应用性能，改善用户体验。 在Vue.js这样的前端框架中，它通过`<keep-alive>`组件提供了保活的功能。\\\\n\\\\n例如，用户在一个列表页浏览到第10页，点击某个项目进入详情页，然后再返回列表页，期望的行为应该是回到第10页，而不是重新加载列表页。如果没有使用保活，那么在返回列表页时会重新加载，展示的可能是第1页的内容。但如果使用了保活，那么用户的浏览状态（第10页）就可以被保持住。\\\\n\\\\n注意并不是所有的情况下都需要使用保活，比如一些数据必须保持最新状态的页面，就不适合使用这个功能。在不需要保持状态的页面使用保活，可能会导致数据过期或不一致。\\\",\\\"type\\\":\\\"response\\\"}],\\\"model\\\":\\\"gpt-4\\\"}\",\"createTime\":1700181466000,\"id\":30,\"isCheck\":1,\"updateTime\":1705811721000,\"userName\":\"test\"}],\"msg\":\"success\"}', '/chatGpt/back/list', 8, '后台聊天列表', '2024-03-28 23:51:13', '2024-03-28 23:51:13', 0);
INSERT INTO `sys_log` VALUES (3062, '评论管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.CommentController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"commentContent\":\"支持\",\"commentUserName\":\"seaflows\",\"createTime\":1710392394000,\"id\":60,\"isCheck\":1,\"type\":1,\"typeId\":42,\"updateTime\":1710392394000},{\"commentContent\":\"这是一个子评论测试\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1710392432000,\"id\":61,\"isCheck\":1,\"parentId\":60,\"replyId\":60,\"type\":1,\"typeId\":42,\"updateTime\":1710392432000},{\"commentContent\":\"孙子评论测试\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1710392468000,\"id\":62,\"isCheck\":1,\"parentId\":60,\"replyId\":61,\"type\":1,\"typeId\":42,\"updateTime\":1710392468000},{\"commentContent\":\"堂吉诃德鸭鸭\",\"commentUserName\":\"seaflows\",\"createTime\":1711633770000,\"id\":63,\"isCheck\":1,\"type\":1,\"typeId\":43,\"updateTime\":1711633770000},{\"commentContent\":\"超可爱的鸭鸭\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1711633790000,\"id\":64,\"isCheck\":1,\"parentId\":63,\"replyId\":63,\"type\":1,\"typeId\":43,\"updateTime\":1711633790000}],\"msg\":\"success\"}', '/comment/back/list', 12, '后台评论列表', '2024-03-28 23:51:14', '2024-03-28 23:51:14', 0);
INSERT INTO `sys_log` VALUES (3063, '收藏管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.FavoriteController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"content\":\"## 这是一篇关于角叫鸭的介绍\\n![](http://127.0.0.1:9005/test/article/articleImage/834ae260-85f7-4ec2-b064-206c89b3e706.jpg)\\n*在南美大陆上，有一种非常神秘的动物正等着我们探访。它身为雁鸭，身材体貌却迥异同类；鸟喙如鸡、头生硬角，还天生一副大嗓门——它就是鸟类独一档，人送外号“击剑贵族”与“喧嚣狂徒”的角叫鸭。*\\n\\n在热气蒸腾、雨林密布的南美洲大地上，有一种非常神秘的动物正在等待着我们的探访。\\n\\n它身为雁鸭类，身材体貌却迥异同类；鸟喙如鸡、头生硬角，宛若深海垂钓的大嘴鮟鱇，容貌怪异至极。\\n\\n它健走爱游水，却全身覆羽，轻盈善飞，骨骼含气度堪称鸟类之最！它拥有极高的语言天赋，不仅自创了一套“鸟语”，还天生一副大嗓门，其音发出后，相隔三公里亦清晰可闻。\\n\\n它就是南美鸟类独一档，人送外号“击剑贵族”与“喧嚣狂徒”的角叫鸭。\\n\\n<div align=\\\"center\\\">\\n  <iframe src=\\\"//player.bilibili.com/player.html?aid=644729401&bvid=BV1FY4y1F7Kz&cid=810072630&p=0&autoplay=0\\\" scrolling=\\\"no\\\" border=\\\"0\\\" frameborder=\\\"no\\\" framespacing=\\\"0\\\" allowfullscreen=\\\"false\\\"  height=\\\"498\\\" width=\\\"510\\\"> </iframe>\\n</div>\\n\\n\\n一石四鸟，生活无忧\\n角叫鸭为南美洲特有物种，为雁形目叫鸭科下独一属独一种之同名物种，其学名为Anhima cornuta，由“生物分类学之父”卡尔·林奈爵士亲自操刀命名。\\n\\n角叫鸭虽属留鸟，但活动范围甚广，广泛分布于南美大陆的中北部区域，栖地涵盖玻利维亚、巴西、哥伦比亚、秘鲁、巴拉圭和委内瑞拉等国，甚至在加勒比海诸国甚或美国、墨西哥都能看见其身影。\\n\\n它们惯常栖息于热带雨林、沼泽、河谷与平原草地地带，一般栖息高度不会超过海拔800米，为典型的“再往上住就高反给你看”一族。\",\"createTime\":1711639590000,\"id\":168,\"isCheck\":1,\"type\":1,\"userName\":\"seaflows\"}],\"msg\":\"success\"}', '/favorite/back/list', 8, '后台收藏列表', '2024-03-28 23:51:33', '2024-03-28 23:51:33', 0);
INSERT INTO `sys_log` VALUES (3064, '分类管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.CategoryController.listArticleCategory()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":1,\"categoryName\":\"鸵鸟科\",\"createTime\":1710330928000,\"id\":6,\"updateTime\":1710330928000},{\"articleCount\":1,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391589000,\"id\":7,\"updateTime\":1710391589000},{\"articleCount\":1,\"categoryName\":\"鸟类\",\"createTime\":1711631912000,\"id\":8,\"updateTime\":1711631912000}],\"msg\":\"success\"}', '/category/back/list', 14, '获取分类列表', '2024-03-28 23:53:31', '2024-03-28 23:53:31', 0);
INSERT INTO `sys_log` VALUES (3065, '标签管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.TagController.listArticleTag()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":0,\"createTime\":1710331975000,\"id\":14,\"tagName\":\"鸵鸟目\",\"updateTime\":1710331977000},{\"articleCount\":1,\"createTime\":1710336543000,\"id\":15,\"tagName\":\"鸵鸟科\",\"updateTime\":1710391295000},{\"articleCount\":1,\"createTime\":1710336559000,\"id\":16,\"tagName\":\"鸵鸟属\",\"updateTime\":1710336559000},{\"articleCount\":1,\"createTime\":1710391642000,\"id\":17,\"tagName\":\"鹬鸵科\",\"updateTime\":1710391642000},{\"articleCount\":2,\"createTime\":1711631926000,\"id\":18,\"tagName\":\"bird\",\"updateTime\":1711631926000}],\"msg\":\"success\"}', '/tag/back/list', 15, '获取标签列表', '2024-03-28 23:53:34', '2024-03-28 23:53:34', 0);
INSERT INTO `sys_log` VALUES (3066, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.listArticle()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/96bedb1b-a93a-4a4d-bffe-a01074917051.jpg\",\"articleTitle\":\"角叫鸭\",\"articleType\":1,\"categoryId\":8,\"categoryName\":\"鸟类\",\"createTime\":1711632379000,\"id\":43,\"isTop\":0,\"status\":1,\"tagsName\":[\"bird\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":3},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/296fd6a7-c585-4f11-bf5f-43eaee733d91.jpg\",\"articleTitle\":\"test\",\"articleType\":1,\"categoryId\":7,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391695000,\"id\":42,\"isTop\":1,\"status\":1,\"tagsName\":[\"鹬鸵科\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":1},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg\",\"articleTitle\":\"非洲鸵鸟\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1710385962000,\"id\":41,\"isTop\":0,\"status\":1,\"tagsName\":[\"鸵鸟科\",\"鸵鸟属\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":3}],\"msg\":\"success\"}', '/article/back/list', 78, '获取所有的文章列表', '2024-04-13 13:05:15', '2024-04-13 13:05:15', 0);
INSERT INTO `sys_log` VALUES (3067, '标签管理', '新增', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.TagController.addTag()', '[{\"id\":19,\"tagName\":\"哔哔鸟\"}]', 'PUT', NULL, '{\"code\":200,\"msg\":\"success\"}', '/tag', 6, '新增标签-文章列表', '2024-04-13 13:05:41', '2024-04-13 13:05:41', 0);
INSERT INTO `sys_log` VALUES (3068, '文章管理', '上传图片', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.uploadArticleCover()', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@76197ae0]', 'POST', NULL, '{\"code\":200,\"data\":\"http://127.0.0.1:9005/test/article/articleCover/23ab34cb-3090-4d05-b5be-ff9537a96c55.jpg\",\"msg\":\"success\"}', '/article/upload/articleCover', 144, '上传文章封面', '2024-04-13 13:06:31', '2024-04-13 13:06:31', 0);
INSERT INTO `sys_log` VALUES (3069, '文章管理', '新增', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.publish()', '[{\"articleContent\":\"# 一篇为了测试es发表的测试文章\\n## test again\\n### 问什么测不出来啊！！！！！！\",\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/23ab34cb-3090-4d05-b5be-ff9537a96c55.jpg\",\"articleTitle\":\"测试\",\"articleType\":1,\"categoryId\":6,\"isTop\":0,\"status\":1,\"tagId\":[19]}]', 'POST', NULL, '{\"code\":200,\"msg\":\"success\"}', '/article/publish', 18, '发布文章', '2024-04-13 13:06:31', '2024-04-13 13:06:31', 0);
INSERT INTO `sys_log` VALUES (3070, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.listArticle()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/23ab34cb-3090-4d05-b5be-ff9537a96c55.jpg\",\"articleTitle\":\"测试\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1712984791000,\"id\":44,\"isTop\":0,\"status\":1,\"tagsName\":[\"哔哔鸟\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/96bedb1b-a93a-4a4d-bffe-a01074917051.jpg\",\"articleTitle\":\"角叫鸭\",\"articleType\":1,\"categoryId\":8,\"categoryName\":\"鸟类\",\"createTime\":1711632379000,\"id\":43,\"isTop\":0,\"status\":1,\"tagsName\":[\"bird\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":3},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/296fd6a7-c585-4f11-bf5f-43eaee733d91.jpg\",\"articleTitle\":\"test\",\"articleType\":1,\"categoryId\":7,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391695000,\"id\":42,\"isTop\":1,\"status\":1,\"tagsName\":[\"鹬鸵科\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":1},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg\",\"articleTitle\":\"非洲鸵鸟\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1710385962000,\"id\":41,\"isTop\":0,\"status\":1,\"tagsName\":[\"鸵鸟科\",\"鸵鸟属\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":2}],\"msg\":\"success\"}', '/article/back/list', 21, '获取所有的文章列表', '2024-04-13 13:06:37', '2024-04-13 13:06:37', 0);
INSERT INTO `sys_log` VALUES (3071, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.listArticle()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/23ab34cb-3090-4d05-b5be-ff9537a96c55.jpg\",\"articleTitle\":\"测试\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1712984791000,\"id\":44,\"isTop\":0,\"status\":1,\"tagsName\":[\"哔哔鸟\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/96bedb1b-a93a-4a4d-bffe-a01074917051.jpg\",\"articleTitle\":\"角叫鸭\",\"articleType\":1,\"categoryId\":8,\"categoryName\":\"鸟类\",\"createTime\":1711632379000,\"id\":43,\"isTop\":0,\"status\":1,\"tagsName\":[\"bird\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":3},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/296fd6a7-c585-4f11-bf5f-43eaee733d91.jpg\",\"articleTitle\":\"test\",\"articleType\":1,\"categoryId\":7,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391695000,\"id\":42,\"isTop\":1,\"status\":1,\"tagsName\":[\"鹬鸵科\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":1},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg\",\"articleTitle\":\"非洲鸵鸟\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1710385962000,\"id\":41,\"isTop\":0,\"status\":1,\"tagsName\":[\"鸵鸟科\",\"鸵鸟属\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":2}],\"msg\":\"success\"}', '/article/back/list', 92, '获取所有的文章列表', '2024-04-13 23:12:44', '2024-04-13 23:12:44', 0);
INSERT INTO `sys_log` VALUES (3072, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.getArticleEcho()', '[43]', 'GET', NULL, '{\"code\":200,\"data\":{\"articleContent\":\"## 这是一篇关于角叫鸭的介绍\\n![](http://127.0.0.1:9005/test/article/articleImage/834ae260-85f7-4ec2-b064-206c89b3e706.jpg)\\n*在南美大陆上，有一种非常神秘的动物正等着我们探访。它身为雁鸭，身材体貌却迥异同类；鸟喙如鸡、头生硬角，还天生一副大嗓门——它就是鸟类独一档，人送外号“击剑贵族”与“喧嚣狂徒”的角叫鸭。*\\n\\n在热气蒸腾、雨林密布的南美洲大地上，有一种非常神秘的动物正在等待着我们的探访。\\n\\n它身为雁鸭类，身材体貌却迥异同类；鸟喙如鸡、头生硬角，宛若深海垂钓的大嘴鮟鱇，容貌怪异至极。\\n\\n它健走爱游水，却全身覆羽，轻盈善飞，骨骼含气度堪称鸟类之最！它拥有极高的语言天赋，不仅自创了一套“鸟语”，还天生一副大嗓门，其音发出后，相隔三公里亦清晰可闻。\\n\\n它就是南美鸟类独一档，人送外号“击剑贵族”与“喧嚣狂徒”的角叫鸭。\\n\\n<div align=\\\"center\\\">\\n  <iframe src=\\\"//player.bilibili.com/player.html?aid=644729401&bvid=BV1FY4y1F7Kz&cid=810072630&p=0&autoplay=0\\\" scrolling=\\\"no\\\" border=\\\"0\\\" frameborder=\\\"no\\\" framespacing=\\\"0\\\" allowfullscreen=\\\"false\\\"  height=\\\"498\\\" width=\\\"510\\\"> </iframe>\\n</div>\\n\\n\\n一石四鸟，生活无忧\\n角叫鸭为南美洲特有物种，为雁形目叫鸭科下独一属独一种之同名物种，其学名为Anhima cornuta，由“生物分类学之父”卡尔·林奈爵士亲自操刀命名。\\n\\n角叫鸭虽属留鸟，但活动范围甚广，广泛分布于南美大陆的中北部区域，栖地涵盖玻利维亚、巴西、哥伦比亚、秘鲁、巴拉圭和委内瑞拉等国，甚至在加勒比海诸国甚或美国、墨西哥都能看见其身影。\\n\\n它们惯常栖息于热带雨林、沼泽、河谷与平原草地地带，一般栖息高度不会超过海拔800米，为典型的“再往上住就高反给你看”一族。\",\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/96bedb1b-a93a-4a4d-bffe-a01074917051.jpg\",\"articleTitle\":\"角叫鸭\",\"articleType\":1,\"categoryId\":8,\"id\":43,\"isTop\":0,\"status\":1,\"tagId\":[18]},\"msg\":\"success\"}', '/article/back/echo/43', 10, '回显文章数据', '2024-04-13 23:13:06', '2024-04-13 23:13:06', 0);
INSERT INTO `sys_log` VALUES (3073, '文章管理', '搜索', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.searchArticle()', '[{\"status\":1}]', 'POST', NULL, '{\"code\":200,\"data\":[{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg\",\"articleTitle\":\"非洲鸵鸟\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1710385962000,\"id\":41,\"isTop\":0,\"status\":1,\"tagsName\":[\"鸵鸟科\",\"鸵鸟属\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":2},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/296fd6a7-c585-4f11-bf5f-43eaee733d91.jpg\",\"articleTitle\":\"test\",\"articleType\":1,\"categoryId\":7,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391695000,\"id\":42,\"isTop\":1,\"status\":1,\"tagsName\":[\"鹬鸵科\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":1},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/96bedb1b-a93a-4a4d-bffe-a01074917051.jpg\",\"articleTitle\":\"角叫鸭\",\"articleType\":1,\"categoryId\":8,\"categoryName\":\"鸟类\",\"createTime\":1711632379000,\"id\":43,\"isTop\":0,\"status\":1,\"tagsName\":[\"bird\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":3},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/23ab34cb-3090-4d05-b5be-ff9537a96c55.jpg\",\"articleTitle\":\"测试\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1712984791000,\"id\":44,\"isTop\":0,\"status\":1,\"tagsName\":[\"哔哔鸟\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0}],\"msg\":\"success\"}', '/article/back/search', 42, '搜索文章列表', '2024-04-13 23:13:28', '2024-04-13 23:13:28', 0);
INSERT INTO `sys_log` VALUES (3074, '文章管理', '搜索', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.searchArticle()', '[{\"status\":2}]', 'POST', NULL, '{\"code\":200,\"msg\":\"success\"}', '/article/back/search', 3, '搜索文章列表', '2024-04-13 23:13:34', '2024-04-13 23:13:34', 0);
INSERT INTO `sys_log` VALUES (3075, '文章管理', '搜索', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.searchArticle()', '[{\"status\":1}]', 'POST', NULL, '{\"code\":200,\"data\":[{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg\",\"articleTitle\":\"非洲鸵鸟\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1710385962000,\"id\":41,\"isTop\":0,\"status\":1,\"tagsName\":[\"鸵鸟科\",\"鸵鸟属\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":2},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/296fd6a7-c585-4f11-bf5f-43eaee733d91.jpg\",\"articleTitle\":\"test\",\"articleType\":1,\"categoryId\":7,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391695000,\"id\":42,\"isTop\":1,\"status\":1,\"tagsName\":[\"鹬鸵科\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":1},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/96bedb1b-a93a-4a4d-bffe-a01074917051.jpg\",\"articleTitle\":\"角叫鸭\",\"articleType\":1,\"categoryId\":8,\"categoryName\":\"鸟类\",\"createTime\":1711632379000,\"id\":43,\"isTop\":0,\"status\":1,\"tagsName\":[\"bird\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":3},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/23ab34cb-3090-4d05-b5be-ff9537a96c55.jpg\",\"articleTitle\":\"测试\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1712984791000,\"id\":44,\"isTop\":0,\"status\":1,\"tagsName\":[\"哔哔鸟\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0}],\"msg\":\"success\"}', '/article/back/search', 41, '搜索文章列表', '2024-04-13 23:13:39', '2024-04-13 23:13:39', 0);
INSERT INTO `sys_log` VALUES (3076, '文章管理', '搜索', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.searchArticle()', '[{\"categoryId\":6,\"status\":1}]', 'POST', NULL, '{\"code\":200,\"data\":[{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg\",\"articleTitle\":\"非洲鸵鸟\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1710385962000,\"id\":41,\"isTop\":0,\"status\":1,\"tagsName\":[\"鸵鸟科\",\"鸵鸟属\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":2},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/23ab34cb-3090-4d05-b5be-ff9537a96c55.jpg\",\"articleTitle\":\"测试\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1712984791000,\"id\":44,\"isTop\":0,\"status\":1,\"tagsName\":[\"哔哔鸟\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0}],\"msg\":\"success\"}', '/article/back/search', 18, '搜索文章列表', '2024-04-13 23:13:43', '2024-04-13 23:13:43', 0);
INSERT INTO `sys_log` VALUES (3077, '文章管理', '搜索', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.searchArticle()', '[{\"categoryId\":8,\"status\":1}]', 'POST', NULL, '{\"code\":200,\"data\":[{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/96bedb1b-a93a-4a4d-bffe-a01074917051.jpg\",\"articleTitle\":\"角叫鸭\",\"articleType\":1,\"categoryId\":8,\"categoryName\":\"鸟类\",\"createTime\":1711632379000,\"id\":43,\"isTop\":0,\"status\":1,\"tagsName\":[\"bird\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":3}],\"msg\":\"success\"}', '/article/back/search', 11, '搜索文章列表', '2024-04-13 23:13:49', '2024-04-13 23:13:49', 0);
INSERT INTO `sys_log` VALUES (3078, '新增分类', '新增', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.CategoryController.addCategory()', '[{\"categoryName\":\"欧亚雕鸮\",\"id\":12}]', 'PUT', NULL, '{\"code\":200,\"msg\":\"success\"}', '/category', 7, '新增分类-文章列表', '2024-05-01 20:37:56', '2024-05-01 20:37:56', 0);
INSERT INTO `sys_log` VALUES (3079, '标签管理', '新增', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.TagController.addTag()', '[{\"id\":20,\"tagName\":\"猫头鹰\"}]', 'PUT', NULL, '{\"code\":200,\"msg\":\"success\"}', '/tag', 3, '新增标签-文章列表', '2024-05-01 20:38:07', '2024-05-01 20:38:07', 0);
INSERT INTO `sys_log` VALUES (3080, '文章管理', '上传图片', 'fish', '127.0.0.1', '内网IP', 2, 'com.fish.birdProducted.controller.ArticleController.uploadArticleImage()', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@44246ae2]', 'POST', 'Cannot invoke \"com.fish.birdProducted.domain.response.ResponseResult.getCode()\" because \"responseResult\" is null', NULL, '/article/upload/articleImage', 124, NULL, '2024-05-01 20:43:57', '2024-05-01 20:43:57', 0);
INSERT INTO `sys_log` VALUES (3081, '文章管理', '上传图片', 'fish', '127.0.0.1', '内网IP', 2, 'com.fish.birdProducted.controller.ArticleController.uploadArticleImage()', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@11e71696]', 'POST', 'Cannot invoke \"com.fish.birdProducted.domain.response.ResponseResult.getCode()\" because \"responseResult\" is null', NULL, '/article/upload/articleImage', 5, NULL, '2024-05-01 20:44:08', '2024-05-01 20:44:08', 0);
INSERT INTO `sys_log` VALUES (3082, '文章管理', '上传图片', 'fish', '127.0.0.1', '内网IP', 2, 'com.fish.birdProducted.controller.ArticleController.uploadArticleImage()', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@57df4a46]', 'POST', 'Cannot invoke \"com.fish.birdProducted.domain.response.ResponseResult.getCode()\" because \"responseResult\" is null', NULL, '/article/upload/articleImage', 4, NULL, '2024-05-01 20:44:22', '2024-05-01 20:44:22', 0);
INSERT INTO `sys_log` VALUES (3083, '文章管理', '上传图片', 'fish', '127.0.0.1', '内网IP', 1, 'com.fish.birdProducted.controller.ArticleController.uploadArticleCover()', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@718dc9d4]', 'POST', NULL, '{\"code\":500,\"msg\":\"failure\"}', '/article/upload/articleCover', 17, '上传文章封面', '2024-05-01 20:48:12', '2024-05-01 20:48:12', 0);
INSERT INTO `sys_log` VALUES (3084, '文章管理', '上传图片', 'fish', '127.0.0.1', '内网IP', 1, 'com.fish.birdProducted.controller.ArticleController.uploadArticleCover()', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@2aeb2d1d]', 'POST', NULL, '{\"code\":500,\"msg\":\"failure\"}', '/article/upload/articleCover', 97, '上传文章封面', '2024-05-01 20:48:43', '2024-05-01 20:48:43', 0);
INSERT INTO `sys_log` VALUES (3085, '文章管理', '上传图片', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.uploadArticleCover()', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@417ec86]', 'POST', NULL, '{\"code\":200,\"data\":\"http://127.0.0.1:9005/test/article/articleCover/0f3b28a7-bb47-4caa-a485-d841407d81f8.jpg\",\"msg\":\"success\"}', '/article/upload/articleCover', 14, '上传文章封面', '2024-05-01 20:49:43', '2024-05-01 20:49:43', 0);
INSERT INTO `sys_log` VALUES (3086, '文章管理', '新增', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.publish()', '[{\"articleContent\":\"我们曾经给大家介绍过Flaco。\\n它是一只雄性的欧亚雕鸮，这种鸟分布在欧亚大陆上，是世界上最大的猫头鹰品种之一。\\n2010年，Flaco出生在美国北卡罗莱纳州的一个鸟类公园里，不到一岁，它就被送到了位于纽约的中央公园动物园。\\n图片\\n![flaco1](https://inews.gtimg.com/news_bt/OjjCAQDo7mYO9tbCS02jIuPfX6I1M_QadDEhxUdcN9h_8AA/641)\\n\\n（动物园里的Flaco）\\nFlaco在这里生活了12年，直到2023年的2月，有人破坏了动物园的防护网，放跑了Flaco。\\nFlaco逃跑之后，很快就引起了公众和媒体的关注，一方面是因为人们对它很好奇，另一方面，人们也很担心它。\\n因为Flaco并不是北美本土物种，更何况在动物园里被囚禁了12年，人们担心它能否在野外生活下去。\\n图片\\n（逃跑一周时的Flaco，已经饿瘦了）\\n幸好在逃跑一周后，Flaco的血脉觉醒，很快就掌握了捕猎技巧。\\n从这之后，动物园再也抓不到Flaco了……\\n他们试过食物诱捕，试过用同类的声音呼唤，但品尝到自由滋味的Flaco再也不肯回到笼子里了。\\n![不肯进笼子](https://inews.gtimg.com/news_bt/OXAbffCx0no6ffPYTw2yxVQilkODo8AjdaAY3D1BJdTWcAA/641)\\n\\n（不肯进笼子的Flaco）\\n看到Flaco在野外过得这么开心，不少网友为它请愿，希望它能继续在野外生活。\\n动物园也就顺水推舟，承诺暂停抓捕Flaco，让它继续留在野外，并且会保持监视，如果出现了意外，动物园会立刻对它实施救助。\\n\\n（野外的Flaco）\\n接下来的一年，Flaco确实过得非常惬意。\\n它生活在中央公园附近的屋顶、水塔或者其它建筑上，避开行人和车辆，\\n\\n（在栏杆上休息的Flaco）\\n每当它出现在人们的视野当中，都会成为人们瞩目的焦点。\\n\\n（正在拍摄Flaco的观鸟者们）\\n在纽约这个地方，Flaco从来不缺吃喝。\\n凭借着高超的捕猎技巧下，它甚至过得比在动物园里还要健康，漂亮了。\\n\\n（捕猎成功的Flaco）\\n去年11月，Flaco甚至离开了它最熟悉的中央公园，开始探索整个城市了。它有时候跑到曼哈顿东村的雕塑花园看看，有时候飞到下东区逛逛，\\n\\n（流浪中的Flaco）\\n一周后，它又回到了中央公园附近，挨家挨户地守在人类的窗前，透过小小的窗子，观察人类的生活。\\n这次，轮到它来看了……\\n\\n（好奇的Flaco）\\n有人猜，Flaco可能是寂寞了。\\n因为11月前后是欧亚雕鸮的发情季节，Flaco四处流浪也许是在寻找爱情，可惜美国境内没有野生的欧亚雕鸮，所以这注定是一场无疾而终的爱情流浪……\\n\\n（孤独的Flaco）\\n就这样，全纽约的观鸟爱好者关注着Flaco的一举一动，替它欢喜，替它遗憾……\\n人们的心随着它的飞行轨迹，被牵动得七上八下。\\n到了2024年的2月2日，在它越狱一周年后，连《纽约时报》都发文，庆祝这个值得纪念的日子。\\n![纽约时报](https://inews.gtimg.com/news_bt/OZFVD4McVRMLJI1lq_jBMByr99gKwPU6SNch_4AKjoqSQAA/641)\\n\\n（《纽约时报》标题）\\n然而意外却突然发生了……\\n2月23日，距离它“越狱”一周年还不到一个月，Flaco被人们发现倒在街边，伤势严重。\\n居民报警后，附近的野鸟基金会立刻赶来提供帮助，可不久之后，Flaco还是离开了这个世界……\\n![flaco](https://inews.gtimg.com/news_bt/O285xrnkKS6e65fKHEv_bJw-2_scU8RL-aelRN00JLVswAA/641)\\n\\n（Flaco）\\n基金会报告说，Flaco的胸部和右眼受伤，根据推测，它可能是在飞行期间与建筑物相撞，因碰撞或摔落地面而受伤的。\\n目前Flaco的尸体已经被送走进行尸检，确认造成它碰撞的原因，是禽流感、老鼠药中毒、铅中毒还是其它什么……\\n可不管怎么样，Flaco的离世已经是无法改变的事实了，这个消息也让网友们十分悲痛。每个热爱它的网友，都发了一段关于它的照片或者视频，向它表示悼念：\\nFlaco好好休息，我们会想念你的。\\n\\n我们爱你Flaco，我们会很想你的。\\n\\n安息吧，亲爱的Flaco。\\n你是那么美丽，给我们带来了欢乐，也给我们带来了一个伟大的励志生存故事。很高兴你享受了一年的自由，真希望你能再飞几年……\\n我们都会想你的！\\n\\n自从Flaco“越狱”之后，人们给了它许多称呼，\\n有人说它是“一个成功为自己生命写下第二幕的亡命英雄”，也有人说“随着时间的推移，Flaco成为了自由和坚韧的象征”。\\n\\n这大概也是人们如此怀念它的理由了。\\n在一片钢筋混凝土组成的城市森林中，肆意翱翔的Flaco似乎成了人类与自然最后的连接。\\nFlaco承载着人们对自由的向往，也许它不再能继续飞翔了，但它至少曾经自由过，也没有死在牢笼的禁锢之下。\\nR.I.P.  自由的Flaco。\\n![安息](https://inews.gtimg.com/news_bt/OT6SF1e8s_HlmUl5MJipGcGNvJta0xAl4dYSSAoNzHOOQAA/641)\\n\\n（Flaco）\",\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/0f3b28a7-bb47-4caa-a485-d841407d81f8.jpg\",\"articleTitle\":\"猫头鹰Flaco\",\"articleType\":1,\"categoryId\":12,\"isTop\":0,\"status\":1,\"tagId\":[20]}]', 'POST', NULL, '{\"code\":200,\"msg\":\"success\"}', '/article/publish', 146, '发布文章', '2024-05-01 20:49:43', '2024-05-01 20:49:43', 0);
INSERT INTO `sys_log` VALUES (3087, '留言管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.LeaveWordController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"content\":\"### 留言bug 最后测试\",\"createTime\":1705382974000,\"id\":27,\"isCheck\":1,\"updateTime\":1705383023000,\"userName\":\"test\"},{\"content\":\"Markdown 视频\\n由于 Markdown 支持 HTML 语法，会对相应的标签进行解析。所以我们可以通过 HTML 语法将视频放入到我们的 Markdown 中。\\n\\n用法如下：\\n\\n<iframe height=498 width=510 src=\\\"视频地址\\\">\\n1\\n其中 height 和 width 是 HTML 中的属性可以设置视频的大小，我们也可以使用 HTML 中的其他属性对插入视频进行相应设置。\\n\\n本地插入\\n在 src 中加入本地视频所对应的路径即可。\\n\\n<iframe height=498 width=510 src=\\\"本地视频路径\\\">\\n1\\n在线插入\\n在 src 中加入视频链接即可。\\n\\n<iframe height=498 width=510 src=\\\"在线视频链接\\\">\",\"createTime\":1711640995000,\"id\":28,\"isCheck\":1,\"updateTime\":1711640995000,\"userName\":\"seaflows\"}],\"msg\":\"success\"}', '/leaveWord/back/list', 12, '后台留言列表', '2024-05-01 20:50:37', '2024-05-01 20:50:37', 0);
INSERT INTO `sys_log` VALUES (3088, '标签管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.TagController.listArticleTag()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":0,\"createTime\":1710331975000,\"id\":14,\"tagName\":\"鸵鸟目\",\"updateTime\":1710331977000},{\"articleCount\":1,\"createTime\":1710336543000,\"id\":15,\"tagName\":\"鸵鸟科\",\"updateTime\":1710391295000},{\"articleCount\":1,\"createTime\":1710336559000,\"id\":16,\"tagName\":\"鸵鸟属\",\"updateTime\":1710336559000},{\"articleCount\":1,\"createTime\":1710391642000,\"id\":17,\"tagName\":\"鹬鸵科\",\"updateTime\":1710391642000},{\"articleCount\":2,\"createTime\":1711631926000,\"id\":18,\"tagName\":\"bird\",\"updateTime\":1711631926000},{\"articleCount\":2,\"createTime\":1712984741000,\"id\":19,\"tagName\":\"哔哔鸟\",\"updateTime\":1712984741000},{\"articleCount\":1,\"createTime\":1714567087000,\"id\":20,\"tagName\":\"猫头鹰\",\"updateTime\":1714567087000}],\"msg\":\"success\"}', '/tag/back/list', 7, '获取标签列表', '2024-05-01 20:50:40', '2024-05-01 20:50:40', 0);
INSERT INTO `sys_log` VALUES (3089, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 2, 'com.fish.birdProducted.controller.ArticleController.listArticle()', '[]', 'GET', 'Cannot invoke \"com.fish.birdProducted.domain.entity.User.getUsername()\" because the return value of \"com.fish.birdProducted.mapper.UserMapper.selectById(java.io.Serializable)\" is null', NULL, '/article/back/list', 10, NULL, '2024-05-01 20:50:43', '2024-05-01 20:50:43', 0);
INSERT INTO `sys_log` VALUES (3090, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 2, 'com.fish.birdProducted.controller.ArticleController.listArticle()', '[]', 'GET', 'Cannot invoke \"com.fish.birdProducted.domain.entity.User.getUsername()\" because the return value of \"com.fish.birdProducted.mapper.UserMapper.selectById(java.io.Serializable)\" is null', NULL, '/article/back/list', 8, NULL, '2024-05-01 20:51:03', '2024-05-01 20:51:03', 0);
INSERT INTO `sys_log` VALUES (3091, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 2, 'com.fish.birdProducted.controller.ArticleController.listArticle()', '[]', 'GET', 'Cannot invoke \"com.fish.birdProducted.domain.entity.User.getUsername()\" because the return value of \"com.fish.birdProducted.mapper.UserMapper.selectById(java.io.Serializable)\" is null', NULL, '/article/back/list', 4, NULL, '2024-05-01 21:47:58', '2024-05-01 21:47:58', 0);
INSERT INTO `sys_log` VALUES (3092, '留言管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.LeaveWordController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"content\":\"### 留言bug 最后测试\",\"createTime\":1705382974000,\"id\":27,\"isCheck\":1,\"updateTime\":1705383023000,\"userName\":\"test\"},{\"content\":\"Markdown 视频\\n由于 Markdown 支持 HTML 语法，会对相应的标签进行解析。所以我们可以通过 HTML 语法将视频放入到我们的 Markdown 中。\\n\\n用法如下：\\n\\n<iframe height=498 width=510 src=\\\"视频地址\\\">\\n1\\n其中 height 和 width 是 HTML 中的属性可以设置视频的大小，我们也可以使用 HTML 中的其他属性对插入视频进行相应设置。\\n\\n本地插入\\n在 src 中加入本地视频所对应的路径即可。\\n\\n<iframe height=498 width=510 src=\\\"本地视频路径\\\">\\n1\\n在线插入\\n在 src 中加入视频链接即可。\\n\\n<iframe height=498 width=510 src=\\\"在线视频链接\\\">\",\"createTime\":1711640995000,\"id\":28,\"isCheck\":1,\"updateTime\":1711640995000,\"userName\":\"seaflows\"}],\"msg\":\"success\"}', '/leaveWord/back/list', 2, '后台留言列表', '2024-05-01 21:48:18', '2024-05-01 21:48:18', 0);
INSERT INTO `sys_log` VALUES (3093, '标签管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.TagController.listArticleTag()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":0,\"createTime\":1710331975000,\"id\":14,\"tagName\":\"鸵鸟目\",\"updateTime\":1710331977000},{\"articleCount\":1,\"createTime\":1710336543000,\"id\":15,\"tagName\":\"鸵鸟科\",\"updateTime\":1710391295000},{\"articleCount\":1,\"createTime\":1710336559000,\"id\":16,\"tagName\":\"鸵鸟属\",\"updateTime\":1710336559000},{\"articleCount\":1,\"createTime\":1710391642000,\"id\":17,\"tagName\":\"鹬鸵科\",\"updateTime\":1710391642000},{\"articleCount\":2,\"createTime\":1711631926000,\"id\":18,\"tagName\":\"bird\",\"updateTime\":1711631926000},{\"articleCount\":2,\"createTime\":1712984741000,\"id\":19,\"tagName\":\"哔哔鸟\",\"updateTime\":1712984741000},{\"articleCount\":1,\"createTime\":1714567087000,\"id\":20,\"tagName\":\"猫头鹰\",\"updateTime\":1714567087000}],\"msg\":\"success\"}', '/tag/back/list', 4, '获取标签列表', '2024-05-01 21:48:21', '2024-05-01 21:48:21', 0);
INSERT INTO `sys_log` VALUES (3094, '分类管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.CategoryController.listArticleCategory()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCount\":2,\"categoryName\":\"鸵鸟科\",\"createTime\":1710330928000,\"id\":6,\"updateTime\":1710330928000},{\"articleCount\":1,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391589000,\"id\":7,\"updateTime\":1710391589000},{\"articleCount\":1,\"categoryName\":\"鸟类\",\"createTime\":1711631912000,\"id\":8,\"updateTime\":1711631912000},{\"articleCount\":1,\"categoryName\":\"testCate\",\"createTime\":1713598723000,\"id\":11,\"updateTime\":1713598723000},{\"articleCount\":1,\"categoryName\":\"欧亚雕鸮\",\"createTime\":1714567076000,\"id\":12,\"updateTime\":1714567076000}],\"msg\":\"success\"}', '/category/back/list', 4, '获取分类列表', '2024-05-01 21:48:23', '2024-05-01 21:48:23', 0);
INSERT INTO `sys_log` VALUES (3095, '收藏管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.FavoriteController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"content\":\"## 这是一篇关于角叫鸭的介绍\\n![](http://127.0.0.1:9005/test/article/articleImage/834ae260-85f7-4ec2-b064-206c89b3e706.jpg)\\n*在南美大陆上，有一种非常神秘的动物正等着我们探访。它身为雁鸭，身材体貌却迥异同类；鸟喙如鸡、头生硬角，还天生一副大嗓门——它就是鸟类独一档，人送外号“击剑贵族”与“喧嚣狂徒”的角叫鸭。*\\n\\n在热气蒸腾、雨林密布的南美洲大地上，有一种非常神秘的动物正在等待着我们的探访。\\n\\n它身为雁鸭类，身材体貌却迥异同类；鸟喙如鸡、头生硬角，宛若深海垂钓的大嘴鮟鱇，容貌怪异至极。\\n\\n它健走爱游水，却全身覆羽，轻盈善飞，骨骼含气度堪称鸟类之最！它拥有极高的语言天赋，不仅自创了一套“鸟语”，还天生一副大嗓门，其音发出后，相隔三公里亦清晰可闻。\\n\\n它就是南美鸟类独一档，人送外号“击剑贵族”与“喧嚣狂徒”的角叫鸭。\\n\\n<div align=\\\"center\\\">\\n  <iframe src=\\\"//player.bilibili.com/player.html?aid=644729401&bvid=BV1FY4y1F7Kz&cid=810072630&p=0&autoplay=0\\\" scrolling=\\\"no\\\" border=\\\"0\\\" frameborder=\\\"no\\\" framespacing=\\\"0\\\" allowfullscreen=\\\"false\\\"  height=\\\"498\\\" width=\\\"510\\\"> </iframe>\\n</div>\\n\\n\\n一石四鸟，生活无忧\\n角叫鸭为南美洲特有物种，为雁形目叫鸭科下独一属独一种之同名物种，其学名为Anhima cornuta，由“生物分类学之父”卡尔·林奈爵士亲自操刀命名。\\n\\n角叫鸭虽属留鸟，但活动范围甚广，广泛分布于南美大陆的中北部区域，栖地涵盖玻利维亚、巴西、哥伦比亚、秘鲁、巴拉圭和委内瑞拉等国，甚至在加勒比海诸国甚或美国、墨西哥都能看见其身影。\\n\\n它们惯常栖息于热带雨林、沼泽、河谷与平原草地地带，一般栖息高度不会超过海拔800米，为典型的“再往上住就高反给你看”一族。\",\"createTime\":1711639590000,\"id\":168,\"isCheck\":1,\"type\":1,\"userName\":\"seaflows\"}],\"msg\":\"success\"}', '/favorite/back/list', 3, '后台收藏列表', '2024-05-01 21:48:25', '2024-05-01 21:48:25', 0);
INSERT INTO `sys_log` VALUES (3096, '评论管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.CommentController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"commentContent\":\"支持\",\"commentUserName\":\"seaflows\",\"createTime\":1710392394000,\"id\":60,\"isCheck\":1,\"type\":1,\"typeId\":42,\"updateTime\":1710392394000},{\"commentContent\":\"这是一个子评论测试\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1710392432000,\"id\":61,\"isCheck\":1,\"parentId\":60,\"replyId\":60,\"type\":1,\"typeId\":42,\"updateTime\":1710392432000},{\"commentContent\":\"孙子评论测试\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1710392468000,\"id\":62,\"isCheck\":1,\"parentId\":60,\"replyId\":61,\"type\":1,\"typeId\":42,\"updateTime\":1710392468000},{\"commentContent\":\"堂吉诃德鸭鸭\",\"commentUserName\":\"seaflows\",\"createTime\":1711633770000,\"id\":63,\"isCheck\":1,\"type\":1,\"typeId\":43,\"updateTime\":1711633770000},{\"commentContent\":\"超可爱的鸭鸭\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1711633790000,\"id\":64,\"isCheck\":1,\"parentId\":63,\"replyId\":63,\"type\":1,\"typeId\":43,\"updateTime\":1711633790000},{\"commentContent\":\"ceshi\",\"commentUserName\":\"seaflows\",\"createTime\":1714566743000,\"id\":65,\"isCheck\":1,\"type\":1,\"typeId\":45,\"updateTime\":1714566743000}],\"msg\":\"success\"}', '/comment/back/list', 4, '后台评论列表', '2024-05-01 21:48:27', '2024-05-01 21:48:27', 0);
INSERT INTO `sys_log` VALUES (3097, '聊天管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ChatGptController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"avatar\":\"https://s21.ax1x.com/2024/03/13/pFc3w1U.jpg\",\"conversation\":\"{\\\"content\\\":[{\\\"content\\\":\\\"你好\\\",\\\"type\\\":\\\"question\\\"},{\\\"content\\\":\\\"你好！有什么我可以帮助你的呢？\\\",\\\"type\\\":\\\"response\\\"}],\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\"}\",\"createTime\":1700132069000,\"id\":29,\"isCheck\":1,\"updateTime\":1705811476000,\"userName\":\"test\"},{\"avatar\":\"https://s21.ax1x.com/2024/03/13/pFc3w1U.jpg\",\"conversation\":\"{\\\"content\\\":[{\\\"content\\\":\\\"前端路由的保活是什么意思？\\\",\\\"type\\\":\\\"question\\\"},{\\\"content\\\":\\\"\\\\\\\"前端路由的保活\\\\\\\"主要是针对SPA（单页应用）中的一个重要概念。在单页应用中，当跳转到新的路由地址时，之前的组件会被卸载，新的页面组件会重新加载，这就好像在不刷新网页的情况下对页面进行了重新渲染。而这个过程可能会涉及到耗时较长的异步操作，例如请求数据等。\\\\n\\\\n\\\\\\\"保活\\\\\\\"（也常称为 \\\\\\\"keep alive\\\\\\\"）则是指保持这些组件的状态，而不是每次都进行重新加载。这样可以避免不必要的重新加载，提高应用性能，改善用户体验。 在Vue.js这样的前端框架中，它通过`<keep-alive>`组件提供了保活的功能。\\\\n\\\\n例如，用户在一个列表页浏览到第10页，点击某个项目进入详情页，然后再返回列表页，期望的行为应该是回到第10页，而不是重新加载列表页。如果没有使用保活，那么在返回列表页时会重新加载，展示的可能是第1页的内容。但如果使用了保活，那么用户的浏览状态（第10页）就可以被保持住。\\\\n\\\\n注意并不是所有的情况下都需要使用保活，比如一些数据必须保持最新状态的页面，就不适合使用这个功能。在不需要保持状态的页面使用保活，可能会导致数据过期或不一致。\\\",\\\"type\\\":\\\"response\\\"}],\\\"model\\\":\\\"gpt-4\\\"}\",\"createTime\":1700181466000,\"id\":30,\"isCheck\":1,\"updateTime\":1705811721000,\"userName\":\"test\"}],\"msg\":\"success\"}', '/chatGpt/back/list', 10, '后台聊天列表', '2024-05-01 21:48:34', '2024-05-01 21:48:34', 0);
INSERT INTO `sys_log` VALUES (3098, '友链管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.LinkController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"background\":\"http://cdn.kuailemao.lielfw.cn/articleCover/21676717033297579.jpg\",\"createTime\":1699927987000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":1,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"test\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710329708000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":36,\"isCheck\":1,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"https://avibase.bsc-eoc.org/\",\"userName\":\"seaflows\"}],\"msg\":\"success\"}', '/link/back/list', 5, '后台友链列表', '2024-05-01 21:48:35', '2024-05-01 21:48:35', 0);
INSERT INTO `sys_log` VALUES (3099, '友链管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.LinkController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"background\":\"https://s21.ax1x.com/2024/03/13/pFc3dpT.jpg\",\"createTime\":1699927987000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":1,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"test\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710329708000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":36,\"isCheck\":1,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"https://avibase.bsc-eoc.org/\",\"userName\":\"seaflows\"}],\"msg\":\"success\"}', '/link/back/list', 2, '后台友链列表', '2024-05-01 21:49:51', '2024-05-01 21:49:51', 0);
INSERT INTO `sys_log` VALUES (3100, '聊天管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ChatGptController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"avatar\":\"https://s21.ax1x.com/2024/03/13/pFc3w1U.jpg\",\"conversation\":\"{\\\"content\\\":[{\\\"content\\\":\\\"你好\\\",\\\"type\\\":\\\"question\\\"},{\\\"content\\\":\\\"你好！有什么我可以帮助你的呢？\\\",\\\"type\\\":\\\"response\\\"}],\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\"}\",\"createTime\":1700132069000,\"id\":29,\"isCheck\":1,\"updateTime\":1705811476000,\"userName\":\"test\"},{\"avatar\":\"https://s21.ax1x.com/2024/03/13/pFc3w1U.jpg\",\"conversation\":\"{\\\"content\\\":[{\\\"content\\\":\\\"前端路由的保活是什么意思？\\\",\\\"type\\\":\\\"question\\\"},{\\\"content\\\":\\\"\\\\\\\"前端路由的保活\\\\\\\"主要是针对SPA（单页应用）中的一个重要概念。在单页应用中，当跳转到新的路由地址时，之前的组件会被卸载，新的页面组件会重新加载，这就好像在不刷新网页的情况下对页面进行了重新渲染。而这个过程可能会涉及到耗时较长的异步操作，例如请求数据等。\\\\n\\\\n\\\\\\\"保活\\\\\\\"（也常称为 \\\\\\\"keep alive\\\\\\\"）则是指保持这些组件的状态，而不是每次都进行重新加载。这样可以避免不必要的重新加载，提高应用性能，改善用户体验。 在Vue.js这样的前端框架中，它通过`<keep-alive>`组件提供了保活的功能。\\\\n\\\\n例如，用户在一个列表页浏览到第10页，点击某个项目进入详情页，然后再返回列表页，期望的行为应该是回到第10页，而不是重新加载列表页。如果没有使用保活，那么在返回列表页时会重新加载，展示的可能是第1页的内容。但如果使用了保活，那么用户的浏览状态（第10页）就可以被保持住。\\\\n\\\\n注意并不是所有的情况下都需要使用保活，比如一些数据必须保持最新状态的页面，就不适合使用这个功能。在不需要保持状态的页面使用保活，可能会导致数据过期或不一致。\\\",\\\"type\\\":\\\"response\\\"}],\\\"model\\\":\\\"gpt-4\\\"}\",\"createTime\":1700181466000,\"id\":30,\"isCheck\":1,\"updateTime\":1705811721000,\"userName\":\"test\"}],\"msg\":\"success\"}', '/chatGpt/back/list', 3, '后台聊天列表', '2024-05-01 21:57:29', '2024-05-01 21:57:29', 0);
INSERT INTO `sys_log` VALUES (3101, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 2, 'com.fish.birdProducted.controller.ArticleController.listArticle()', '[]', 'GET', 'Cannot invoke \"com.fish.birdProducted.domain.entity.User.getUsername()\" because the return value of \"com.fish.birdProducted.mapper.UserMapper.selectById(java.io.Serializable)\" is null', NULL, '/article/back/list', 8, NULL, '2024-05-02 00:19:22', '2024-05-02 00:19:22', 0);
INSERT INTO `sys_log` VALUES (3102, '留言管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.LeaveWordController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"content\":\"### 留言bug 最后测试\",\"createTime\":1705382974000,\"id\":27,\"isCheck\":1,\"updateTime\":1705383023000,\"userName\":\"test\"},{\"content\":\"Markdown 视频\\n由于 Markdown 支持 HTML 语法，会对相应的标签进行解析。所以我们可以通过 HTML 语法将视频放入到我们的 Markdown 中。\\n\\n用法如下：\\n\\n<iframe height=498 width=510 src=\\\"视频地址\\\">\\n1\\n其中 height 和 width 是 HTML 中的属性可以设置视频的大小，我们也可以使用 HTML 中的其他属性对插入视频进行相应设置。\\n\\n本地插入\\n在 src 中加入本地视频所对应的路径即可。\\n\\n<iframe height=498 width=510 src=\\\"本地视频路径\\\">\\n1\\n在线插入\\n在 src 中加入视频链接即可。\\n\\n<iframe height=498 width=510 src=\\\"在线视频链接\\\">\",\"createTime\":1711640995000,\"id\":28,\"isCheck\":1,\"updateTime\":1711640995000,\"userName\":\"seaflows\"}],\"msg\":\"success\"}', '/leaveWord/back/list', 6, '后台留言列表', '2024-05-02 00:19:55', '2024-05-02 00:19:55', 0);
INSERT INTO `sys_log` VALUES (3103, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 2, 'com.fish.birdProducted.controller.ArticleController.listArticle()', '[]', 'GET', 'Cannot invoke \"com.fish.birdProducted.domain.entity.User.getUsername()\" because the return value of \"com.fish.birdProducted.mapper.UserMapper.selectById(java.io.Serializable)\" is null', NULL, '/article/back/list', 4, NULL, '2024-05-02 00:27:55', '2024-05-02 00:27:55', 0);
INSERT INTO `sys_log` VALUES (3104, '新增分类', '新增', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.CategoryController.addCategory()', '[{\"categoryName\":\"鸮\",\"id\":13}]', 'PUT', NULL, '{\"code\":200,\"msg\":\"success\"}', '/category', 5, '新增分类-文章列表', '2024-05-11 12:57:28', '2024-05-11 12:57:28', 0);
INSERT INTO `sys_log` VALUES (3105, '文章管理', '上传图片', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.uploadArticleCover()', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@5cdd99c1]', 'POST', NULL, '{\"code\":200,\"data\":\"http://127.0.0.1:9005/test/article/articleCover/9e79806f-a92a-4610-b9ac-b3cb74fa4b87.jpg\",\"msg\":\"success\"}', '/article/upload/articleCover', 514, '上传文章封面', '2024-05-11 13:00:04', '2024-05-11 13:00:04', 0);
INSERT INTO `sys_log` VALUES (3106, '文章管理', '新增', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.publish()', '[{\"articleContent\":\"\\n# 红角鸮-外形描述\\n描述：体小(20厘米)的\\\"有耳\\\"型角鸮。眼黄色，体羽多纵纹。有棕色型和灰色型之分。与叫声有异的东方角鸮在分布上无重叠。 详细见： →西红角鸮百科 \\n\\n虹膜—黄色；嘴—角质色；脚—褐灰。\\n\\n# 红角鸮-叫声\\n叫声：为深沉单调的chook声，约三秒钟重复一次，声似蟾鸣。雌鸟叫声较雄鸟略高。 \\n\\n叫声欣赏：\\n<audio id=\\\"audio\\\" controls=\\\"\\\" preload=\\\"none\\\">\\n      <source id=\\\"mp3\\\" src=\\\"http://127.0.0.1:9005/test/article/video/%E7%BA%A2%E8%A7%92%E9%B8%AE.mp3\\\">\\n\\n# 红角鸮-地理分布\\n红角鸮的地理分布图\\n留鸟候鸟冬候鸟繁殖鸟\\n分布范围：古北界西部至中东及中亚。\\n\\n分布状况：在中国的分布极为有限。亚种pulchellus繁殖于新疆西部的天山及喀什地区。\\n![分布](https://www.ibirding.cn/birding/map/b0229.jpg!w336.jpg)\\n\\n\\n# 红角鸮-生活习性\\n习性：候鸟。纯夜行性的小型角鸮，喜有树丛的开阔原野。\\n\\n# 红角鸮-别名俗名\\n大头鹰 恨狐 横虎 呼侉鹰 老兔 猫头鹰 王哥哥 乌拉包尔－乌尔巴 夜猫子 夜食鹰\\n\\n![鸮1](https://www.ibirding.cn/birding/image/b0229.jpg!w336.jpg)\\n\\n虹膜黄色，嘴黑灰色，周围有白色，先端近黄色。脚趾基部有羽毛，灰褐色，爪子呈黑褐色。\\n\\n其他亚种：上面有更多的斑点和条纹，下体的花纹和红褐色与指名亚种相似，但底色呈灰棕色或红灰色。\\n\\n大小量度：体重75-95克；体长170-210毫米；嘴峰♂15-19毫米，♀12-20毫米；翼长119-158毫米；尾长49-75毫米；跗蹠♂24-27毫米，♀24-28毫米。（注：♂雄性；♀雌性） \\n\\n近种区别\\n\\n\\n# 视频欣赏\\n<iframe src=\\\"//player.bilibili.com/player.html?aid=1003571464&bvid=BV1wx4y167sJ&cid=1521644875&p=0&high_quality=1&danmaku=0\\\"  allowfullscreen=\\\"allowfullscreen\\\" width=\\\"100%\\\" height=\\\"500\\\" scrolling=\\\"no\\\" frameborder=\\\"0\\\" sandbox=\\\"allow-top-navigation allow-same-origin allow-forms allow-scripts\\\"> </iframe>\",\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/9e79806f-a92a-4610-b9ac-b3cb74fa4b87.jpg\",\"articleTitle\":\"红角鸮\",\"articleType\":2,\"categoryId\":13,\"isTop\":0,\"status\":1,\"tagId\":[20]}]', 'POST', NULL, '{\"code\":200,\"msg\":\"success\"}', '/article/publish', 293, '发布文章', '2024-05-11 13:00:04', '2024-05-11 13:00:04', 0);
INSERT INTO `sys_log` VALUES (3107, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 2, 'com.fish.birdProducted.controller.ArticleController.listArticle()', '[]', 'GET', 'Cannot invoke \"com.fish.birdProducted.domain.entity.User.getUsername()\" because the return value of \"com.fish.birdProducted.mapper.UserMapper.selectById(java.io.Serializable)\" is null', NULL, '/article/back/list', 20, NULL, '2024-05-11 13:00:10', '2024-05-11 13:00:10', 0);
INSERT INTO `sys_log` VALUES (3108, '文章管理', '上传图片', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.uploadArticleCover()', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@682652f1]', 'POST', NULL, '{\"code\":200,\"data\":\"http://127.0.0.1:9005/test/article/articleCover/5bfa126f-2860-423c-9bee-dd8a9536b349.jpg\",\"msg\":\"success\"}', '/article/upload/articleCover', 160, '上传文章封面', '2024-05-11 15:44:17', '2024-05-11 15:44:17', 0);
INSERT INTO `sys_log` VALUES (3109, '文章管理', '新增', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.publish()', '[{\"articleContent\":\"# 这只是一篇测试文章\\n随便看看就好了\\n\",\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/5bfa126f-2860-423c-9bee-dd8a9536b349.jpg\",\"articleTitle\":\"test111\",\"articleType\":1,\"categoryId\":11,\"isTop\":0,\"status\":1,\"tagId\":[14]}]', 'POST', NULL, '{\"code\":200,\"msg\":\"success\"}', '/article/publish', 108, '发布文章', '2024-05-11 15:44:17', '2024-05-11 15:44:17', 0);
INSERT INTO `sys_log` VALUES (3110, '文章管理', '上传图片', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.uploadArticleImage()', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@2dc0bec]', 'POST', NULL, '{\"code\":200,\"data\":\"http://127.0.0.1:9005/test/article/articleImage/7172fac1-4684-4795-8203-bc8b93604506.jpg\",\"msg\":\"success\"}', '/article/upload/articleImage', 248, '上传文章图片', '2024-05-11 15:47:53', '2024-05-11 15:47:53', 0);
INSERT INTO `sys_log` VALUES (3111, '文章管理', '上传图片', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.uploadArticleCover()', '[org.springframework.web.multipart.support.StandardMultipartHttpServletRequest$StandardMultipartFile@3100ec0f]', 'POST', NULL, '{\"code\":200,\"data\":\"http://127.0.0.1:9005/test/article/articleCover/dbbd8fc2-0d34-4ceb-adec-89730bc2e09b.jpg\",\"msg\":\"success\"}', '/article/upload/articleCover', 22, '上传文章封面', '2024-05-11 15:48:17', '2024-05-11 15:48:17', 0);
INSERT INTO `sys_log` VALUES (3112, '文章管理', '新增', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.publish()', '[{\"articleContent\":\"# 还是一片测试文章\\n## 我服了最后一次改bug\\n随便插个图片![](http://127.0.0.1:9005/test/article/articleImage/7172fac1-4684-4795-8203-bc8b93604506.jpg)\\n\",\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/dbbd8fc2-0d34-4ceb-adec-89730bc2e09b.jpg\",\"articleTitle\":\"test111111\",\"articleType\":1,\"categoryId\":11,\"isTop\":0,\"status\":1,\"tagId\":[14]}]', 'POST', NULL, '{\"code\":200,\"msg\":\"success\"}', '/article/publish', 121, '发布文章', '2024-05-11 15:48:17', '2024-05-11 15:48:17', 0);
INSERT INTO `sys_log` VALUES (3113, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 2, 'com.fish.birdProducted.controller.ArticleController.listArticle()', '[]', 'GET', 'Cannot invoke \"com.fish.birdProducted.domain.entity.User.getUsername()\" because the return value of \"com.fish.birdProducted.mapper.UserMapper.selectById(java.io.Serializable)\" is null', NULL, '/article/back/list', 33, NULL, '2024-05-11 16:52:08', '2024-05-11 16:52:08', 0);
INSERT INTO `sys_log` VALUES (3114, '文章管理', '获取', 'unknown-1702606997', '127.0.0.1', '内网IP', 2, 'com.fish.birdProducted.controller.ArticleController.listArticle()', '[]', 'GET', 'Cannot invoke \"com.fish.birdProducted.domain.entity.User.getUsername()\" because the return value of \"com.fish.birdProducted.mapper.UserMapper.selectById(java.io.Serializable)\" is null', NULL, '/article/back/list', 104, NULL, '2024-05-11 16:56:35', '2024-05-11 16:56:35', 0);
INSERT INTO `sys_log` VALUES (3115, '文章管理', '获取', 'unknown-1702606997', '127.0.0.1', '内网IP', 2, 'com.fish.birdProducted.controller.ArticleController.listArticle()', '[]', 'GET', 'Cannot invoke \"com.fish.birdProducted.domain.entity.User.getUsername()\" because the return value of \"com.fish.birdProducted.mapper.UserMapper.selectById(java.io.Serializable)\" is null', NULL, '/article/back/list', 60, NULL, '2024-05-11 16:56:40', '2024-05-11 16:56:40', 0);
INSERT INTO `sys_log` VALUES (3116, '文章管理', '获取', 'unknown-1702606997', '127.0.0.1', '内网IP', 2, 'com.fish.birdProducted.controller.ArticleController.listArticle()', '[]', 'GET', 'Cannot invoke \"com.fish.birdProducted.domain.entity.User.getUsername()\" because the return value of \"com.fish.birdProducted.mapper.UserMapper.selectById(java.io.Serializable)\" is null', NULL, '/article/back/list', 50, NULL, '2024-05-11 16:56:48', '2024-05-11 16:56:48', 0);
INSERT INTO `sys_log` VALUES (3117, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.listArticle()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/dbbd8fc2-0d34-4ceb-adec-89730bc2e09b.jpg\",\"articleTitle\":\"test111111\",\"articleType\":1,\"categoryId\":11,\"categoryName\":\"testCate\",\"createTime\":1715413697000,\"id\":49,\"isTop\":0,\"status\":1,\"tagsName\":[\"鸵鸟目\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/5bfa126f-2860-423c-9bee-dd8a9536b349.jpg\",\"articleTitle\":\"test111\",\"articleType\":1,\"categoryId\":11,\"categoryName\":\"testCate\",\"createTime\":1715413457000,\"id\":48,\"isTop\":0,\"status\":1,\"tagsName\":[\"鸵鸟目\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/9e79806f-a92a-4610-b9ac-b3cb74fa4b87.jpg\",\"articleTitle\":\"红角鸮\",\"articleType\":2,\"categoryId\":13,\"categoryName\":\"鸮\",\"createTime\":1715403604000,\"id\":47,\"isTop\":0,\"status\":1,\"tagsName\":[\"猫头鹰\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/0f3b28a7-bb47-4caa-a485-d841407d81f8.jpg\",\"articleTitle\":\"猫头鹰Flaco\",\"articleType\":1,\"categoryId\":12,\"categoryName\":\"欧亚雕鸮\",\"createTime\":1714567783000,\"id\":46,\"isTop\":0,\"status\":1,\"tagsName\":[\"猫头鹰\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"test ES 000004\",\"articleTitle\":\"test ES 000004\",\"articleType\":1,\"categoryId\":11,\"categoryName\":\"testCate\",\"createTime\":1714477582000,\"id\":45,\"isTop\":1,\"status\":1,\"tagsName\":[\"哔哔鸟\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/23ab34cb-3090-4d05-b5be-ff9537a96c55.jpg\",\"articleTitle\":\"测试\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1712984791000,\"id\":44,\"isTop\":0,\"status\":1,\"tagsName\":[\"哔哔鸟\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/96bedb1b-a93a-4a4d-bffe-a01074917051.jpg\",\"articleTitle\":\"角叫鸭\",\"articleType\":1,\"categoryId\":8,\"categoryName\":\"鸟类\",\"createTime\":1711632379000,\"id\":43,\"isTop\":0,\"status\":1,\"tagsName\":[\"bird\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":3},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/296fd6a7-c585-4f11-bf5f-43eaee733d91.jpg\",\"articleTitle\":\"test\",\"articleType\":1,\"categoryId\":7,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391695000,\"id\":42,\"isTop\":1,\"status\":1,\"tagsName\":[\"鹬鸵科\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":1},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg\",\"articleTitle\":\"非洲鸵鸟\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1710385962000,\"id\":41,\"isTop\":0,\"status\":1,\"tagsName\":[\"鸵鸟科\",\"鸵鸟属\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":2}],\"msg\":\"success\"}', '/article/back/list', 143, '获取所有的文章列表', '2024-05-11 17:07:33', '2024-05-11 17:07:33', 0);
INSERT INTO `sys_log` VALUES (3118, '文章管理', '删除', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.deleteArticle()', '[[49]]', 'DELETE', NULL, '{\"code\":200,\"msg\":\"success\"}', '/article/back/delete', 100, '删除文章', '2024-05-11 17:08:08', '2024-05-11 17:08:08', 0);
INSERT INTO `sys_log` VALUES (3119, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.listArticle()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/5bfa126f-2860-423c-9bee-dd8a9536b349.jpg\",\"articleTitle\":\"test111\",\"articleType\":1,\"categoryId\":11,\"categoryName\":\"testCate\",\"createTime\":1715413457000,\"id\":48,\"isTop\":0,\"status\":1,\"tagsName\":[\"鸵鸟目\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/9e79806f-a92a-4610-b9ac-b3cb74fa4b87.jpg\",\"articleTitle\":\"红角鸮\",\"articleType\":2,\"categoryId\":13,\"categoryName\":\"鸮\",\"createTime\":1715403604000,\"id\":47,\"isTop\":0,\"status\":1,\"tagsName\":[\"猫头鹰\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/0f3b28a7-bb47-4caa-a485-d841407d81f8.jpg\",\"articleTitle\":\"猫头鹰Flaco\",\"articleType\":1,\"categoryId\":12,\"categoryName\":\"欧亚雕鸮\",\"createTime\":1714567783000,\"id\":46,\"isTop\":0,\"status\":1,\"tagsName\":[\"猫头鹰\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"test ES 000004\",\"articleTitle\":\"test ES 000004\",\"articleType\":1,\"categoryId\":11,\"categoryName\":\"testCate\",\"createTime\":1714477582000,\"id\":45,\"isTop\":1,\"status\":1,\"tagsName\":[\"哔哔鸟\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/23ab34cb-3090-4d05-b5be-ff9537a96c55.jpg\",\"articleTitle\":\"测试\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1712984791000,\"id\":44,\"isTop\":0,\"status\":1,\"tagsName\":[\"哔哔鸟\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/96bedb1b-a93a-4a4d-bffe-a01074917051.jpg\",\"articleTitle\":\"角叫鸭\",\"articleType\":1,\"categoryId\":8,\"categoryName\":\"鸟类\",\"createTime\":1711632379000,\"id\":43,\"isTop\":0,\"status\":1,\"tagsName\":[\"bird\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":3},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/296fd6a7-c585-4f11-bf5f-43eaee733d91.jpg\",\"articleTitle\":\"test\",\"articleType\":1,\"categoryId\":7,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391695000,\"id\":42,\"isTop\":1,\"status\":1,\"tagsName\":[\"鹬鸵科\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":1},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg\",\"articleTitle\":\"非洲鸵鸟\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1710385962000,\"id\":41,\"isTop\":0,\"status\":1,\"tagsName\":[\"鸵鸟科\",\"鸵鸟属\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":2}],\"msg\":\"success\"}', '/article/back/list', 55, '获取所有的文章列表', '2024-05-11 17:08:08', '2024-05-11 17:08:08', 0);
INSERT INTO `sys_log` VALUES (3120, '文章管理', '删除', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.deleteArticle()', '[[48]]', 'DELETE', NULL, '{\"code\":200,\"msg\":\"success\"}', '/article/back/delete', 32, '删除文章', '2024-05-11 17:08:15', '2024-05-11 17:08:15', 0);
INSERT INTO `sys_log` VALUES (3121, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.listArticle()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/9e79806f-a92a-4610-b9ac-b3cb74fa4b87.jpg\",\"articleTitle\":\"红角鸮\",\"articleType\":2,\"categoryId\":13,\"categoryName\":\"鸮\",\"createTime\":1715403604000,\"id\":47,\"isTop\":0,\"status\":1,\"tagsName\":[\"猫头鹰\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/0f3b28a7-bb47-4caa-a485-d841407d81f8.jpg\",\"articleTitle\":\"猫头鹰Flaco\",\"articleType\":1,\"categoryId\":12,\"categoryName\":\"欧亚雕鸮\",\"createTime\":1714567783000,\"id\":46,\"isTop\":0,\"status\":1,\"tagsName\":[\"猫头鹰\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"test ES 000004\",\"articleTitle\":\"test ES 000004\",\"articleType\":1,\"categoryId\":11,\"categoryName\":\"testCate\",\"createTime\":1714477582000,\"id\":45,\"isTop\":1,\"status\":1,\"tagsName\":[\"哔哔鸟\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/23ab34cb-3090-4d05-b5be-ff9537a96c55.jpg\",\"articleTitle\":\"测试\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1712984791000,\"id\":44,\"isTop\":0,\"status\":1,\"tagsName\":[\"哔哔鸟\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/96bedb1b-a93a-4a4d-bffe-a01074917051.jpg\",\"articleTitle\":\"角叫鸭\",\"articleType\":1,\"categoryId\":8,\"categoryName\":\"鸟类\",\"createTime\":1711632379000,\"id\":43,\"isTop\":0,\"status\":1,\"tagsName\":[\"bird\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":3},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/296fd6a7-c585-4f11-bf5f-43eaee733d91.jpg\",\"articleTitle\":\"test\",\"articleType\":1,\"categoryId\":7,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391695000,\"id\":42,\"isTop\":1,\"status\":1,\"tagsName\":[\"鹬鸵科\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":1},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg\",\"articleTitle\":\"非洲鸵鸟\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1710385962000,\"id\":41,\"isTop\":0,\"status\":1,\"tagsName\":[\"鸵鸟科\",\"鸵鸟属\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":2}],\"msg\":\"success\"}', '/article/back/list', 38, '获取所有的文章列表', '2024-05-11 17:08:15', '2024-05-11 17:08:15', 0);
INSERT INTO `sys_log` VALUES (3122, '文章管理', '删除', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.deleteArticle()', '[[45]]', 'DELETE', NULL, '{\"code\":200,\"msg\":\"success\"}', '/article/back/delete', 33, '删除文章', '2024-05-11 17:11:22', '2024-05-11 17:11:22', 0);
INSERT INTO `sys_log` VALUES (3123, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.listArticle()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/9e79806f-a92a-4610-b9ac-b3cb74fa4b87.jpg\",\"articleTitle\":\"红角鸮\",\"articleType\":2,\"categoryId\":13,\"categoryName\":\"鸮\",\"createTime\":1715403604000,\"id\":47,\"isTop\":0,\"status\":1,\"tagsName\":[\"猫头鹰\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/0f3b28a7-bb47-4caa-a485-d841407d81f8.jpg\",\"articleTitle\":\"猫头鹰Flaco\",\"articleType\":1,\"categoryId\":12,\"categoryName\":\"欧亚雕鸮\",\"createTime\":1714567783000,\"id\":46,\"isTop\":0,\"status\":1,\"tagsName\":[\"猫头鹰\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/23ab34cb-3090-4d05-b5be-ff9537a96c55.jpg\",\"articleTitle\":\"测试\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1712984791000,\"id\":44,\"isTop\":0,\"status\":1,\"tagsName\":[\"哔哔鸟\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/96bedb1b-a93a-4a4d-bffe-a01074917051.jpg\",\"articleTitle\":\"角叫鸭\",\"articleType\":1,\"categoryId\":8,\"categoryName\":\"鸟类\",\"createTime\":1711632379000,\"id\":43,\"isTop\":0,\"status\":1,\"tagsName\":[\"bird\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":3},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/296fd6a7-c585-4f11-bf5f-43eaee733d91.jpg\",\"articleTitle\":\"test\",\"articleType\":1,\"categoryId\":7,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391695000,\"id\":42,\"isTop\":1,\"status\":1,\"tagsName\":[\"鹬鸵科\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":1},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg\",\"articleTitle\":\"非洲鸵鸟\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1710385962000,\"id\":41,\"isTop\":0,\"status\":1,\"tagsName\":[\"鸵鸟科\",\"鸵鸟属\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":2}],\"msg\":\"success\"}', '/article/back/list', 42, '获取所有的文章列表', '2024-05-11 17:11:22', '2024-05-11 17:11:22', 0);
INSERT INTO `sys_log` VALUES (3124, '文章管理', '删除', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.deleteArticle()', '[[44]]', 'DELETE', NULL, '{\"code\":200,\"msg\":\"success\"}', '/article/back/delete', 24, '删除文章', '2024-05-11 17:11:24', '2024-05-11 17:11:24', 0);
INSERT INTO `sys_log` VALUES (3125, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.listArticle()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/9e79806f-a92a-4610-b9ac-b3cb74fa4b87.jpg\",\"articleTitle\":\"红角鸮\",\"articleType\":2,\"categoryId\":13,\"categoryName\":\"鸮\",\"createTime\":1715403604000,\"id\":47,\"isTop\":0,\"status\":1,\"tagsName\":[\"猫头鹰\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/0f3b28a7-bb47-4caa-a485-d841407d81f8.jpg\",\"articleTitle\":\"猫头鹰Flaco\",\"articleType\":1,\"categoryId\":12,\"categoryName\":\"欧亚雕鸮\",\"createTime\":1714567783000,\"id\":46,\"isTop\":0,\"status\":1,\"tagsName\":[\"猫头鹰\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/96bedb1b-a93a-4a4d-bffe-a01074917051.jpg\",\"articleTitle\":\"角叫鸭\",\"articleType\":1,\"categoryId\":8,\"categoryName\":\"鸟类\",\"createTime\":1711632379000,\"id\":43,\"isTop\":0,\"status\":1,\"tagsName\":[\"bird\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":3},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/296fd6a7-c585-4f11-bf5f-43eaee733d91.jpg\",\"articleTitle\":\"test\",\"articleType\":1,\"categoryId\":7,\"categoryName\":\"鹬鸵科\",\"createTime\":1710391695000,\"id\":42,\"isTop\":1,\"status\":1,\"tagsName\":[\"鹬鸵科\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":1},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg\",\"articleTitle\":\"非洲鸵鸟\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1710385962000,\"id\":41,\"isTop\":0,\"status\":1,\"tagsName\":[\"鸵鸟科\",\"鸵鸟属\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":2}],\"msg\":\"success\"}', '/article/back/list', 26, '获取所有的文章列表', '2024-05-11 17:11:25', '2024-05-11 17:11:25', 0);
INSERT INTO `sys_log` VALUES (3126, '文章管理', '删除', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.deleteArticle()', '[[42]]', 'DELETE', NULL, '{\"code\":200,\"msg\":\"success\"}', '/article/back/delete', 33, '删除文章', '2024-05-11 17:11:27', '2024-05-11 17:11:27', 0);
INSERT INTO `sys_log` VALUES (3127, '文章管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ArticleController.listArticle()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/9e79806f-a92a-4610-b9ac-b3cb74fa4b87.jpg\",\"articleTitle\":\"红角鸮\",\"articleType\":2,\"categoryId\":13,\"categoryName\":\"鸮\",\"createTime\":1715403604000,\"id\":47,\"isTop\":0,\"status\":1,\"tagsName\":[\"猫头鹰\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/0f3b28a7-bb47-4caa-a485-d841407d81f8.jpg\",\"articleTitle\":\"猫头鹰Flaco\",\"articleType\":1,\"categoryId\":12,\"categoryName\":\"欧亚雕鸮\",\"createTime\":1714567783000,\"id\":46,\"isTop\":0,\"status\":1,\"tagsName\":[\"猫头鹰\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":0},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/96bedb1b-a93a-4a4d-bffe-a01074917051.jpg\",\"articleTitle\":\"角叫鸭\",\"articleType\":1,\"categoryId\":8,\"categoryName\":\"鸟类\",\"createTime\":1711632379000,\"id\":43,\"isTop\":0,\"status\":1,\"tagsName\":[\"bird\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":3},{\"articleCover\":\"http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg\",\"articleTitle\":\"非洲鸵鸟\",\"articleType\":1,\"categoryId\":6,\"categoryName\":\"鸵鸟科\",\"createTime\":1710385962000,\"id\":41,\"isTop\":0,\"status\":1,\"tagsName\":[\"鸵鸟科\",\"鸵鸟属\"],\"userId\":16,\"userName\":\"fish\",\"visitCount\":2}],\"msg\":\"success\"}', '/article/back/list', 8, '获取所有的文章列表', '2024-05-11 17:11:28', '2024-05-11 17:11:28', 0);
INSERT INTO `sys_log` VALUES (3128, '友链管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.LinkController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"background\":\"https://s21.ax1x.com/2024/03/13/pFc3dpT.jpg\",\"createTime\":1699927987000,\"description\":\"这是一个示例网站\",\"email\":\"example@example.com\",\"id\":1,\"isCheck\":1,\"name\":\"网站名称\",\"url\":\"http://www.example.com\",\"userName\":\"test\"},{\"background\":\"https://avibase.bsc-eoc.org/images/fairywren_395.png\",\"createTime\":1710329708000,\"description\":\"欢迎访问Avibase Avibase是关于世界鸟类的详细数\",\"email\":\"2667657399@qq.com\",\"id\":36,\"isCheck\":1,\"name\":\"Avibase - 世界鸟类数\",\"url\":\"https://avibase.bsc-eoc.org/\",\"userName\":\"seaflows\"}],\"msg\":\"success\"}', '/link/back/list', 4, '后台友链列表', '2024-05-11 17:11:48', '2024-05-11 17:11:48', 0);
INSERT INTO `sys_log` VALUES (3129, '聊天管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.ChatGptController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"avatar\":\"https://s21.ax1x.com/2024/03/13/pFc3w1U.jpg\",\"conversation\":\"{\\\"content\\\":[{\\\"content\\\":\\\"你好\\\",\\\"type\\\":\\\"question\\\"},{\\\"content\\\":\\\"你好！有什么我可以帮助你的呢？\\\",\\\"type\\\":\\\"response\\\"}],\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\"}\",\"createTime\":1700132069000,\"id\":29,\"isCheck\":1,\"updateTime\":1705811476000,\"userName\":\"test\"},{\"avatar\":\"https://s21.ax1x.com/2024/03/13/pFc3w1U.jpg\",\"conversation\":\"{\\\"content\\\":[{\\\"content\\\":\\\"前端路由的保活是什么意思？\\\",\\\"type\\\":\\\"question\\\"},{\\\"content\\\":\\\"\\\\\\\"前端路由的保活\\\\\\\"主要是针对SPA（单页应用）中的一个重要概念。在单页应用中，当跳转到新的路由地址时，之前的组件会被卸载，新的页面组件会重新加载，这就好像在不刷新网页的情况下对页面进行了重新渲染。而这个过程可能会涉及到耗时较长的异步操作，例如请求数据等。\\\\n\\\\n\\\\\\\"保活\\\\\\\"（也常称为 \\\\\\\"keep alive\\\\\\\"）则是指保持这些组件的状态，而不是每次都进行重新加载。这样可以避免不必要的重新加载，提高应用性能，改善用户体验。 在Vue.js这样的前端框架中，它通过`<keep-alive>`组件提供了保活的功能。\\\\n\\\\n例如，用户在一个列表页浏览到第10页，点击某个项目进入详情页，然后再返回列表页，期望的行为应该是回到第10页，而不是重新加载列表页。如果没有使用保活，那么在返回列表页时会重新加载，展示的可能是第1页的内容。但如果使用了保活，那么用户的浏览状态（第10页）就可以被保持住。\\\\n\\\\n注意并不是所有的情况下都需要使用保活，比如一些数据必须保持最新状态的页面，就不适合使用这个功能。在不需要保持状态的页面使用保活，可能会导致数据过期或不一致。\\\",\\\"type\\\":\\\"response\\\"}],\\\"model\\\":\\\"gpt-4\\\"}\",\"createTime\":1700181466000,\"id\":30,\"isCheck\":1,\"updateTime\":1705811721000,\"userName\":\"test\"}],\"msg\":\"success\"}', '/chatGpt/back/list', 12, '后台聊天列表', '2024-05-11 17:11:59', '2024-05-11 17:11:59', 0);
INSERT INTO `sys_log` VALUES (3130, '评论管理', '获取', 'fish', '127.0.0.1', '内网IP', 0, 'com.fish.birdProducted.controller.CommentController.backList()', '[]', 'GET', NULL, '{\"code\":200,\"data\":[{\"commentContent\":\"堂吉诃德鸭鸭\",\"commentUserName\":\"seaflows\",\"createTime\":1711633770000,\"id\":63,\"isCheck\":1,\"type\":1,\"typeId\":43,\"updateTime\":1711633770000},{\"commentContent\":\"超可爱的鸭鸭\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1711633790000,\"id\":64,\"isCheck\":1,\"parentId\":63,\"replyId\":63,\"type\":1,\"typeId\":43,\"updateTime\":1711633790000},{\"commentContent\":\"flaco\\n\",\"commentUserName\":\"seaflows\",\"createTime\":1714575724000,\"id\":66,\"isCheck\":1,\"type\":1,\"typeId\":46,\"updateTime\":1714575724000}],\"msg\":\"success\"}', '/comment/back/list', 4, '后台评论列表', '2024-05-11 17:12:01', '2024-05-11 17:12:01', 0);

-- ----------------------------
-- Table structure for sys_login_log
-- ----------------------------
DROP TABLE IF EXISTS `sys_login_log`;
CREATE TABLE `sys_login_log`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '日志编号',
  `user_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '用户名称',
  `ip` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '登录ip',
  `address` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '登录地址',
  `browser` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '浏览器',
  `os` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作系统',
  `type` tinyint(1) NOT NULL COMMENT '登录类型(0：前台，1：后台，2：非法登录)',
  `state` tinyint(1) NOT NULL COMMENT '登录状态(0：成功，1：失败)',
  `message` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '登录信息',
  `create_time` datetime NOT NULL COMMENT '用户创建时间',
  `update_time` datetime NOT NULL COMMENT '用户更新时间',
  `is_deleted` tinyint(1) NOT NULL DEFAULT 0 COMMENT '是否删除（0：未删除，1：已删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 480 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_login_log
-- ----------------------------
INSERT INTO `sys_login_log` VALUES (464, 'fish', '127.0.0.1', '内网IP', 'Chrome 12-122.0.0.0', 'Windows 10', 0, 0, '登录成功', '2024-03-11 19:11:55', '2024-03-11 19:11:55', 0);
INSERT INTO `sys_login_log` VALUES (465, 'fish', '127.0.0.1', '内网IP', 'Chrome 12-122.0.0.0', 'Windows 10', 1, 0, '登录成功', '2024-03-11 20:53:33', '2024-03-11 20:53:33', 0);
INSERT INTO `sys_login_log` VALUES (466, 'fish', '127.0.0.1', '内网IP', 'Chrome 12-122.0.0.0', 'Windows 10', 0, 0, '登录成功', '2024-03-12 11:53:46', '2024-03-12 11:53:46', 0);
INSERT INTO `sys_login_log` VALUES (467, 'fish', '127.0.0.1', '内网IP', 'Chrome 12-122.0.0.0', 'Windows 10', 1, 0, '登录成功', '2024-03-12 15:33:33', '2024-03-12 15:33:33', 0);
INSERT INTO `sys_login_log` VALUES (468, 'seaflows', '127.0.0.1', '内网IP', 'Chrome 12-122.0.0.0', 'Windows 10', 0, 0, '登录成功', '2024-03-13 11:31:48', '2024-03-13 11:31:48', 0);
INSERT INTO `sys_login_log` VALUES (469, 'seaflows', '127.0.0.1', '内网IP', 'Chrome 12-122.0.0.0', 'Windows 10', 0, 0, '登录成功', '2024-03-13 13:19:08', '2024-03-13 13:19:08', 0);
INSERT INTO `sys_login_log` VALUES (470, 'fish', '127.0.0.1', '内网IP', 'Chrome 12-122.0.0.0', 'Windows 10', 1, 0, '登录成功', '2024-03-13 14:38:04', '2024-03-13 14:38:04', 0);
INSERT INTO `sys_login_log` VALUES (471, 'seaflows', '127.0.0.1', '内网IP', 'Chrome 12-122.0.0.0', 'Windows 10', 0, 0, '登录成功', '2024-03-13 14:42:58', '2024-03-13 14:42:58', 0);
INSERT INTO `sys_login_log` VALUES (472, 'seaflows', '127.0.0.1', '内网IP', 'Chrome 12-122.0.0.0', 'Windows 10', 0, 0, '登录成功', '2024-03-14 12:59:37', '2024-03-14 12:59:37', 0);
INSERT INTO `sys_login_log` VALUES (473, 'fish', '127.0.0.1', '内网IP', 'Chrome 12-123.0.0.0', 'Windows 10', 1, 0, '登录成功', '2024-03-28 21:16:06', '2024-03-28 21:16:06', 0);
INSERT INTO `sys_login_log` VALUES (474, 'seaflows', '127.0.0.1', '内网IP', 'Chrome 12-123.0.0.0', 'Windows 10', 0, 0, '登录成功', '2024-03-28 21:49:09', '2024-03-28 21:49:09', 0);
INSERT INTO `sys_login_log` VALUES (475, 'fish', '127.0.0.1', '内网IP', 'Chrome 12-123.0.0.0', 'Windows 10', 1, 0, '登录成功', '2024-04-13 23:12:36', '2024-04-13 23:12:36', 0);
INSERT INTO `sys_login_log` VALUES (476, 'seaflows', '127.0.0.1', '内网IP', 'Chrome 12-124.0.0.0', 'Windows 10', 0, 0, '登录成功', '2024-05-01 20:32:12', '2024-05-01 20:32:12', 0);
INSERT INTO `sys_login_log` VALUES (477, 'fish', '127.0.0.1', '内网IP', 'Chrome 12-124.0.0.0', 'Windows 10', 1, 0, '登录成功', '2024-05-01 20:36:11', '2024-05-01 20:36:11', 0);
INSERT INTO `sys_login_log` VALUES (478, 'seaflows', '127.0.0.1', '内网IP', 'Chrome 12-124.0.0.0', 'Windows 10', 0, 0, '登录成功', '2024-05-10 17:58:08', '2024-05-10 17:58:08', 0);
INSERT INTO `sys_login_log` VALUES (479, 'fish', '127.0.0.1', '内网IP', 'Chrome 12-124.0.0.0', 'Windows 10', 1, 0, '登录成功', '2024-05-11 12:27:13', '2024-05-11 12:27:13', 0);
INSERT INTO `sys_login_log` VALUES (480, 'fish', '127.0.0.1', '内网IP', 'Chrome 12-124.0.0.0', 'Windows 10', 1, 0, '登录成功', '2024-05-11 15:43:11', '2024-05-11 15:43:11', 0);

-- ----------------------------
-- Table structure for sys_menu
-- ----------------------------
DROP TABLE IF EXISTS `sys_menu`;
CREATE TABLE `sys_menu`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '唯一id',
  `title` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '标题',
  `icon` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '图标',
  `path` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '地址',
  `component` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '绑定的哪个组件，默认自带的组件类型分别是：Iframe、RouteView和ComponentError',
  `redirect` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '父菜单重定向地址(默认第一个子菜单)',
  `affix` tinyint NOT NULL DEFAULT 0 COMMENT '是否是固定页签(0否 1是)',
  `parent_id` bigint NULL DEFAULT NULL COMMENT '父级菜单的id',
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '同路由中的name，主要是用于保活的左右',
  `hide_in_menu` tinyint NOT NULL DEFAULT 0 COMMENT '是否隐藏当前菜单(0否 1是)',
  `url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '如果当前是iframe的模式，需要有一个跳转的url支撑，其不能和path重复，path还是为路由',
  `hide_in_breadcrumb` tinyint NOT NULL DEFAULT 1 COMMENT '是否存在于面包屑(0否 1是)',
  `hide_children_in_menu` tinyint NOT NULL DEFAULT 1 COMMENT '是否不需要显示所有的子菜单(0否 1是)',
  `keep_alive` tinyint NOT NULL DEFAULT 1 COMMENT '是否保活(0否 1是)',
  `target` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '全连接跳转模式(\'_blank\' | \'_self\' | \'_parent\')',
  `is_disable` tinyint(1) NOT NULL DEFAULT 0 COMMENT '是否禁用 (0否 1是)',
  `order_num` int NOT NULL DEFAULT 1 COMMENT '排序',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NOT NULL COMMENT '更新时间',
  `is_deleted` tinyint NOT NULL DEFAULT 0 COMMENT '是否删除（0：未删除，1：已删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 70 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_menu
-- ----------------------------
INSERT INTO `sys_menu` VALUES (1, '系统管理', 'SettingTwoTone', '/system', 'RouteView', '/system/menu', 0, NULL, 'System', 0, NULL, 1, 0, 1, NULL, 0, 2, '2023-11-17 14:49:02', '2023-11-29 17:33:13', 0);
INSERT INTO `sys_menu` VALUES (2, '菜单管理', 'MenuOutlined', '/system/menu', '/system/menu', '', 0, 1, 'Menu', 0, NULL, 1, 0, 1, NULL, 0, 1, '2023-11-17 14:49:02', '2023-11-28 17:27:43', 0);
INSERT INTO `sys_menu` VALUES (3, '用户管理', 'UserOutlined', '/system/user', '/system/user', '', 0, 1, 'User', 0, NULL, 1, 0, 1, NULL, 0, 0, '2023-11-17 14:49:02', '2023-11-29 14:46:27', 0);
INSERT INTO `sys_menu` VALUES (21, '首页', 'HomeTwoTone', '/welcome', '/welcome', '', 0, NULL, NULL, 0, NULL, 1, 1, 1, '', 0, 0, '2023-11-28 16:36:33', '2023-11-28 19:57:13', 0);
INSERT INTO `sys_menu` VALUES (23, '角色管理', 'TeamOutlined', '/system/role', '/system/role', NULL, 0, 1, NULL, 0, NULL, 1, 1, 1, '', 0, 3, '2023-11-29 15:41:30', '2023-12-04 12:16:00', 0);
INSERT INTO `sys_menu` VALUES (24, '权限管理', 'UnlockOutlined', '/system/permission', '/system/permission', '', 0, 1, NULL, 0, NULL, 1, 1, 1, '', 0, 4, '2023-11-29 17:13:50', '2023-11-29 17:14:10', 0);
INSERT INTO `sys_menu` VALUES (25, '日志管理', 'HighlightOutlined', '/log', 'RouteView', '/log/operate', 0, 1, NULL, 0, '', 1, 1, 1, '', 0, 5, '2023-11-29 17:17:29', '2023-11-29 17:17:29', 0);
INSERT INTO `sys_menu` VALUES (26, '操作日志', 'FileProtectOutlined', '/log/operate', '/system/log/operate', '', 0, 25, NULL, 0, NULL, 1, 1, 1, '', 0, 0, '2023-11-29 17:20:28', '2023-11-29 17:29:20', 0);
INSERT INTO `sys_menu` VALUES (27, '登录日志', 'SolutionOutlined', '/log/login', '/system/log/login', '', 0, 25, NULL, 0, '', 1, 1, 1, '', 0, 1, '2023-11-29 17:29:02', '2023-11-29 17:29:02', 0);
INSERT INTO `sys_menu` VALUES (28, '网站管理', 'AppstoreTwoTone', '/bird', 'RouteView', NULL, 0, NULL, NULL, 0, NULL, 1, 1, 1, '', 0, 1, '2023-11-29 17:34:17', '2023-12-25 23:50:05', 0);
INSERT INTO `sys_menu` VALUES (29, '信息管理', 'ReadOutlined', '/bird/info', '/bird/info', '', 0, 28, NULL, 0, NULL, 1, 1, 1, '', 0, 0, '2023-11-29 20:05:20', '2023-11-29 20:09:38', 0);
INSERT INTO `sys_menu` VALUES (30, '文章管理', 'FormOutlined', '/bird/essay', '', NULL, 0, 28, NULL, 0, NULL, 1, 1, 1, '', 0, 0, '2023-11-29 20:11:25', '2023-12-26 11:16:20', 0);
INSERT INTO `sys_menu` VALUES (31, '发布文章', 'SendOutlined', '/bird/essay/publish', '/bird/essay/publish', '', 0, 30, NULL, 0, '', 1, 1, 1, '', 0, 0, '2023-11-29 20:13:00', '2023-11-29 20:13:00', 0);
INSERT INTO `sys_menu` VALUES (32, '文章列表', 'OrderedListOutlined', '/bird/essay/list', '/bird/essay/list', '', 0, 30, NULL, 0, '', 1, 1, 1, '', 0, 0, '2023-11-29 20:14:13', '2023-11-29 20:14:13', 0);
INSERT INTO `sys_menu` VALUES (33, '标签管理', 'TagsOutlined', '/bird/tag', '/bird/tag', '', 0, 28, NULL, 0, NULL, 1, 1, 1, '', 0, 2, '2023-11-29 20:15:13', '2023-11-29 20:20:28', 0);
INSERT INTO `sys_menu` VALUES (34, '分类管理', 'ContainerOutlined', '/bird/category', '/bird/category', '', 0, 28, NULL, 0, '', 1, 1, 1, '', 0, 3, '2023-11-29 20:19:09', '2023-11-29 20:19:09', 0);
INSERT INTO `sys_menu` VALUES (35, '评论管理', 'CommentOutlined', '/bird/comment', '/bird/comment', '', 0, 28, NULL, 0, NULL, 1, 1, 1, '', 0, 4, '2023-11-29 20:21:48', '2023-11-29 20:22:06', 0);
INSERT INTO `sys_menu` VALUES (36, '反馈管理', 'ScheduleOutlined', '/bird/message', '/bird/message', NULL, 0, 28, NULL, 0, NULL, 1, 1, 1, '', 0, 1, '2023-11-29 20:23:19', '2023-12-26 11:16:24', 0);
INSERT INTO `sys_menu` VALUES (38, '聊天管理', 'RobotOutlined', '/bird/gpt', '/bird/gpt', '', 0, 28, NULL, 0, NULL, 1, 1, 1, '', 0, 6, '2023-11-29 20:29:08', '2023-11-29 20:29:27', 0);
INSERT INTO `sys_menu` VALUES (39, '友链管理', 'NodeIndexOutlined', '/bird/link', '/bird/link', NULL, 0, 28, NULL, 0, NULL, 1, 1, 1, '', 0, 6, '2023-11-29 20:31:25', '2024-01-22 20:27:26', 0);
INSERT INTO `sys_menu` VALUES (42, '数据大屏', 'PieChartTwoTone', '/data-screen', '/data-screen', NULL, 0, NULL, NULL, 1, NULL, 1, 1, 1, '', 0, 4, '2023-11-29 20:51:14', '2024-01-22 22:07:04', 0);
INSERT INTO `sys_menu` VALUES (43, '收藏管理', 'InboxOutlined', '/bird/collect', '/bird/collect', NULL, 0, 28, NULL, 0, NULL, 1, 1, 1, '', 0, 3, '2023-11-29 20:54:15', '2023-11-29 20:54:47', 0);
INSERT INTO `sys_menu` VALUES (44, '服务监控', 'AlertOutlined', '/system/server-monitoring', '/system/server-monitoring', NULL, 0, 1, NULL, 0, NULL, 1, 1, 1, '', 0, 6, '2023-11-29 21:01:24', '2023-12-14 15:26:34', 0);
INSERT INTO `sys_menu` VALUES (64, '角色授权', '', '/role/authorization', '/system/role/user-role', NULL, 0, 1, NULL, 1, NULL, 1, 1, 1, '', 0, 0, '2023-12-04 12:07:00', '2023-12-05 09:57:09', 0);
INSERT INTO `sys_menu` VALUES (65, '权限授权', '', '/permission/authorization', '/system/permission/role-permission', NULL, 0, 1, NULL, 1, NULL, 1, 1, 1, '', 0, 0, '2023-12-07 14:38:45', '2023-12-07 14:41:44', 0);
INSERT INTO `sys_menu` VALUES (68, '用户授权', '', '/user/role', '/system/user/role-user', NULL, 0, 1, NULL, 1, NULL, 1, 1, 1, '', 0, 0, '2023-12-19 10:37:05', '2023-12-19 10:38:16', 0);
INSERT INTO `sys_menu` VALUES (69, '接口文档', 'FileTextTwoTone', 'http://localhost:8080/swagger-ui/index.html#/', NULL, NULL, 0, NULL, NULL, 0, 'http://127.0.0.1:8088/doc.html#/home', 1, 1, 1, '_blank', 0, 5, '2024-01-22 20:32:18', '2024-02-28 14:03:19', 0);
INSERT INTO `sys_menu` VALUES (70, '跳转前台', 'TabletTwoTone', 'http://localhost:6060/', NULL, NULL, 0, NULL, NULL, 0, '', 1, 1, 1, '_blank', 0, 6, '2024-01-22 20:38:54', '2024-02-28 14:02:45', 0);

-- ----------------------------
-- Table structure for sys_permission
-- ----------------------------
DROP TABLE IF EXISTS `sys_permission`;
CREATE TABLE `sys_permission`  (
  `id` bigint UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '权限表id',
  `permission_desc` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '描述',
  `permission_key` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '权限字符',
  `menu_id` bigint NOT NULL COMMENT '菜单id',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NOT NULL COMMENT '更新时间',
  `is_deleted` tinyint NOT NULL DEFAULT 0 COMMENT '是否删除（0：未删除，1：已删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 148 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_permission
-- ----------------------------
INSERT INTO `sys_permission` VALUES (5, '获取菜单', 'system:menu:list', 2, '2023-12-06 08:41:49', '2023-12-14 17:21:57', 0);
INSERT INTO `sys_permission` VALUES (6, '查询菜单', 'system:menu:select', 2, '2023-12-05 08:41:54', '2023-12-07 12:02:31', 0);
INSERT INTO `sys_permission` VALUES (7, '修改菜单', 'system:menu:update', 2, '2023-12-04 08:41:54', '2023-12-12 20:36:49', 0);
INSERT INTO `sys_permission` VALUES (8, '删除菜单', 'system:menu:delete', 2, '2023-12-04 08:41:54', '2023-12-11 21:03:10', 0);
INSERT INTO `sys_permission` VALUES (9, '添加菜单', 'system:menu:add', 2, '2023-12-02 08:41:54', '2023-12-04 08:41:54', 0);
INSERT INTO `sys_permission` VALUES (10, '修改菜单角色列表', 'system:menu:role:list', 2, '2023-12-02 08:41:54', '2023-12-02 08:41:54', 0);
INSERT INTO `sys_permission` VALUES (11, '获取所有角色', 'system:role:list', 23, '2023-12-02 08:41:54', '2023-12-02 08:41:54', 0);
INSERT INTO `sys_permission` VALUES (12, '更新角色状态', 'system:role:status:update', 23, '2023-12-02 08:41:54', '2023-12-02 08:41:54', 0);
INSERT INTO `sys_permission` VALUES (13, '获取对应角色信息', 'system:role:get', 23, '2023-12-02 08:41:54', '2023-12-02 08:41:54', 0);
INSERT INTO `sys_permission` VALUES (14, '修改角色信息', 'system:role:update', 23, '2023-12-02 08:41:54', '2023-12-02 08:41:54', 0);
INSERT INTO `sys_permission` VALUES (15, '根据id删除角色', 'system:role:delete', 23, '2023-12-02 08:41:54', '2023-12-02 08:41:54', 0);
INSERT INTO `sys_permission` VALUES (16, '根据条件搜索角色', 'system:role:search', 23, '2023-12-02 08:41:54', '2023-12-02 08:41:54', 0);
INSERT INTO `sys_permission` VALUES (17, '查询拥有角色的用户列表', 'system:user:role:list', 23, '2023-12-02 08:41:54', '2023-12-02 08:41:54', 0);
INSERT INTO `sys_permission` VALUES (18, '查询未拥有角色的用户列表', 'system:not:role:user:list', 23, '2023-12-02 08:41:54', '2023-12-06 10:43:49', 0);
INSERT INTO `sys_permission` VALUES (19, '添加用户角色关系', 'system:user:role:add', 23, '2023-12-05 08:41:54', '2023-12-11 21:02:51', 0);
INSERT INTO `sys_permission` VALUES (20, '删除用户角色关系', 'system:user:role:delete', 23, '2023-12-02 08:41:54', '2023-12-02 08:41:54', 0);
INSERT INTO `sys_permission` VALUES (21, '所有权限', 'system:permission:list', 24, '2023-12-06 10:34:21', '2023-12-06 10:34:24', 0);
INSERT INTO `sys_permission` VALUES (22, '查询所有权限所在菜单', 'system:permission:menu:list', 24, '2023-12-06 14:26:28', '2023-12-06 14:26:31', 0);
INSERT INTO `sys_permission` VALUES (23, '搜索权限', 'system:permission:search', 24, '2023-12-06 15:18:29', '2023-12-06 15:18:33', 0);
INSERT INTO `sys_permission` VALUES (24, '添加权限', 'system:permission:add', 24, '2023-12-06 19:12:47', '2023-12-06 19:12:50', 0);
INSERT INTO `sys_permission` VALUES (25, '测试测试', 'sdss', 3, '2023-12-06 20:26:46', '2023-12-06 20:26:46', 1);
INSERT INTO `sys_permission` VALUES (26, 'sdsd', 'sdd', 26, '2023-12-06 20:29:24', '2023-12-06 20:29:24', 1);
INSERT INTO `sys_permission` VALUES (27, '获取要修改的权限信息', 'system:permission:get', 24, '2023-12-06 20:48:33', '2023-12-06 20:48:33', 0);
INSERT INTO `sys_permission` VALUES (28, '修改权限字符信息', 'system:permission:update', 24, '2023-12-07 12:01:34', '2023-12-07 12:01:36', 0);
INSERT INTO `sys_permission` VALUES (29, 'sss', '测试', 21, '2023-12-07 12:06:26', '2023-12-07 12:06:26', 1);
INSERT INTO `sys_permission` VALUES (30, '删除权限', 'system:permission:delete', 24, '2023-12-07 12:14:14', '2023-12-07 12:14:14', 0);
INSERT INTO `sys_permission` VALUES (31, '查询权限的角色列表', 'system:permission:role:list', 65, '2023-12-07 15:02:03', '2023-12-07 15:02:03', 0);
INSERT INTO `sys_permission` VALUES (32, '2121', '测试', 26, '2023-12-07 17:17:13', '2023-12-07 17:17:13', 1);
INSERT INTO `sys_permission` VALUES (33, '查询没有该权限的角色列表', 'system:permission:role:not:list', 65, '2023-12-07 17:41:38', '2023-12-07 17:41:38', 0);
INSERT INTO `sys_permission` VALUES (34, '单个/批量添加角色权限关系', 'system:permission:role:add', 65, '2023-12-07 20:53:14', '2023-12-08 10:51:10', 0);
INSERT INTO `sys_permission` VALUES (35, '删除角色权限关系', 'system:permission:role:delete', 65, '2023-12-07 21:00:55', '2023-12-07 21:00:55', 0);
INSERT INTO `sys_permission` VALUES (36, '显示所有登录日志', 'system:log:login:list', 27, '2023-12-11 16:20:00', '2023-12-14 17:48:07', 0);
INSERT INTO `sys_permission` VALUES (37, '登录日志搜索', 'system:log:login:search', 27, '2023-12-11 19:51:27', '2023-12-11 19:51:27', 0);
INSERT INTO `sys_permission` VALUES (38, '删除/清空登录日志', 'system:log:login:delete', 27, '2023-12-11 20:19:08', '2023-12-11 20:19:08', 0);
INSERT INTO `sys_permission` VALUES (45, '显示所有操作日志', 'system:log:list', 26, '2023-12-13 16:13:41', '2023-12-13 16:13:41', 0);
INSERT INTO `sys_permission` VALUES (46, '显示所有操作日志', 'system:log:list', 26, '2023-12-13 16:13:41', '2023-12-13 16:13:41', 1);
INSERT INTO `sys_permission` VALUES (87, '添加角色信息', 'system:role:add', 23, '2023-12-13 17:23:42', '2023-12-13 17:23:42', 0);
INSERT INTO `sys_permission` VALUES (88, '添加角色信息', 'system:role:add', 23, '2023-12-13 17:23:42', '2023-12-13 17:23:42', 1);
INSERT INTO `sys_permission` VALUES (91, '搜索操作日志', 'system:log:search', 26, '2023-12-13 20:43:04', '2023-12-13 20:43:04', 0);
INSERT INTO `sys_permission` VALUES (92, '删除/清空操作日志', 'system:log:delete', 26, '2023-12-14 08:45:38', '2023-12-14 08:45:38', 0);
INSERT INTO `sys_permission` VALUES (93, 'id查询操作日志', 'system:log:select:id', 26, '2023-12-14 09:00:53', '2023-12-14 09:00:53', 0);
INSERT INTO `sys_permission` VALUES (94, '获取服务监控数据', 'monitor:server:list', 44, '2023-12-14 15:21:21', '2023-12-14 15:21:21', 0);
INSERT INTO `sys_permission` VALUES (95, 'ssss', 'system:menu:list	', 26, '2023-12-14 17:19:50', '2023-12-14 17:19:50', 1);
INSERT INTO `sys_permission` VALUES (96, 'dd', 'system:menu:lists', 21, '2023-12-14 17:21:46', '2023-12-14 17:21:46', 1);
INSERT INTO `sys_permission` VALUES (97, '获取用户列表', 'system:user:list', 3, '2023-12-18 12:07:00', '2023-12-18 12:07:00', 0);
INSERT INTO `sys_permission` VALUES (98, '搜索用户列表', 'system:user:search', 3, '2023-12-18 14:15:46', '2023-12-18 14:15:46', 0);
INSERT INTO `sys_permission` VALUES (99, '更新用户状态', 'system:user:status:update', 3, '2023-12-18 15:11:34', '2023-12-18 15:11:34', 0);
INSERT INTO `sys_permission` VALUES (100, '获取用户详细信息', 'system:user:details', 3, '2023-12-18 16:40:52', '2023-12-18 16:40:52', 0);
INSERT INTO `sys_permission` VALUES (101, '删除用户&用户角色关系', 'system:user:delete', 3, '2023-12-19 10:11:46', '2023-12-19 10:12:15', 0);
INSERT INTO `sys_permission` VALUES (102, '查询没有该用户的角色列表', 'system:user:role:not:list', 23, '2023-12-19 11:10:11', '2023-12-19 11:10:11', 0);
INSERT INTO `sys_permission` VALUES (103, '查询拥有用户的角色列表', 'system:role:user:list', 23, '2023-12-19 11:17:55', '2023-12-19 11:17:55', 0);
INSERT INTO `sys_permission` VALUES (104, '搜索管理菜单列表', 'system:search:menu:list', 2, '2023-12-25 11:48:02', '2023-12-25 11:48:02', 0);
INSERT INTO `sys_permission` VALUES (105, '添加或修改站长信息', 'bird:update:websiteInfo', 29, '2023-12-27 16:19:23', '2024-01-04 10:49:12', 0);
INSERT INTO `sys_permission` VALUES (106, '查看网站信息-后台', 'bird:get:websiteInfo', 29, '2023-12-29 08:52:51', '2024-01-22 22:18:56', 0);
INSERT INTO `sys_permission` VALUES (107, '新增标签', 'bird:tag:add', 33, '2024-01-04 10:55:39', '2024-01-04 10:55:39', 0);
INSERT INTO `sys_permission` VALUES (108, '新增分类', 'bird:category:add', 34, '2024-01-04 11:17:12', '2024-01-04 11:17:12', 0);
INSERT INTO `sys_permission` VALUES (109, '发布文章相关', 'bird:publish:article', 31, '2024-01-05 15:01:54', '2024-01-05 15:01:54', 0);
INSERT INTO `sys_permission` VALUES (110, '获取文章列表', 'bird:article:list', 32, '2024-01-07 11:28:14', '2024-01-07 11:28:14', 0);
INSERT INTO `sys_permission` VALUES (111, '搜索文章', 'bird:article:search', 32, '2024-01-07 19:30:10', '2024-01-07 19:30:10', 0);
INSERT INTO `sys_permission` VALUES (112, '修改文章', 'bird:article:update', 32, '2024-01-07 19:56:37', '2024-01-07 19:56:37', 0);
INSERT INTO `sys_permission` VALUES (113, '回显文章数据', 'bird:article:echo', 31, '2024-01-08 09:24:01', '2024-01-08 09:24:01', 0);
INSERT INTO `sys_permission` VALUES (114, '删除文章', 'bird:article:delete', 30, '2024-01-08 11:29:23', '2024-01-08 11:29:23', 0);
INSERT INTO `sys_permission` VALUES (115, '后台留言列表', 'bird:leaveword:list', 36, '2024-01-12 21:14:18', '2024-01-12 21:14:18', 0);
INSERT INTO `sys_permission` VALUES (116, '搜索后台留言列表', 'bird:leaveword:search', 36, '2024-01-16 08:50:46', '2024-01-16 08:50:46', 0);
INSERT INTO `sys_permission` VALUES (117, '修改留言是否通过', 'bird:leaveword:isCheck', 36, '2024-01-16 10:02:20', '2024-01-16 10:02:20', 0);
INSERT INTO `sys_permission` VALUES (118, '删除留言', 'bird:leaveword:delete', 36, '2024-01-16 11:11:59', '2024-01-16 11:11:59', 0);
INSERT INTO `sys_permission` VALUES (119, '获取标签列表', 'bird:tag:list', 33, '2024-01-18 14:30:10', '2024-01-18 14:30:10', 0);
INSERT INTO `sys_permission` VALUES (120, '搜索标签列表', 'bird:tag:search', 33, '2024-01-18 14:47:10', '2024-01-18 14:47:10', 0);
INSERT INTO `sys_permission` VALUES (121, '修改标签', 'bird:tag:update', 33, '2024-01-18 15:56:45', '2024-01-18 15:56:45', 0);
INSERT INTO `sys_permission` VALUES (122, '删除标签', 'bird:tag:delete', 33, '2024-01-18 16:16:41', '2024-01-18 16:16:41', 0);
INSERT INTO `sys_permission` VALUES (123, '获取分类列表', 'bird:category:list', 34, '2024-01-18 22:42:29', '2024-01-18 22:43:28', 0);
INSERT INTO `sys_permission` VALUES (124, '搜索分类列表', 'bird:category:search', 34, '2024-01-18 22:43:06', '2024-01-18 22:43:06', 0);
INSERT INTO `sys_permission` VALUES (125, '修改分类', 'bird:category:update', 34, '2024-01-18 22:44:21', '2024-01-18 22:44:21', 0);
INSERT INTO `sys_permission` VALUES (126, '删除分类', 'bird:category:delete', 34, '2024-01-18 22:44:51', '2024-01-18 22:44:51', 0);
INSERT INTO `sys_permission` VALUES (127, '后台树洞列表', 'bird:treeHole:list', 37, '2024-01-19 21:25:39', '2024-01-19 21:25:39', 0);
INSERT INTO `sys_permission` VALUES (128, '搜索后台树洞列表', 'bird:treeHole:search', 37, '2024-01-19 21:26:03', '2024-01-19 21:26:03', 0);
INSERT INTO `sys_permission` VALUES (129, '修改树洞是否通过', 'bird:treeHole:isCheck', 37, '2024-01-19 21:26:28', '2024-01-19 21:26:28', 0);
INSERT INTO `sys_permission` VALUES (130, '删除树洞', 'bird:treeHole:delete', 37, '2024-01-19 21:27:20', '2024-01-19 21:27:20', 0);
INSERT INTO `sys_permission` VALUES (131, '搜索后台收藏列表', 'bird:favorite:search', 43, '2024-01-21 09:36:25', '2024-01-21 09:36:25', 0);
INSERT INTO `sys_permission` VALUES (132, '修改收藏是否通过', 'bird:favorite:isCheck', 43, '2024-01-21 09:36:47', '2024-01-21 09:36:47', 0);
INSERT INTO `sys_permission` VALUES (133, '删除收藏', 'bird:favorite:delete', 43, '2024-01-21 09:37:11', '2024-01-21 09:37:11', 0);
INSERT INTO `sys_permission` VALUES (134, '后台收藏列表', 'bird:favorite:list', 43, '2024-01-21 09:39:35', '2024-01-21 09:39:35', 0);
INSERT INTO `sys_permission` VALUES (135, '后台留言列表', 'bird:chatGpt:list', 38, '2024-01-21 11:05:47', '2024-01-21 11:05:47', 1);
INSERT INTO `sys_permission` VALUES (136, '后台聊天列表', 'bird:chatGpt:list', 38, '2024-01-21 11:06:39', '2024-01-21 11:06:39', 0);
INSERT INTO `sys_permission` VALUES (137, '搜索后台聊天列表', 'bird:chatGpt:search', 38, '2024-01-21 11:07:18', '2024-01-21 11:07:18', 0);
INSERT INTO `sys_permission` VALUES (138, '修改聊天是否通过', 'bird:chatGpt:isCheck', 38, '2024-01-21 11:07:53', '2024-01-21 11:07:53', 0);
INSERT INTO `sys_permission` VALUES (139, '删除聊天', 'bird:chatGpt:delete', 38, '2024-01-21 11:08:18', '2024-01-21 11:08:18', 0);
INSERT INTO `sys_permission` VALUES (140, '后台评论列表', 'bird:comment:list', 35, '2024-01-22 09:40:40', '2024-01-22 09:40:40', 0);
INSERT INTO `sys_permission` VALUES (141, '搜索后台评论列表', 'bird:comment:search', 35, '2024-01-22 11:02:58', '2024-01-22 11:02:58', 0);
INSERT INTO `sys_permission` VALUES (142, '修改评论是否通过', 'bird:comment:isCheck', 35, '2024-01-22 20:01:50', '2024-01-22 20:01:50', 0);
INSERT INTO `sys_permission` VALUES (143, '删除评论', 'bird:comment:delete', 35, '2024-01-22 20:02:20', '2024-01-22 20:02:20', 0);
INSERT INTO `sys_permission` VALUES (144, '后台友链列表', 'bird:link:list', 39, '2024-01-22 21:03:24', '2024-01-22 21:03:24', 0);
INSERT INTO `sys_permission` VALUES (145, '搜索后台友链列表', 'bird:link:search', 39, '2024-01-22 21:03:46', '2024-01-22 21:03:46', 0);
INSERT INTO `sys_permission` VALUES (146, '修改友链是否通过', 'bird:link:isCheck', 39, '2024-01-22 21:04:18', '2024-01-22 21:04:18', 0);
INSERT INTO `sys_permission` VALUES (147, '删除友链', 'bird:link:delete', 39, '2024-01-22 21:04:46', '2024-01-22 21:04:46', 0);
INSERT INTO `sys_permission` VALUES (148, '上传站长头像', 'system:update:websiteInfo', 29, '2024-01-22 22:17:43', '2024-01-22 22:17:43', 1);

-- ----------------------------
-- Table structure for sys_role
-- ----------------------------
DROP TABLE IF EXISTS `sys_role`;
CREATE TABLE `sys_role`  (
  `id` bigint UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '角色id',
  `role_name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '角色名称',
  `role_key` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '角色字符',
  `status` tinyint NOT NULL DEFAULT 0 COMMENT '状态（0：正常，1：停用）',
  `order_num` bigint NOT NULL COMMENT '排序',
  `remark` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '备注',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NOT NULL COMMENT '更新时间',
  `is_deleted` tinyint NOT NULL DEFAULT 0 COMMENT '是否删除（0：未删除，1：已删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 45 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_role
-- ----------------------------
INSERT INTO `sys_role` VALUES (1, '超级管理员', 'ADMIN', 0, 0, '最高管理者', '2023-11-17 15:19:01', '2023-12-14 16:47:07', 0);
INSERT INTO `sys_role` VALUES (2, '测试角色', 'Test', 0, 1, '测试的用户，没有任何操作权限', '2023-11-17 15:19:06', '2023-12-25 16:28:33', 0);
INSERT INTO `sys_role` VALUES (3, '普通用户', 'USER', 0, 3, '前台普通用户（前台用户默认角色）', '2023-12-03 21:12:24', '2023-12-14 17:15:52', 0);
INSERT INTO `sys_role` VALUES (45, '鸟民', 'testt', 0, 6, 'testt', '2024-03-14 12:07:35', '2024-03-14 12:07:35', 0);

-- ----------------------------
-- Table structure for sys_role_menu
-- ----------------------------
DROP TABLE IF EXISTS `sys_role_menu`;
CREATE TABLE `sys_role_menu`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `role_id` bigint NOT NULL COMMENT '角色id',
  `menu_id` bigint NOT NULL COMMENT '菜单id',
  `is_deleted` tinyint NOT NULL DEFAULT 0 COMMENT '是否删除（0：未删除，1：已删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1396 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_role_menu
-- ----------------------------
INSERT INTO `sys_role_menu` VALUES (1290, 1, 21, 0);
INSERT INTO `sys_role_menu` VALUES (1292, 1, 29, 0);
INSERT INTO `sys_role_menu` VALUES (1295, 1, 31, 0);
INSERT INTO `sys_role_menu` VALUES (1296, 1, 32, 0);
INSERT INTO `sys_role_menu` VALUES (1297, 1, 33, 0);
INSERT INTO `sys_role_menu` VALUES (1298, 1, 34, 0);
INSERT INTO `sys_role_menu` VALUES (1299, 1, 43, 0);
INSERT INTO `sys_role_menu` VALUES (1300, 1, 35, 0);
INSERT INTO `sys_role_menu` VALUES (1302, 1, 38, 0);
INSERT INTO `sys_role_menu` VALUES (1306, 1, 1, 0);
INSERT INTO `sys_role_menu` VALUES (1307, 1, 3, 0);
INSERT INTO `sys_role_menu` VALUES (1308, 1, 64, 0);
INSERT INTO `sys_role_menu` VALUES (1309, 1, 65, 0);
INSERT INTO `sys_role_menu` VALUES (1310, 1, 2, 0);
INSERT INTO `sys_role_menu` VALUES (1311, 1, 23, 0);
INSERT INTO `sys_role_menu` VALUES (1312, 1, 24, 0);
INSERT INTO `sys_role_menu` VALUES (1313, 1, 25, 0);
INSERT INTO `sys_role_menu` VALUES (1314, 1, 26, 0);
INSERT INTO `sys_role_menu` VALUES (1315, 1, 27, 0);
INSERT INTO `sys_role_menu` VALUES (1316, 1, 44, 0);
INSERT INTO `sys_role_menu` VALUES (1345, 2, 21, 0);
INSERT INTO `sys_role_menu` VALUES (1346, 2, 29, 0);
INSERT INTO `sys_role_menu` VALUES (1349, 2, 31, 0);
INSERT INTO `sys_role_menu` VALUES (1350, 2, 32, 0);
INSERT INTO `sys_role_menu` VALUES (1351, 2, 33, 0);
INSERT INTO `sys_role_menu` VALUES (1352, 2, 34, 0);
INSERT INTO `sys_role_menu` VALUES (1353, 2, 43, 0);
INSERT INTO `sys_role_menu` VALUES (1354, 2, 35, 0);
INSERT INTO `sys_role_menu` VALUES (1356, 2, 38, 0);
INSERT INTO `sys_role_menu` VALUES (1360, 2, 1, 0);
INSERT INTO `sys_role_menu` VALUES (1361, 2, 3, 0);
INSERT INTO `sys_role_menu` VALUES (1362, 2, 64, 0);
INSERT INTO `sys_role_menu` VALUES (1363, 2, 2, 0);
INSERT INTO `sys_role_menu` VALUES (1364, 2, 23, 0);
INSERT INTO `sys_role_menu` VALUES (1365, 2, 24, 0);
INSERT INTO `sys_role_menu` VALUES (1366, 2, 25, 0);
INSERT INTO `sys_role_menu` VALUES (1367, 2, 26, 0);
INSERT INTO `sys_role_menu` VALUES (1368, 2, 27, 0);
INSERT INTO `sys_role_menu` VALUES (1371, 2, 44, 0);
INSERT INTO `sys_role_menu` VALUES (1380, 1, 28, 0);
INSERT INTO `sys_role_menu` VALUES (1381, 2, 28, 0);
INSERT INTO `sys_role_menu` VALUES (1382, 1, 30, 0);
INSERT INTO `sys_role_menu` VALUES (1383, 2, 30, 0);
INSERT INTO `sys_role_menu` VALUES (1384, 1, 36, 0);
INSERT INTO `sys_role_menu` VALUES (1385, 2, 36, 0);
INSERT INTO `sys_role_menu` VALUES (1386, 1, 39, 0);
INSERT INTO `sys_role_menu` VALUES (1387, 2, 39, 0);
INSERT INTO `sys_role_menu` VALUES (1392, 1, 42, 0);
INSERT INTO `sys_role_menu` VALUES (1393, 2, 42, 0);
INSERT INTO `sys_role_menu` VALUES (1394, 1, 69, 0);
INSERT INTO `sys_role_menu` VALUES (1395, 45, 21, 0);
INSERT INTO `sys_role_menu` VALUES (1396, 45, 70, 0);

-- ----------------------------
-- Table structure for sys_role_permission
-- ----------------------------
DROP TABLE IF EXISTS `sys_role_permission`;
CREATE TABLE `sys_role_permission`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '关系表id',
  `role_id` bigint NOT NULL COMMENT '角色id',
  `permission_id` bigint NOT NULL COMMENT '权限id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 269 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_role_permission
-- ----------------------------
INSERT INTO `sys_role_permission` VALUES (162, 1, 7);
INSERT INTO `sys_role_permission` VALUES (163, 1, 8);
INSERT INTO `sys_role_permission` VALUES (164, 1, 9);
INSERT INTO `sys_role_permission` VALUES (165, 1, 10);
INSERT INTO `sys_role_permission` VALUES (166, 1, 11);
INSERT INTO `sys_role_permission` VALUES (167, 1, 12);
INSERT INTO `sys_role_permission` VALUES (168, 1, 13);
INSERT INTO `sys_role_permission` VALUES (170, 1, 15);
INSERT INTO `sys_role_permission` VALUES (171, 1, 16);
INSERT INTO `sys_role_permission` VALUES (172, 1, 17);
INSERT INTO `sys_role_permission` VALUES (173, 1, 18);
INSERT INTO `sys_role_permission` VALUES (174, 1, 19);
INSERT INTO `sys_role_permission` VALUES (175, 1, 20);
INSERT INTO `sys_role_permission` VALUES (176, 1, 21);
INSERT INTO `sys_role_permission` VALUES (177, 1, 22);
INSERT INTO `sys_role_permission` VALUES (178, 1, 23);
INSERT INTO `sys_role_permission` VALUES (179, 1, 24);
INSERT INTO `sys_role_permission` VALUES (180, 1, 27);
INSERT INTO `sys_role_permission` VALUES (181, 1, 28);
INSERT INTO `sys_role_permission` VALUES (182, 1, 30);
INSERT INTO `sys_role_permission` VALUES (183, 1, 31);
INSERT INTO `sys_role_permission` VALUES (184, 1, 33);
INSERT INTO `sys_role_permission` VALUES (185, 1, 34);
INSERT INTO `sys_role_permission` VALUES (186, 1, 35);
INSERT INTO `sys_role_permission` VALUES (192, 1, 5);
INSERT INTO `sys_role_permission` VALUES (193, 1, 6);
INSERT INTO `sys_role_permission` VALUES (198, 1, 36);
INSERT INTO `sys_role_permission` VALUES (199, 1, 37);
INSERT INTO `sys_role_permission` VALUES (200, 1, 38);
INSERT INTO `sys_role_permission` VALUES (201, 1, 14);
INSERT INTO `sys_role_permission` VALUES (203, 2, 7);
INSERT INTO `sys_role_permission` VALUES (211, 1, 87);
INSERT INTO `sys_role_permission` VALUES (212, 1, 45);
INSERT INTO `sys_role_permission` VALUES (213, 1, 91);
INSERT INTO `sys_role_permission` VALUES (214, 1, 92);
INSERT INTO `sys_role_permission` VALUES (215, 1, 93);
INSERT INTO `sys_role_permission` VALUES (216, 1, 94);
INSERT INTO `sys_role_permission` VALUES (217, 1, 97);
INSERT INTO `sys_role_permission` VALUES (218, 1, 98);
INSERT INTO `sys_role_permission` VALUES (219, 1, 99);
INSERT INTO `sys_role_permission` VALUES (220, 1, 100);
INSERT INTO `sys_role_permission` VALUES (223, 1, 101);
INSERT INTO `sys_role_permission` VALUES (224, 1, 103);
INSERT INTO `sys_role_permission` VALUES (225, 1, 102);
INSERT INTO `sys_role_permission` VALUES (226, 1, 104);
INSERT INTO `sys_role_permission` VALUES (227, 1, 105);
INSERT INTO `sys_role_permission` VALUES (228, 1, 106);
INSERT INTO `sys_role_permission` VALUES (229, 1, 107);
INSERT INTO `sys_role_permission` VALUES (230, 1, 108);
INSERT INTO `sys_role_permission` VALUES (231, 1, 109);
INSERT INTO `sys_role_permission` VALUES (232, 1, 110);
INSERT INTO `sys_role_permission` VALUES (233, 1, 111);
INSERT INTO `sys_role_permission` VALUES (234, 1, 112);
INSERT INTO `sys_role_permission` VALUES (235, 1, 113);
INSERT INTO `sys_role_permission` VALUES (236, 1, 114);
INSERT INTO `sys_role_permission` VALUES (237, 1, 115);
INSERT INTO `sys_role_permission` VALUES (238, 1, 116);
INSERT INTO `sys_role_permission` VALUES (239, 1, 117);
INSERT INTO `sys_role_permission` VALUES (240, 1, 118);
INSERT INTO `sys_role_permission` VALUES (241, 1, 119);
INSERT INTO `sys_role_permission` VALUES (242, 1, 120);
INSERT INTO `sys_role_permission` VALUES (243, 1, 121);
INSERT INTO `sys_role_permission` VALUES (244, 1, 122);
INSERT INTO `sys_role_permission` VALUES (245, 1, 123);
INSERT INTO `sys_role_permission` VALUES (246, 1, 124);
INSERT INTO `sys_role_permission` VALUES (247, 1, 125);
INSERT INTO `sys_role_permission` VALUES (248, 1, 126);
INSERT INTO `sys_role_permission` VALUES (249, 1, 127);
INSERT INTO `sys_role_permission` VALUES (250, 1, 128);
INSERT INTO `sys_role_permission` VALUES (251, 1, 129);
INSERT INTO `sys_role_permission` VALUES (252, 1, 130);
INSERT INTO `sys_role_permission` VALUES (253, 1, 131);
INSERT INTO `sys_role_permission` VALUES (254, 1, 132);
INSERT INTO `sys_role_permission` VALUES (255, 1, 133);
INSERT INTO `sys_role_permission` VALUES (256, 1, 134);
INSERT INTO `sys_role_permission` VALUES (257, 1, 136);
INSERT INTO `sys_role_permission` VALUES (258, 1, 137);
INSERT INTO `sys_role_permission` VALUES (259, 1, 138);
INSERT INTO `sys_role_permission` VALUES (260, 1, 139);
INSERT INTO `sys_role_permission` VALUES (261, 1, 140);
INSERT INTO `sys_role_permission` VALUES (262, 1, 141);
INSERT INTO `sys_role_permission` VALUES (263, 1, 142);
INSERT INTO `sys_role_permission` VALUES (264, 1, 143);
INSERT INTO `sys_role_permission` VALUES (265, 1, 144);
INSERT INTO `sys_role_permission` VALUES (266, 1, 145);
INSERT INTO `sys_role_permission` VALUES (268, 1, 146);
INSERT INTO `sys_role_permission` VALUES (269, 1, 147);

-- ----------------------------
-- Table structure for sys_user
-- ----------------------------
DROP TABLE IF EXISTS `sys_user`;
CREATE TABLE `sys_user`  (
  `id` bigint UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '用户id',
  `nickname` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '用户昵称',
  `username` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '用户名',
  `gender` tinyint(1) NOT NULL DEFAULT 0 COMMENT '用户性别(0,未定义,1,男,2女)',
  `password` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '用户密码',
  `avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '用户头像',
  `intro` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '个人简介',
  `email` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '用户邮箱',
  `register_ip` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '注册ip',
  `register_type` tinyint NOT NULL COMMENT '注册方式(0邮箱/姓名 1Gitee 2Github)',
  `register_address` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '注册地址',
  `login_ip` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '最近登录ip',
  `login_address` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '最近登录地址',
  `login_type` tinyint NULL DEFAULT NULL COMMENT '最近登录类型(0邮箱/姓名 1Gitee 2Github)',
  `login_time` datetime NOT NULL COMMENT '用户最近登录时间',
  `is_disable` tinyint(1) NOT NULL DEFAULT 0 COMMENT '是否禁用 (0否 1是)',
  `create_time` datetime NOT NULL COMMENT '用户创建时间',
  `update_time` datetime NOT NULL COMMENT '用户更新时间',
  `is_deleted` tinyint(1) NOT NULL DEFAULT 0 COMMENT '是否删除（0：未删除，1：已删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 14164386 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_user
-- ----------------------------
INSERT INTO `sys_user` VALUES (1, 'test', 'test', 0, '$2a$10$VyFtQ3T943p3NY5R0IxzIONjdqABmuCSGiHe5uV8d1ujLGYuS2KZe', 'https://s21.ax1x.com/2024/03/13/pFc3w1U.jpg', '该用户比较懒还未添加简介', 'ruyusan@qq.com', '127.0.0.1', 0, '内网IP', '127.0.0.1', '内网IP', 0, '2023-12-21 19:29:37', 0, '2023-10-13 15:16:01', '2024-03-12 15:36:55', 0);
INSERT INTO `sys_user` VALUES (15, 'test', 'test', 0, '$2a$10$03DwMR0YxjV7KJ.D9YSPwO0qUwIT8lF1mw89SsKrUVIPVK5M2818y', 'https://s21.ax1x.com/2024/03/13/pFc3w1U.jpg', '这个人很懒，什么都没有留下', 'ruyusans@qq.com', '127.0.0.1', 0, '内网IP', '127.0.0.1', '内网IP', 0, '2023-11-30 15:50:58', 0, '2023-10-18 21:26:31', '2024-02-28 10:37:26', 1);
INSERT INTO `sys_user` VALUES (16, '鱼民', 'fish', 0, '$2a$10$x164.TWD/FmyrWZVGuBmDupOdMiOD.vzhlivzMlx27mhjrJON0nv.', 'https://s21.ax1x.com/2024/03/13/pFc3w1U.jpg', '这个人很懒，什么都没有留下', '2667657399@qq.com', '127.0.0.1', 0, '内网IP', NULL, NULL, NULL, '2024-03-11 19:11:43', 0, '2024-03-11 19:11:43', '2024-03-11 19:11:43', 0);
INSERT INTO `sys_user` VALUES (55, 'seaflows', 'seaflows', 0, '$2a$10$EenFjoiTmHuifyXGjo7lI.x7S5RPnJpdRYJAv8Fsf2m2cmj/ezzgC', 'https://gitee.com/assets/no_portrait.png', NULL, NULL, '127.0.0.1', 1, '内网IP', '127.0.0.1', '内网IP', 1, '2024-03-13 11:31:47', 0, '2024-03-13 11:31:47', '2024-03-13 11:31:47', 0);
INSERT INTO `sys_user` VALUES (66, 'seaflows', 'seaflows', 0, '$2a$10$LJ6a7Uz9rLp6B/IF69q80Oa5bGyvDh.DlnxTE2f8Lcs6RanY2VK42', 'https://gitee.com/assets/no_portrait.png', NULL, NULL, '127.0.0.1', 1, '内网IP', '127.0.0.1', '内网IP', 1, '2024-03-13 13:19:07', 0, '2024-03-13 13:19:07', '2024-03-13 14:42:57', 0);
INSERT INTO `sys_user` VALUES (14164386, 'seaflows', 'seaflows', 0, '$2a$10$cz1epfasNLNyueRbpj3qXumFlaeFAiL2aw..CAOfk2/yBe6ydBDdO', 'https://gitee.com/assets/no_portrait.png', NULL, NULL, '127.0.0.1', 1, '内网IP', '127.0.0.1', '内网IP', 1, '2024-03-14 12:59:35', 0, '2024-03-14 12:59:35', '2024-05-10 17:58:07', 0);

-- ----------------------------
-- Table structure for sys_user_role
-- ----------------------------
DROP TABLE IF EXISTS `sys_user_role`;
CREATE TABLE `sys_user_role`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `user_id` int NOT NULL COMMENT '用户id',
  `role_id` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '角色id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_user_role
-- ----------------------------
INSERT INTO `sys_user_role` VALUES (1, 16, '1');

-- ----------------------------
-- Table structure for sys_website_info
-- ----------------------------
DROP TABLE IF EXISTS `sys_website_info`;
CREATE TABLE `sys_website_info`  (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `webmaster_avatar` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '站长头像',
  `webmaster_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '站长名称',
  `webmaster_copy` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '站长文案',
  `webmaster_profile_background` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '站长资料卡背景图',
  `gitee_link` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT 'gitee链接',
  `github_link` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT 'github链接',
  `website_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '网站名称',
  `header_notification` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '头部通知',
  `sidebar_announcement` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '侧面公告',
  `record_info` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT '备案信息',
  `start_time` datetime NULL DEFAULT NULL COMMENT '开始运行时间',
  `create_time` datetime NOT NULL COMMENT '用户创建时间',
  `update_time` datetime NOT NULL COMMENT '用户更新时间',
  `is_deleted` tinyint(1) NOT NULL DEFAULT 0 COMMENT '是否删除（0：未删除，1：已删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of sys_website_info
-- ----------------------------
INSERT INTO `sys_website_info` VALUES (1, 'https://s21.ax1x.com/2024/03/13/pFc3dpT.jpg', '盯鱼', '通向一切高度和深度的东西就是爱', 'https://s11.ax1x.com/2023/07/13/pCh5L5T.jpg', 'https://gitee.com/seachil', 'https://github.com/Wwwsea', 'myShrike - 鸟窝', '欢迎访问我的网站，这里是分享鸟类信息的网站，祝你玩的开心', '欢迎指出网站的不足，给我提供意见', '备案信息', '2023-12-20 16:00:25', '2023-12-23 14:28:10', '2024-03-06 12:38:24', 0);

-- ----------------------------
-- Table structure for t_article
-- ----------------------------
DROP TABLE IF EXISTS `t_article`;
CREATE TABLE `t_article`  (
  `id` bigint UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '文章id',
  `user_id` bigint NOT NULL COMMENT '作者id',
  `category_id` bigint NOT NULL COMMENT '分类id',
  `article_cover` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '文章缩略图',
  `article_title` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '文章标题',
  `article_content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '文章内容',
  `article_type` tinyint NOT NULL COMMENT '类型 (1原创 2转载 3翻译)',
  `is_top` tinyint NOT NULL COMMENT '是否置顶 (0否 1是）',
  `status` tinyint NOT NULL COMMENT '文章状态 (1公开 2私密 3草稿)',
  `visit_count` bigint NOT NULL DEFAULT 0 COMMENT '访问量',
  `create_time` datetime NOT NULL COMMENT '文章创建时间',
  `update_time` datetime NOT NULL COMMENT '文章更新时间',
  `is_deleted` tinyint NOT NULL DEFAULT 0 COMMENT '是否删除（0：未删除，1：已删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 50 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_article
-- ----------------------------
INSERT INTO `t_article` VALUES (32, 1, 4, 'http://43.136.78.47:9000/blog/article/articleCover/d4574635-ba1d-4c01-beda-1ad25c4db0e3.png', '测试文章', '## 这是一篇测试文章\n> 你看见这篇文章说明后台发布文章功能成功\n\n```mermaid\ngantt\ntitle A Gantt Diagram\ndateFormat  YYYY-MM-DD\nsection Section\nA task  :a1, 2014-01-01, 30d\nAnother task  :after a1, 20d\n```\n\n### 图表\n```mermaid\nclassDiagram\n  class Animal\n  Vehicle <|-- Car\n```\n', 1, 0, 1, 17, '2024-01-04 21:32:19', '2024-03-14 11:28:34', 1);
INSERT INTO `t_article` VALUES (33, 1, 2, 'http://43.136.78.47:9000/blog/article/articleCover/4580f62d-0548-47c5-8e94-42fb4dae1560.png', '图片上传', '# 测试图片上传\n## 下面是预览图\n> ![](http://43.136.78.47:9000/blog/article/articleImage/bc35310c-fe3c-487b-9d06-e2d66bec9a3a.gif)\n### 剪切上传\n![](http://43.136.78.47:9000/blog/article/articleImage/1f0b3ec4-91aa-4165-b1f8-060e89baf783.png)\n![](http://43.136.78.47:9000/blog/article/articleImage/0d45c380-4f54-42e6-8c94-fb589c6444f2.gif)\n', 1, 0, 1, 1, '2024-01-05 16:49:37', '2024-01-09 23:53:42', 1);
INSERT INTO `t_article` VALUES (37, 1, 1, 'http://43.136.78.47:9000/blog/article/articleCover/72494e09-3fae-4a7d-bfe9-37108bfd3766.png', '测是AA', '顶顶顶', 1, 0, 1, 0, '2024-01-08 10:39:36', '2024-01-09 23:47:46', 1);
INSERT INTO `t_article` VALUES (38, 1, 5, 'http://43.136.78.47:9000/blog/article/articleCover/152113cc-ea0e-451e-8912-4eea8ba5096f.png', '测试添加', '| col | col | col | col |\n| - | - | - | - |\n| content | content | content | content |\n| content | content | content | content |\n| content | content | content | content |\n```mermaid\nerDiagram\n  CAR ||--o{ NAMED-DRIVER : allows\n  PERSON ||--o{ NAMED-DRIVER : is\n```\n```mermaid\njourney\n  title My working day\n  section Go to work\n    Make tea: 5: Me\n    Go upstairs: 3: Me\n    Do work: 1: Me, Cat\n  section Go home\n    Go downstairs: 5: Me\n    Sit down: 5: Me\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n', 1, 0, 1, 0, '2024-01-08 10:49:50', '2024-01-09 23:44:35', 1);
INSERT INTO `t_article` VALUES (39, 1, 2, 'http://43.136.78.47:9000/blog/article/articleCover/ba380480-c8d6-40aa-822a-6105e03eb259.jpg', '测试删除', '删除', 1, 0, 1, 0, '2024-01-09 23:51:49', '2024-01-09 23:53:42', 1);
INSERT INTO `t_article` VALUES (40, 1, 1, 'http://43.136.78.47:9000/blog/article/articleCover/cfce7f30-f9e7-4ca4-81b9-c0831cc9c221.png', '测试', '新文章', 1, 0, 1, 16, '2024-02-28 14:05:36', '2024-03-14 11:28:37', 1);
INSERT INTO `t_article` VALUES (41, 16, 6, 'http://127.0.0.1:9005/test/article/articleCover/8317c319-6f23-4174-afc9-179e8de973ea.jpg', '非洲鸵鸟', '## 测试文件', 1, 0, 1, 2, '2024-03-14 11:12:42', '2024-03-14 11:12:42', 0);
INSERT INTO `t_article` VALUES (42, 16, 7, 'http://127.0.0.1:9005/test/article/articleCover/296fd6a7-c585-4f11-bf5f-43eaee733d91.jpg', 'test', '## 还是一篇测试文章', 1, 1, 1, 1, '2024-03-14 12:48:15', '2024-05-11 17:11:27', 1);
INSERT INTO `t_article` VALUES (43, 16, 8, 'http://127.0.0.1:9005/test/article/articleCover/96bedb1b-a93a-4a4d-bffe-a01074917051.jpg', '角叫鸭', '## 这是一篇关于角叫鸭的介绍\n![](http://127.0.0.1:9005/test/article/articleImage/834ae260-85f7-4ec2-b064-206c89b3e706.jpg)\n*在南美大陆上，有一种非常神秘的动物正等着我们探访。它身为雁鸭，身材体貌却迥异同类；鸟喙如鸡、头生硬角，还天生一副大嗓门——它就是鸟类独一档，人送外号“击剑贵族”与“喧嚣狂徒”的角叫鸭。*\n\n在热气蒸腾、雨林密布的南美洲大地上，有一种非常神秘的动物正在等待着我们的探访。\n\n它身为雁鸭类，身材体貌却迥异同类；鸟喙如鸡、头生硬角，宛若深海垂钓的大嘴鮟鱇，容貌怪异至极。\n\n它健走爱游水，却全身覆羽，轻盈善飞，骨骼含气度堪称鸟类之最！它拥有极高的语言天赋，不仅自创了一套“鸟语”，还天生一副大嗓门，其音发出后，相隔三公里亦清晰可闻。\n\n它就是南美鸟类独一档，人送外号“击剑贵族”与“喧嚣狂徒”的角叫鸭。\n\n<div align=\"center\">\n  <iframe src=\"//player.bilibili.com/player.html?aid=644729401&bvid=BV1FY4y1F7Kz&cid=810072630&p=0&autoplay=0\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"false\"  height=\"498\" width=\"510\"> </iframe>\n</div>\n\n\n一石四鸟，生活无忧\n角叫鸭为南美洲特有物种，为雁形目叫鸭科下独一属独一种之同名物种，其学名为Anhima cornuta，由“生物分类学之父”卡尔·林奈爵士亲自操刀命名。\n\n角叫鸭虽属留鸟，但活动范围甚广，广泛分布于南美大陆的中北部区域，栖地涵盖玻利维亚、巴西、哥伦比亚、秘鲁、巴拉圭和委内瑞拉等国，甚至在加勒比海诸国甚或美国、墨西哥都能看见其身影。\n\n它们惯常栖息于热带雨林、沼泽、河谷与平原草地地带，一般栖息高度不会超过海拔800米，为典型的“再往上住就高反给你看”一族。', 1, 0, 1, 3, '2024-03-28 21:26:19', '2024-03-28 21:41:25', 0);
INSERT INTO `t_article` VALUES (44, 16, 6, 'http://127.0.0.1:9005/test/article/articleCover/23ab34cb-3090-4d05-b5be-ff9537a96c55.jpg', '测试', '# 一篇为了测试es发表的测试文章\n## test again\n### 问什么测不出来啊！！！！！！', 1, 0, 1, 0, '2024-04-13 13:06:31', '2024-05-11 17:11:24', 1);
INSERT INTO `t_article` VALUES (45, 16, 11, 'test ES 000004', 'test ES 000004', 'test ES 000004', 1, 1, 1, 0, '2024-04-30 19:46:22', '2024-05-11 17:11:22', 1);
INSERT INTO `t_article` VALUES (46, 16, 12, 'http://127.0.0.1:9005/test/article/articleCover/0f3b28a7-bb47-4caa-a485-d841407d81f8.jpg', '猫头鹰Flaco', '我们曾经给大家介绍过Flaco。\n它是一只雄性的欧亚雕鸮，这种鸟分布在欧亚大陆上，是世界上最大的猫头鹰品种之一。\n2010年，Flaco出生在美国北卡罗莱纳州的一个鸟类公园里，不到一岁，它就被送到了位于纽约的中央公园动物园。\n图片\n![flaco1](https://inews.gtimg.com/news_bt/OjjCAQDo7mYO9tbCS02jIuPfX6I1M_QadDEhxUdcN9h_8AA/641)\n\n（动物园里的Flaco）\nFlaco在这里生活了12年，直到2023年的2月，有人破坏了动物园的防护网，放跑了Flaco。\nFlaco逃跑之后，很快就引起了公众和媒体的关注，一方面是因为人们对它很好奇，另一方面，人们也很担心它。\n因为Flaco并不是北美本土物种，更何况在动物园里被囚禁了12年，人们担心它能否在野外生活下去。\n图片\n（逃跑一周时的Flaco，已经饿瘦了）\n幸好在逃跑一周后，Flaco的血脉觉醒，很快就掌握了捕猎技巧。\n从这之后，动物园再也抓不到Flaco了……\n他们试过食物诱捕，试过用同类的声音呼唤，但品尝到自由滋味的Flaco再也不肯回到笼子里了。\n![不肯进笼子](https://inews.gtimg.com/news_bt/OXAbffCx0no6ffPYTw2yxVQilkODo8AjdaAY3D1BJdTWcAA/641)\n\n（不肯进笼子的Flaco）\n看到Flaco在野外过得这么开心，不少网友为它请愿，希望它能继续在野外生活。\n动物园也就顺水推舟，承诺暂停抓捕Flaco，让它继续留在野外，并且会保持监视，如果出现了意外，动物园会立刻对它实施救助。\n\n（野外的Flaco）\n接下来的一年，Flaco确实过得非常惬意。\n它生活在中央公园附近的屋顶、水塔或者其它建筑上，避开行人和车辆，\n\n（在栏杆上休息的Flaco）\n每当它出现在人们的视野当中，都会成为人们瞩目的焦点。\n\n（正在拍摄Flaco的观鸟者们）\n在纽约这个地方，Flaco从来不缺吃喝。\n凭借着高超的捕猎技巧下，它甚至过得比在动物园里还要健康，漂亮了。\n\n（捕猎成功的Flaco）\n去年11月，Flaco甚至离开了它最熟悉的中央公园，开始探索整个城市了。它有时候跑到曼哈顿东村的雕塑花园看看，有时候飞到下东区逛逛，\n\n（流浪中的Flaco）\n一周后，它又回到了中央公园附近，挨家挨户地守在人类的窗前，透过小小的窗子，观察人类的生活。\n这次，轮到它来看了……\n\n（好奇的Flaco）\n有人猜，Flaco可能是寂寞了。\n因为11月前后是欧亚雕鸮的发情季节，Flaco四处流浪也许是在寻找爱情，可惜美国境内没有野生的欧亚雕鸮，所以这注定是一场无疾而终的爱情流浪……\n\n（孤独的Flaco）\n就这样，全纽约的观鸟爱好者关注着Flaco的一举一动，替它欢喜，替它遗憾……\n人们的心随着它的飞行轨迹，被牵动得七上八下。\n到了2024年的2月2日，在它越狱一周年后，连《纽约时报》都发文，庆祝这个值得纪念的日子。\n![纽约时报](https://inews.gtimg.com/news_bt/OZFVD4McVRMLJI1lq_jBMByr99gKwPU6SNch_4AKjoqSQAA/641)\n\n（《纽约时报》标题）\n然而意外却突然发生了……\n2月23日，距离它“越狱”一周年还不到一个月，Flaco被人们发现倒在街边，伤势严重。\n居民报警后，附近的野鸟基金会立刻赶来提供帮助，可不久之后，Flaco还是离开了这个世界……\n![flaco](https://inews.gtimg.com/news_bt/O285xrnkKS6e65fKHEv_bJw-2_scU8RL-aelRN00JLVswAA/641)\n\n（Flaco）\n基金会报告说，Flaco的胸部和右眼受伤，根据推测，它可能是在飞行期间与建筑物相撞，因碰撞或摔落地面而受伤的。\n目前Flaco的尸体已经被送走进行尸检，确认造成它碰撞的原因，是禽流感、老鼠药中毒、铅中毒还是其它什么……\n可不管怎么样，Flaco的离世已经是无法改变的事实了，这个消息也让网友们十分悲痛。每个热爱它的网友，都发了一段关于它的照片或者视频，向它表示悼念：\nFlaco好好休息，我们会想念你的。\n\n我们爱你Flaco，我们会很想你的。\n\n安息吧，亲爱的Flaco。\n你是那么美丽，给我们带来了欢乐，也给我们带来了一个伟大的励志生存故事。很高兴你享受了一年的自由，真希望你能再飞几年……\n我们都会想你的！\n\n自从Flaco“越狱”之后，人们给了它许多称呼，\n有人说它是“一个成功为自己生命写下第二幕的亡命英雄”，也有人说“随着时间的推移，Flaco成为了自由和坚韧的象征”。\n\n这大概也是人们如此怀念它的理由了。\n在一片钢筋混凝土组成的城市森林中，肆意翱翔的Flaco似乎成了人类与自然最后的连接。\nFlaco承载着人们对自由的向往，也许它不再能继续飞翔了，但它至少曾经自由过，也没有死在牢笼的禁锢之下。\nR.I.P.  自由的Flaco。\n![安息](https://inews.gtimg.com/news_bt/OT6SF1e8s_HlmUl5MJipGcGNvJta0xAl4dYSSAoNzHOOQAA/641)\n\n（Flaco）', 1, 0, 1, 0, '2024-05-01 20:49:43', '2024-05-01 20:49:43', 0);
INSERT INTO `t_article` VALUES (47, 16, 13, 'http://127.0.0.1:9005/test/article/articleCover/9e79806f-a92a-4610-b9ac-b3cb74fa4b87.jpg', '红角鸮', '\n# 红角鸮-外形描述\n描述：体小(20厘米)的\"有耳\"型角鸮。眼黄色，体羽多纵纹。有棕色型和灰色型之分。与叫声有异的东方角鸮在分布上无重叠。 详细见： →西红角鸮百科 \n\n虹膜—黄色；嘴—角质色；脚—褐灰。\n\n# 红角鸮-叫声\n叫声：为深沉单调的chook声，约三秒钟重复一次，声似蟾鸣。雌鸟叫声较雄鸟略高。 \n\n叫声欣赏：\n<audio id=\"audio\" controls=\"\" preload=\"none\">\n      <source id=\"mp3\" src=\"http://127.0.0.1:9005/test/article/video/%E7%BA%A2%E8%A7%92%E9%B8%AE.mp3\">\n\n# 红角鸮-地理分布\n红角鸮的地理分布图\n留鸟候鸟冬候鸟繁殖鸟\n分布范围：古北界西部至中东及中亚。\n\n分布状况：在中国的分布极为有限。亚种pulchellus繁殖于新疆西部的天山及喀什地区。\n![分布](https://www.ibirding.cn/birding/map/b0229.jpg!w336.jpg)\n\n\n# 红角鸮-生活习性\n习性：候鸟。纯夜行性的小型角鸮，喜有树丛的开阔原野。\n\n# 红角鸮-别名俗名\n大头鹰 恨狐 横虎 呼侉鹰 老兔 猫头鹰 王哥哥 乌拉包尔－乌尔巴 夜猫子 夜食鹰\n\n![鸮1](https://www.ibirding.cn/birding/image/b0229.jpg!w336.jpg)\n\n虹膜黄色，嘴黑灰色，周围有白色，先端近黄色。脚趾基部有羽毛，灰褐色，爪子呈黑褐色。\n\n其他亚种：上面有更多的斑点和条纹，下体的花纹和红褐色与指名亚种相似，但底色呈灰棕色或红灰色。\n\n大小量度：体重75-95克；体长170-210毫米；嘴峰♂15-19毫米，♀12-20毫米；翼长119-158毫米；尾长49-75毫米；跗蹠♂24-27毫米，♀24-28毫米。（注：♂雄性；♀雌性） \n\n近种区别\n\n\n# 视频欣赏\n<iframe src=\"//player.bilibili.com/player.html?aid=1003571464&bvid=BV1wx4y167sJ&cid=1521644875&p=0&high_quality=1&danmaku=0\"  allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"> </iframe>', 2, 0, 1, 0, '2024-05-11 13:00:04', '2024-05-11 13:00:04', 0);
INSERT INTO `t_article` VALUES (48, 16, 11, 'http://127.0.0.1:9005/test/article/articleCover/5bfa126f-2860-423c-9bee-dd8a9536b349.jpg', 'test111', '# 这只是一篇测试文章\n随便看看就好了\n', 1, 0, 1, 0, '2024-05-11 15:44:17', '2024-05-11 17:08:15', 1);
INSERT INTO `t_article` VALUES (49, 16, 11, 'http://127.0.0.1:9005/test/article/articleCover/dbbd8fc2-0d34-4ceb-adec-89730bc2e09b.jpg', 'test111111', '# 还是一片测试文章\n## 我服了最后一次改bug\n随便插个图片![](http://127.0.0.1:9005/test/article/articleImage/7172fac1-4684-4795-8203-bc8b93604506.jpg)\n', 1, 0, 1, 0, '2024-05-11 15:48:17', '2024-05-11 17:08:08', 1);

-- ----------------------------
-- Table structure for t_article_tag
-- ----------------------------
DROP TABLE IF EXISTS `t_article_tag`;
CREATE TABLE `t_article_tag`  (
  `id` bigint UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '关系表id',
  `article_id` bigint UNSIGNED NOT NULL COMMENT '文章id',
  `tag_id` bigint NOT NULL COMMENT '标签id',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `is_deleted` tinyint NOT NULL DEFAULT 0 COMMENT '是否删除（0：未删除，1：已删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 90 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_article_tag
-- ----------------------------
INSERT INTO `t_article_tag` VALUES (1, 1, 1, '2023-10-15 02:04:40', 1);
INSERT INTO `t_article_tag` VALUES (2, 1, 2, '2023-10-15 02:04:47', 1);
INSERT INTO `t_article_tag` VALUES (3, 1, 3, '2023-10-15 02:04:57', 1);
INSERT INTO `t_article_tag` VALUES (28, 24, 2, '2023-10-29 23:07:40', 1);
INSERT INTO `t_article_tag` VALUES (29, 2, 3, '2023-10-15 02:04:57', 1);
INSERT INTO `t_article_tag` VALUES (30, 2, 1, '2023-10-15 02:04:57', 1);
INSERT INTO `t_article_tag` VALUES (31, 3, 3, '2023-10-15 02:04:57', 1);
INSERT INTO `t_article_tag` VALUES (32, 3, 5, '2023-10-30 10:16:22', 1);
INSERT INTO `t_article_tag` VALUES (33, 24, 4, '2023-10-30 10:16:36', 1);
INSERT INTO `t_article_tag` VALUES (34, 27, 2, '2024-01-04 17:11:13', 1);
INSERT INTO `t_article_tag` VALUES (35, 27, 3, '2024-01-04 17:11:13', 1);
INSERT INTO `t_article_tag` VALUES (36, 27, 4, '2024-01-04 17:11:13', 1);
INSERT INTO `t_article_tag` VALUES (37, 28, 2, '2024-01-04 17:22:13', 1);
INSERT INTO `t_article_tag` VALUES (38, 28, 3, '2024-01-04 17:22:13', 1);
INSERT INTO `t_article_tag` VALUES (39, 28, 4, '2024-01-04 17:22:13', 1);
INSERT INTO `t_article_tag` VALUES (40, 29, 5, '2024-01-04 17:46:31', 1);
INSERT INTO `t_article_tag` VALUES (41, 29, 4, '2024-01-04 17:46:31', 1);
INSERT INTO `t_article_tag` VALUES (42, 30, 2, '2024-01-04 17:47:07', 1);
INSERT INTO `t_article_tag` VALUES (43, 31, 3, '2024-01-04 17:47:35', 1);
INSERT INTO `t_article_tag` VALUES (44, 31, 5, '2024-01-04 17:47:35', 1);
INSERT INTO `t_article_tag` VALUES (45, 32, 3, '2024-01-04 21:32:19', 1);
INSERT INTO `t_article_tag` VALUES (46, 32, 2, '2024-01-04 21:32:19', 1);
INSERT INTO `t_article_tag` VALUES (47, 33, 2, '2024-01-05 16:49:37', 1);
INSERT INTO `t_article_tag` VALUES (48, 33, 3, '2024-01-05 16:49:37', 1);
INSERT INTO `t_article_tag` VALUES (49, 2, 1, '2024-01-08 10:30:26', 1);
INSERT INTO `t_article_tag` VALUES (50, 2, 3, '2024-01-08 10:30:26', 1);
INSERT INTO `t_article_tag` VALUES (51, 2, 1, '2024-01-08 10:30:41', 1);
INSERT INTO `t_article_tag` VALUES (52, 2, 3, '2024-01-08 10:30:41', 1);
INSERT INTO `t_article_tag` VALUES (53, 2, 1, '2024-01-08 10:31:48', 1);
INSERT INTO `t_article_tag` VALUES (54, 2, 3, '2024-01-08 10:31:48', 1);
INSERT INTO `t_article_tag` VALUES (55, 34, 5, '2024-01-08 10:37:04', 1);
INSERT INTO `t_article_tag` VALUES (56, 35, 5, '2024-01-08 10:37:19', 1);
INSERT INTO `t_article_tag` VALUES (57, 36, 3, '2024-01-08 10:38:13', 1);
INSERT INTO `t_article_tag` VALUES (58, 37, 4, '2024-01-08 10:39:36', 1);
INSERT INTO `t_article_tag` VALUES (59, 37, 2, '2024-01-08 10:39:36', 1);
INSERT INTO `t_article_tag` VALUES (60, 3, 3, '2024-01-08 10:41:42', 1);
INSERT INTO `t_article_tag` VALUES (61, 3, 5, '2024-01-08 10:41:42', 1);
INSERT INTO `t_article_tag` VALUES (62, 37, 2, '2024-01-08 10:42:07', 1);
INSERT INTO `t_article_tag` VALUES (63, 37, 4, '2024-01-08 10:42:07', 1);
INSERT INTO `t_article_tag` VALUES (64, 37, 2, '2024-01-08 10:43:01', 1);
INSERT INTO `t_article_tag` VALUES (65, 37, 4, '2024-01-08 10:43:01', 1);
INSERT INTO `t_article_tag` VALUES (66, 37, 2, '2024-01-08 10:43:19', 1);
INSERT INTO `t_article_tag` VALUES (67, 37, 4, '2024-01-08 10:43:19', 1);
INSERT INTO `t_article_tag` VALUES (68, 32, 2, '2024-01-08 10:44:57', 1);
INSERT INTO `t_article_tag` VALUES (69, 32, 3, '2024-01-08 10:44:57', 1);
INSERT INTO `t_article_tag` VALUES (70, 37, 2, '2024-01-08 10:47:44', 1);
INSERT INTO `t_article_tag` VALUES (71, 37, 4, '2024-01-08 10:47:44', 1);
INSERT INTO `t_article_tag` VALUES (72, 32, 2, '2024-01-08 10:48:06', 1);
INSERT INTO `t_article_tag` VALUES (73, 32, 3, '2024-01-08 10:48:06', 1);
INSERT INTO `t_article_tag` VALUES (74, 38, 4, '2024-01-08 10:49:50', 1);
INSERT INTO `t_article_tag` VALUES (75, 38, 3, '2024-01-08 10:49:50', 1);
INSERT INTO `t_article_tag` VALUES (76, 2, 1, '2024-01-08 10:57:52', 1);
INSERT INTO `t_article_tag` VALUES (77, 2, 3, '2024-01-08 10:57:52', 1);
INSERT INTO `t_article_tag` VALUES (78, 39, 2, '2024-01-09 23:51:49', 1);
INSERT INTO `t_article_tag` VALUES (79, 40, 2, '2024-02-28 14:05:36', 1);
INSERT INTO `t_article_tag` VALUES (80, 41, 15, '2024-03-14 11:12:42', 0);
INSERT INTO `t_article_tag` VALUES (81, 41, 16, '2024-03-14 11:12:42', 0);
INSERT INTO `t_article_tag` VALUES (82, 42, 17, '2024-03-14 12:48:15', 1);
INSERT INTO `t_article_tag` VALUES (83, 43, 18, '2024-03-28 21:26:19', 0);
INSERT INTO `t_article_tag` VALUES (84, 43, 18, '2024-03-28 21:41:25', 0);
INSERT INTO `t_article_tag` VALUES (85, 44, 19, '2024-04-13 13:06:31', 1);
INSERT INTO `t_article_tag` VALUES (86, 45, 19, '2024-04-30 19:46:22', 1);
INSERT INTO `t_article_tag` VALUES (87, 46, 20, '2024-05-01 20:49:43', 0);
INSERT INTO `t_article_tag` VALUES (88, 47, 20, '2024-05-11 13:00:04', 0);
INSERT INTO `t_article_tag` VALUES (89, 48, 14, '2024-05-11 15:44:17', 1);
INSERT INTO `t_article_tag` VALUES (90, 49, 14, '2024-05-11 15:48:17', 1);

-- ----------------------------
-- Table structure for t_category
-- ----------------------------
DROP TABLE IF EXISTS `t_category`;
CREATE TABLE `t_category`  (
  `id` bigint UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '分类id',
  `category_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '分类名',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NOT NULL COMMENT '更新时间',
  `is_deleted` tinyint NOT NULL DEFAULT 0 COMMENT '是否删除（0：未删除，1：已删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 13 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_category
-- ----------------------------
INSERT INTO `t_category` VALUES (1, 'test', '2023-10-15 02:03:42', '2024-03-14 12:34:58', 1);
INSERT INTO `t_category` VALUES (2, 'test1', '2023-10-15 02:03:53', '2024-03-14 12:35:01', 1);
INSERT INTO `t_category` VALUES (3, 'test2', '2023-10-15 02:04:04', '2024-03-14 12:35:03', 1);
INSERT INTO `t_category` VALUES (4, 'test3', '2024-01-04 11:23:27', '2024-03-14 12:35:06', 1);
INSERT INTO `t_category` VALUES (5, 'test6', '2024-01-08 10:48:43', '2024-01-18 22:52:54', 1);
INSERT INTO `t_category` VALUES (6, '鸵鸟科', '2024-03-13 19:55:28', '2024-03-13 19:55:28', 0);
INSERT INTO `t_category` VALUES (7, '鹬鸵科', '2024-03-14 12:46:29', '2024-03-14 12:46:29', 0);
INSERT INTO `t_category` VALUES (8, '鸟类', '2024-03-28 21:18:32', '2024-03-28 21:18:32', 0);
INSERT INTO `t_category` VALUES (9, 'xxx', '2024-01-18 22:53:01', '2024-01-18 22:53:06', 1);
INSERT INTO `t_category` VALUES (10, 'yyy', '2024-01-18 22:53:12', '2024-01-18 22:53:29', 1);
INSERT INTO `t_category` VALUES (11, 'testCate', '2024-04-20 15:38:43', '2024-04-20 15:38:43', 0);
INSERT INTO `t_category` VALUES (12, '欧亚雕鸮', '2024-05-01 20:37:56', '2024-05-01 20:37:56', 0);
INSERT INTO `t_category` VALUES (13, '鸮', '2024-05-11 12:57:28', '2024-05-11 12:57:28', 0);

-- ----------------------------
-- Table structure for t_chat_gpt
-- ----------------------------
DROP TABLE IF EXISTS `t_chat_gpt`;
CREATE TABLE `t_chat_gpt`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `user_id` bigint NOT NULL COMMENT '用户id',
  `conversation` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '会话记录',
  `is_check` tinyint(1) NOT NULL DEFAULT 1 COMMENT '是否有效 (0否 1是)',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NOT NULL COMMENT '修改时间',
  `is_deleted` tinyint(1) NOT NULL DEFAULT 0 COMMENT '是否删除（0：未删除，1：已删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 33 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_chat_gpt
-- ----------------------------
INSERT INTO `t_chat_gpt` VALUES (2, 15, '{\"content\":[{\"content\":\"你好\",\"type\":\"question\"},{\"content\":\"你好！有什么我可以帮助你的吗？\",\"type\":\"response\"},{\"content\":\"你能干嘛\",\"type\":\"question\"},{\"content\":\"作为一个AI助手，我能帮助你解答问题，提供信息，执行任务，进行翻译，计算等各种功能。你可以问我关于天气、时间、地理、历史、数学、翻译等方面的问题，我会尽力给出准确的答案。另外，如果你需要一些休闲娱乐，我也可以和你聊天、讲笑话、唱歌等。总体来说，只要是合法且合理的请求，我都会尽力满足。\",\"type\":\"response\"}],\"model\":\"gpt-3.5-turbo-0613\"}', 1, '2023-11-12 15:42:23', '2023-11-12 15:42:23', 1);
INSERT INTO `t_chat_gpt` VALUES (3, 15, '{\"content\":[{\"content\":\"\\\"成都今天的天气怎么样，适合出门运动吗?\\\"\",\"type\":\"question\"},{\"content\":\"很抱歉，作为一个语言模型，我无法提供实时的天气信息。您可以通过查看天气预报或者使用相关的天气应用程序来了解成都今天的天气状况，并查看是否适合出门运动。一般来说，如果天气晴朗，没有强风或降雨，运动是很不错的选择。\",\"type\":\"response\"},{\"content\":\"帮我用java写一段HelloWo\",\"type\":\"question\"},{\"content\":\"当然可以！以下是使用Java编写的简单的HelloWorld程序：\\n\\n```java\\npublic class HelloWorld {\\n    public static void main(String[] args) {\\n        System.out.println(\\\"Hello, World!\\\");\\n    }\\n}\\n```\\n\\n您可以将上述代码保存为HelloWorld.java文件，并运行它，将在控制台输出\\\"Hello, World!\\\"。希望对您有所帮助！\",\"type\":\"response\"}],\"model\":\"gpt-3.5-turbo-0613\"}', 1, '2023-11-12 15:44:03', '2023-11-12 15:44:03', 1);
INSERT INTO `t_chat_gpt` VALUES (4, 15, '{\"content\":[{\"content\":\"\\\"我该如何使用JavaScript来发起一个HTTP请求?\\\"\",\"type\":\"question\"},{\"content\":\"你可以使用JavaScript的内置函数`fetch()`来发起HTTP请求。以下是一个示例：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\')\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在上述示例中，我们使用`fetch()`函数来发起一个GET请求到`https://api.example.com/data`。返回的响应会被转换为JSON格式，然后在控制台中打印出来。如果发生了错误，错误信息也会被打印出来。\\n\\n你还可以通过传递一个可选的配置对象来自定义请求：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\', {\\n  method: \'POST\',\\n  headers: {\\n    \'Content-Type\': \'application/json\'\\n  },\\n  body: JSON.stringify({ name: \'John\', age: 30 })\\n})\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在这个示例中，我们发送一个包含JSON数据的POST请求，同时设置了请求头的`Content-Type`为`application/json`。\\n\\n`fetch()`函数返回一个Promise对象，所以你可以使用`.then()`来处理响应结果，`.catch()`来处理错误。你还可以使用其他方法来处理响应，比如将响应转换为Blob对象（`.blob()`），文本（`.text()`）或者通过流（`.body`）进行读取。\",\"type\":\"response\"}],\"model\":\"gpt-3.5-turbo-0613\"}', 1, '2023-11-12 16:48:39', '2023-11-12 16:48:39', 1);
INSERT INTO `t_chat_gpt` VALUES (5, 15, '{\"content\":[{\"content\":\"\\\"我该如何使用JavaScript来发起一个HTTP请求?\\\"\",\"type\":\"question\"},{\"content\":\"你可以使用JavaScript的内置函数`fetch()`来发起HTTP请求。以下是一个示例：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\')\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在上述示例中，我们使用`fetch()`函数来发起一个GET请求到`https://api.example.com/data`。返回的响应会被转换为JSON格式，然后在控制台中打印出来。如果发生了错误，错误信息也会被打印出来。\\n\\n你还可以通过传递一个可选的配置对象来自定义请求：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\', {\\n  method: \'POST\',\\n  headers: {\\n    \'Content-Type\': \'application/json\'\\n  },\\n  body: JSON.stringify({ name: \'John\', age: 30 })\\n})\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在这个示例中，我们发送一个包含JSON数据的POST请求，同时设置了请求头的`Content-Type`为`application/json`。\\n\\n`fetch()`函数返回一个Promise对象，所以你可以使用`.then()`来处理响应结果，`.catch()`来处理错误。你还可以使用其他方法来处理响应，比如将响应转换为Blob对象（`.blob()`），文本（`.text()`）或者通过流（`.body`）进行读取。\",\"type\":\"response\"}],\"model\":\"gpt-3.5-turbo-0613\"}', 1, '2023-11-12 16:50:23', '2023-11-12 16:50:23', 1);
INSERT INTO `t_chat_gpt` VALUES (6, 15, '{\"content\":[{\"content\":\"\\\"我该如何使用JavaScript来发起一个HTTP请求?\\\"\",\"type\":\"question\"},{\"content\":\"你可以使用JavaScript的内置函数`fetch()`来发起HTTP请求。以下是一个示例：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\')\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在上述示例中，我们使用`fetch()`函数来发起一个GET请求到`https://api.example.com/data`。返回的响应会被转换为JSON格式，然后在控制台中打印出来。如果发生了错误，错误信息也会被打印出来。\\n\\n你还可以通过传递一个可选的配置对象来自定义请求：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\', {\\n  method: \'POST\',\\n  headers: {\\n    \'Content-Type\': \'application/json\'\\n  },\\n  body: JSON.stringify({ name: \'John\', age: 30 })\\n})\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在这个示例中，我们发送一个包含JSON数据的POST请求，同时设置了请求头的`Content-Type`为`application/json`。\\n\\n`fetch()`函数返回一个Promise对象，所以你可以使用`.then()`来处理响应结果，`.catch()`来处理错误。你还可以使用其他方法来处理响应，比如将响应转换为Blob对象（`.blob()`），文本（`.text()`）或者通过流（`.body`）进行读取。\",\"type\":\"response\"}],\"model\":\"gpt-3.5-turbo-0613\"}', 1, '2023-11-12 16:52:31', '2023-11-12 16:52:31', 1);
INSERT INTO `t_chat_gpt` VALUES (7, 15, '{\"content\":[{\"content\":\"\\\"我该如何使用JavaScript来发起一个HTTP请求?\\\"\",\"type\":\"question\"},{\"content\":\"你可以使用JavaScript的内置函数`fetch()`来发起HTTP请求。以下是一个示例：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\')\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在上述示例中，我们使用`fetch()`函数来发起一个GET请求到`https://api.example.com/data`。返回的响应会被转换为JSON格式，然后在控制台中打印出来。如果发生了错误，错误信息也会被打印出来。\\n\\n你还可以通过传递一个可选的配置对象来自定义请求：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\', {\\n  method: \'POST\',\\n  headers: {\\n    \'Content-Type\': \'application/json\'\\n  },\\n  body: JSON.stringify({ name: \'John\', age: 30 })\\n})\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在这个示例中，我们发送一个包含JSON数据的POST请求，同时设置了请求头的`Content-Type`为`application/json`。\\n\\n`fetch()`函数返回一个Promise对象，所以你可以使用`.then()`来处理响应结果，`.catch()`来处理错误。你还可以使用其他方法来处理响应，比如将响应转换为Blob对象（`.blob()`），文本（`.text()`）或者通过流（`.body`）进行读取。\",\"type\":\"response\"}],\"model\":\"gpt-3.5-turbo-0613\"}', 1, '2023-11-12 16:52:34', '2023-11-12 16:52:34', 1);
INSERT INTO `t_chat_gpt` VALUES (8, 15, '{\"content\":[{\"content\":\"\\\"我该如何使用JavaScript来发起一个HTTP请求?\\\"\",\"type\":\"question\"},{\"content\":\"你可以使用JavaScript的内置函数`fetch()`来发起HTTP请求。以下是一个示例：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\')\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在上述示例中，我们使用`fetch()`函数来发起一个GET请求到`https://api.example.com/data`。返回的响应会被转换为JSON格式，然后在控制台中打印出来。如果发生了错误，错误信息也会被打印出来。\\n\\n你还可以通过传递一个可选的配置对象来自定义请求：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\', {\\n  method: \'POST\',\\n  headers: {\\n    \'Content-Type\': \'application/json\'\\n  },\\n  body: JSON.stringify({ name: \'John\', age: 30 })\\n})\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在这个示例中，我们发送一个包含JSON数据的POST请求，同时设置了请求头的`Content-Type`为`application/json`。\\n\\n`fetch()`函数返回一个Promise对象，所以你可以使用`.then()`来处理响应结果，`.catch()`来处理错误。你还可以使用其他方法来处理响应，比如将响应转换为Blob对象（`.blob()`），文本（`.text()`）或者通过流（`.body`）进行读取。\",\"type\":\"response\"}],\"model\":\"gpt-3.5-turbo-0613\"}', 1, '2023-11-12 16:52:34', '2023-11-12 16:52:34', 1);
INSERT INTO `t_chat_gpt` VALUES (9, 15, '{\"content\":[{\"content\":\"\\\"我该如何使用JavaScript来发起一个HTTP请求?\\\"\",\"type\":\"question\"},{\"content\":\"你可以使用JavaScript的内置函数`fetch()`来发起HTTP请求。以下是一个示例：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\')\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在上述示例中，我们使用`fetch()`函数来发起一个GET请求到`https://api.example.com/data`。返回的响应会被转换为JSON格式，然后在控制台中打印出来。如果发生了错误，错误信息也会被打印出来。\\n\\n你还可以通过传递一个可选的配置对象来自定义请求：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\', {\\n  method: \'POST\',\\n  headers: {\\n    \'Content-Type\': \'application/json\'\\n  },\\n  body: JSON.stringify({ name: \'John\', age: 30 })\\n})\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在这个示例中，我们发送一个包含JSON数据的POST请求，同时设置了请求头的`Content-Type`为`application/json`。\\n\\n`fetch()`函数返回一个Promise对象，所以你可以使用`.then()`来处理响应结果，`.catch()`来处理错误。你还可以使用其他方法来处理响应，比如将响应转换为Blob对象（`.blob()`），文本（`.text()`）或者通过流（`.body`）进行读取。\",\"type\":\"response\"}],\"model\":\"gpt-3.5-turbo-0613\"}', 1, '2023-11-12 16:52:35', '2023-11-12 16:52:35', 1);
INSERT INTO `t_chat_gpt` VALUES (10, 15, '{\"content\":[{\"content\":\"\\\"我该如何使用JavaScript来发起一个HTTP请求?\\\"\",\"type\":\"question\"},{\"content\":\"你可以使用JavaScript的内置函数`fetch()`来发起HTTP请求。以下是一个示例：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\')\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在上述示例中，我们使用`fetch()`函数来发起一个GET请求到`https://api.example.com/data`。返回的响应会被转换为JSON格式，然后在控制台中打印出来。如果发生了错误，错误信息也会被打印出来。\\n\\n你还可以通过传递一个可选的配置对象来自定义请求：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\', {\\n  method: \'POST\',\\n  headers: {\\n    \'Content-Type\': \'application/json\'\\n  },\\n  body: JSON.stringify({ name: \'John\', age: 30 })\\n})\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在这个示例中，我们发送一个包含JSON数据的POST请求，同时设置了请求头的`Content-Type`为`application/json`。\\n\\n`fetch()`函数返回一个Promise对象，所以你可以使用`.then()`来处理响应结果，`.catch()`来处理错误。你还可以使用其他方法来处理响应，比如将响应转换为Blob对象（`.blob()`），文本（`.text()`）或者通过流（`.body`）进行读取。\",\"type\":\"response\"}],\"model\":\"gpt-3.5-turbo-0613\"}', 1, '2023-11-12 16:52:35', '2023-11-12 16:52:35', 1);
INSERT INTO `t_chat_gpt` VALUES (11, 15, '{\"content\":[{\"content\":\"\\\"我该如何使用JavaScript来发起一个HTTP请求?\\\"\",\"type\":\"question\"},{\"content\":\"你可以使用JavaScript的内置函数`fetch()`来发起HTTP请求。以下是一个示例：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\')\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在上述示例中，我们使用`fetch()`函数来发起一个GET请求到`https://api.example.com/data`。返回的响应会被转换为JSON格式，然后在控制台中打印出来。如果发生了错误，错误信息也会被打印出来。\\n\\n你还可以通过传递一个可选的配置对象来自定义请求：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\', {\\n  method: \'POST\',\\n  headers: {\\n    \'Content-Type\': \'application/json\'\\n  },\\n  body: JSON.stringify({ name: \'John\', age: 30 })\\n})\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在这个示例中，我们发送一个包含JSON数据的POST请求，同时设置了请求头的`Content-Type`为`application/json`。\\n\\n`fetch()`函数返回一个Promise对象，所以你可以使用`.then()`来处理响应结果，`.catch()`来处理错误。你还可以使用其他方法来处理响应，比如将响应转换为Blob对象（`.blob()`），文本（`.text()`）或者通过流（`.body`）进行读取。\",\"type\":\"response\"}],\"model\":\"gpt-3.5-turbo-0613\"}', 1, '2023-11-12 16:52:36', '2023-11-12 16:52:36', 1);
INSERT INTO `t_chat_gpt` VALUES (12, 15, '{\"content\":[{\"content\":\"\\\"我该如何使用JavaScript来发起一个HTTP请求?\\\"\",\"type\":\"question\"},{\"content\":\"你可以使用JavaScript的内置函数`fetch()`来发起HTTP请求。以下是一个示例：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\')\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在上述示例中，我们使用`fetch()`函数来发起一个GET请求到`https://api.example.com/data`。返回的响应会被转换为JSON格式，然后在控制台中打印出来。如果发生了错误，错误信息也会被打印出来。\\n\\n你还可以通过传递一个可选的配置对象来自定义请求：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\', {\\n  method: \'POST\',\\n  headers: {\\n    \'Content-Type\': \'application/json\'\\n  },\\n  body: JSON.stringify({ name: \'John\', age: 30 })\\n})\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在这个示例中，我们发送一个包含JSON数据的POST请求，同时设置了请求头的`Content-Type`为`application/json`。\\n\\n`fetch()`函数返回一个Promise对象，所以你可以使用`.then()`来处理响应结果，`.catch()`来处理错误。你还可以使用其他方法来处理响应，比如将响应转换为Blob对象（`.blob()`），文本（`.text()`）或者通过流（`.body`）进行读取。\",\"type\":\"response\"}],\"model\":\"gpt-3.5-turbo-0613\"}', 1, '2023-11-12 16:52:36', '2023-11-12 16:52:36', 1);
INSERT INTO `t_chat_gpt` VALUES (13, 15, '{\"content\":[{\"content\":\"\\\"我该如何使用JavaScript来发起一个HTTP请求?\\\"\",\"type\":\"question\"},{\"content\":\"你可以使用JavaScript的内置函数`fetch()`来发起HTTP请求。以下是一个示例：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\')\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在上述示例中，我们使用`fetch()`函数来发起一个GET请求到`https://api.example.com/data`。返回的响应会被转换为JSON格式，然后在控制台中打印出来。如果发生了错误，错误信息也会被打印出来。\\n\\n你还可以通过传递一个可选的配置对象来自定义请求：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\', {\\n  method: \'POST\',\\n  headers: {\\n    \'Content-Type\': \'application/json\'\\n  },\\n  body: JSON.stringify({ name: \'John\', age: 30 })\\n})\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在这个示例中，我们发送一个包含JSON数据的POST请求，同时设置了请求头的`Content-Type`为`application/json`。\\n\\n`fetch()`函数返回一个Promise对象，所以你可以使用`.then()`来处理响应结果，`.catch()`来处理错误。你还可以使用其他方法来处理响应，比如将响应转换为Blob对象（`.blob()`），文本（`.text()`）或者通过流（`.body`）进行读取。\",\"type\":\"response\"}],\"model\":\"gpt-3.5-turbo-0613\"}', 1, '2023-11-12 16:52:36', '2023-11-12 16:52:36', 1);
INSERT INTO `t_chat_gpt` VALUES (14, 15, '{\"content\":[{\"content\":\"\\\"我该如何使用JavaScript来发起一个HTTP请求?\\\"\",\"type\":\"question\"},{\"content\":\"你可以使用JavaScript的内置函数`fetch()`来发起HTTP请求。以下是一个示例：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\')\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在上述示例中，我们使用`fetch()`函数来发起一个GET请求到`https://api.example.com/data`。返回的响应会被转换为JSON格式，然后在控制台中打印出来。如果发生了错误，错误信息也会被打印出来。\\n\\n你还可以通过传递一个可选的配置对象来自定义请求：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\', {\\n  method: \'POST\',\\n  headers: {\\n    \'Content-Type\': \'application/json\'\\n  },\\n  body: JSON.stringify({ name: \'John\', age: 30 })\\n})\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在这个示例中，我们发送一个包含JSON数据的POST请求，同时设置了请求头的`Content-Type`为`application/json`。\\n\\n`fetch()`函数返回一个Promise对象，所以你可以使用`.then()`来处理响应结果，`.catch()`来处理错误。你还可以使用其他方法来处理响应，比如将响应转换为Blob对象（`.blob()`），文本（`.text()`）或者通过流（`.body`）进行读取。\",\"type\":\"response\"}],\"model\":\"gpt-3.5-turbo-0613\"}', 1, '2023-11-12 16:52:37', '2023-11-12 16:52:37', 1);
INSERT INTO `t_chat_gpt` VALUES (15, 15, '{\"content\":[{\"content\":\"\\\"我该如何使用JavaScript来发起一个HTTP请求?\\\"\",\"type\":\"question\"},{\"content\":\"你可以使用JavaScript的内置函数`fetch()`来发起HTTP请求。以下是一个示例：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\')\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在上述示例中，我们使用`fetch()`函数来发起一个GET请求到`https://api.example.com/data`。返回的响应会被转换为JSON格式，然后在控制台中打印出来。如果发生了错误，错误信息也会被打印出来。\\n\\n你还可以通过传递一个可选的配置对象来自定义请求：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\', {\\n  method: \'POST\',\\n  headers: {\\n    \'Content-Type\': \'application/json\'\\n  },\\n  body: JSON.stringify({ name: \'John\', age: 30 })\\n})\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在这个示例中，我们发送一个包含JSON数据的POST请求，同时设置了请求头的`Content-Type`为`application/json`。\\n\\n`fetch()`函数返回一个Promise对象，所以你可以使用`.then()`来处理响应结果，`.catch()`来处理错误。你还可以使用其他方法来处理响应，比如将响应转换为Blob对象（`.blob()`），文本（`.text()`）或者通过流（`.body`）进行读取。\",\"type\":\"response\"}],\"model\":\"gpt-3.5-turbo-0613\"}', 1, '2023-11-12 16:52:37', '2023-11-12 16:52:37', 1);
INSERT INTO `t_chat_gpt` VALUES (16, 15, '{\"content\":[{\"content\":\"\\\"我该如何使用JavaScript来发起一个HTTP请求?\\\"\",\"type\":\"question\"},{\"content\":\"你可以使用JavaScript的内置函数`fetch()`来发起HTTP请求。以下是一个示例：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\')\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在上述示例中，我们使用`fetch()`函数来发起一个GET请求到`https://api.example.com/data`。返回的响应会被转换为JSON格式，然后在控制台中打印出来。如果发生了错误，错误信息也会被打印出来。\\n\\n你还可以通过传递一个可选的配置对象来自定义请求：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\', {\\n  method: \'POST\',\\n  headers: {\\n    \'Content-Type\': \'application/json\'\\n  },\\n  body: JSON.stringify({ name: \'John\', age: 30 })\\n})\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在这个示例中，我们发送一个包含JSON数据的POST请求，同时设置了请求头的`Content-Type`为`application/json`。\\n\\n`fetch()`函数返回一个Promise对象，所以你可以使用`.then()`来处理响应结果，`.catch()`来处理错误。你还可以使用其他方法来处理响应，比如将响应转换为Blob对象（`.blob()`），文本（`.text()`）或者通过流（`.body`）进行读取。\",\"type\":\"response\"}],\"model\":\"gpt-3.5-turbo-0613\"}', 1, '2023-11-12 16:53:44', '2023-11-12 16:53:44', 1);
INSERT INTO `t_chat_gpt` VALUES (17, 15, '{\"content\":[{\"content\":\"\\\"我该如何使用JavaScript来发起一个HTTP请求?\\\"\",\"type\":\"question\"},{\"content\":\"你可以使用JavaScript的内置函数`fetch()`来发起HTTP请求。以下是一个示例：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\')\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在上述示例中，我们使用`fetch()`函数来发起一个GET请求到`https://api.example.com/data`。返回的响应会被转换为JSON格式，然后在控制台中打印出来。如果发生了错误，错误信息也会被打印出来。\\n\\n你还可以通过传递一个可选的配置对象来自定义请求：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\', {\\n  method: \'POST\',\\n  headers: {\\n    \'Content-Type\': \'application/json\'\\n  },\\n  body: JSON.stringify({ name: \'John\', age: 30 })\\n})\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在这个示例中，我们发送一个包含JSON数据的POST请求，同时设置了请求头的`Content-Type`为`application/json`。\\n\\n`fetch()`函数返回一个Promise对象，所以你可以使用`.then()`来处理响应结果，`.catch()`来处理错误。你还可以使用其他方法来处理响应，比如将响应转换为Blob对象（`.blob()`），文本（`.text()`）或者通过流（`.body`）进行读取。\",\"type\":\"response\"}],\"model\":\"gpt-3.5-turbo-0613\"}', 1, '2023-11-12 16:53:45', '2023-11-12 16:53:45', 1);
INSERT INTO `t_chat_gpt` VALUES (18, 15, '{\"content\":[{\"content\":\"\\\"我该如何使用JavaScript来发起一个HTTP请求?\\\"\",\"type\":\"question\"},{\"content\":\"你可以使用JavaScript的内置函数`fetch()`来发起HTTP请求。以下是一个示例：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\')\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在上述示例中，我们使用`fetch()`函数来发起一个GET请求到`https://api.example.com/data`。返回的响应会被转换为JSON格式，然后在控制台中打印出来。如果发生了错误，错误信息也会被打印出来。\\n\\n你还可以通过传递一个可选的配置对象来自定义请求：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\', {\\n  method: \'POST\',\\n  headers: {\\n    \'Content-Type\': \'application/json\'\\n  },\\n  body: JSON.stringify({ name: \'John\', age: 30 })\\n})\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在这个示例中，我们发送一个包含JSON数据的POST请求，同时设置了请求头的`Content-Type`为`application/json`。\\n\\n`fetch()`函数返回一个Promise对象，所以你可以使用`.then()`来处理响应结果，`.catch()`来处理错误。你还可以使用其他方法来处理响应，比如将响应转换为Blob对象（`.blob()`），文本（`.text()`）或者通过流（`.body`）进行读取。\",\"type\":\"response\"}],\"model\":\"gpt-3.5-turbo-0613\"}', 1, '2023-11-12 16:53:46', '2023-11-12 16:53:46', 1);
INSERT INTO `t_chat_gpt` VALUES (19, 15, '{\"content\":[{\"content\":\"\\\"我该如何使用JavaScript来发起一个HTTP请求?\\\"\",\"type\":\"question\"},{\"content\":\"你可以使用JavaScript的内置函数`fetch()`来发起HTTP请求。以下是一个示例：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\')\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在上述示例中，我们使用`fetch()`函数来发起一个GET请求到`https://api.example.com/data`。返回的响应会被转换为JSON格式，然后在控制台中打印出来。如果发生了错误，错误信息也会被打印出来。\\n\\n你还可以通过传递一个可选的配置对象来自定义请求：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\', {\\n  method: \'POST\',\\n  headers: {\\n    \'Content-Type\': \'application/json\'\\n  },\\n  body: JSON.stringify({ name: \'John\', age: 30 })\\n})\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在这个示例中，我们发送一个包含JSON数据的POST请求，同时设置了请求头的`Content-Type`为`application/json`。\\n\\n`fetch()`函数返回一个Promise对象，所以你可以使用`.then()`来处理响应结果，`.catch()`来处理错误。你还可以使用其他方法来处理响应，比如将响应转换为Blob对象（`.blob()`），文本（`.text()`）或者通过流（`.body`）进行读取。\",\"type\":\"response\"}],\"model\":\"gpt-3.5-turbo-0613\"}', 1, '2023-11-12 16:53:46', '2023-11-12 16:53:46', 1);
INSERT INTO `t_chat_gpt` VALUES (20, 15, '{\"content\":[{\"content\":\"\\\"我该如何使用JavaScript来发起一个HTTP请求?\\\"\",\"type\":\"question\"},{\"content\":\"你可以使用JavaScript的内置函数`fetch()`来发起HTTP请求。以下是一个示例：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\')\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在上述示例中，我们使用`fetch()`函数来发起一个GET请求到`https://api.example.com/data`。返回的响应会被转换为JSON格式，然后在控制台中打印出来。如果发生了错误，错误信息也会被打印出来。\\n\\n你还可以通过传递一个可选的配置对象来自定义请求：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\', {\\n  method: \'POST\',\\n  headers: {\\n    \'Content-Type\': \'application/json\'\\n  },\\n  body: JSON.stringify({ name: \'John\', age: 30 })\\n})\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在这个示例中，我们发送一个包含JSON数据的POST请求，同时设置了请求头的`Content-Type`为`application/json`。\\n\\n`fetch()`函数返回一个Promise对象，所以你可以使用`.then()`来处理响应结果，`.catch()`来处理错误。你还可以使用其他方法来处理响应，比如将响应转换为Blob对象（`.blob()`），文本（`.text()`）或者通过流（`.body`）进行读取。\",\"type\":\"response\"}],\"model\":\"gpt-3.5-turbo-0613\"}', 1, '2023-11-12 16:53:47', '2023-11-12 16:53:47', 1);
INSERT INTO `t_chat_gpt` VALUES (21, 15, '{\"content\":[{\"content\":\"\\\"我该如何使用JavaScript来发起一个HTTP请求?\\\"\",\"type\":\"question\"},{\"content\":\"你可以使用JavaScript的内置函数`fetch()`来发起HTTP请求。以下是一个示例：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\')\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在上述示例中，我们使用`fetch()`函数来发起一个GET请求到`https://api.example.com/data`。返回的响应会被转换为JSON格式，然后在控制台中打印出来。如果发生了错误，错误信息也会被打印出来。\\n\\n你还可以通过传递一个可选的配置对象来自定义请求：\\n\\n```javascript\\nfetch(\'https://api.example.com/data\', {\\n  method: \'POST\',\\n  headers: {\\n    \'Content-Type\': \'application/json\'\\n  },\\n  body: JSON.stringify({ name: \'John\', age: 30 })\\n})\\n  .then(response => response.json())\\n  .then(data => console.log(data))\\n  .catch(error => console.log(error));\\n```\\n\\n在这个示例中，我们发送一个包含JSON数据的POST请求，同时设置了请求头的`Content-Type`为`application/json`。\\n\\n`fetch()`函数返回一个Promise对象，所以你可以使用`.then()`来处理响应结果，`.catch()`来处理错误。你还可以使用其他方法来处理响应，比如将响应转换为Blob对象（`.blob()`），文本（`.text()`）或者通过流（`.body`）进行读取。\",\"type\":\"response\"}],\"model\":\"gpt-3.5-turbo-0613\"}', 1, '2023-11-12 16:53:49', '2023-11-12 16:53:49', 1);
INSERT INTO `t_chat_gpt` VALUES (22, 15, '{\"content\":[{\"content\":\"event.preventDefault()\\n  event.stopPropagation()这两个方法有什么区别\",\"type\":\"question\"},{\"content\":\"这两个方法都是用来阻止事件的进一步执行，但是它们有一些区别：\\n\\n1. `event.preventDefault()`: 这个方法是用来阻止事件的默认行为，例如，当点击一个链接时，浏览器会自动跳转到链接的地址，使用`event.preventDefault()`可以阻止这个默认行为，从而不跳转页面。另外，`event.preventDefault()`方法会阻止事件的冒泡。\\n\\n2. `event.stopPropagation()`: 这个方法是用来阻止事件的冒泡，即停止事件从被点击的元素向父元素的传递。通常情况下，当一个元素上的事件被触发时，事件会先在该元素上执行，然后在它的父元素上执行，再在它的父元素的父元素上执行，以此类推。`event.stopPropagation()`可以阻止事件的进一步传播，使得事件只在当前元素上执行。\\n\\n综上所述，`event.preventDefault()`用来阻止默认行为和事件的冒泡，而`event.stopPropagation()`仅用来阻止事件的冒泡。\",\"type\":\"response\"}],\"model\":\"gpt-3.5-turbo-0613\"}', 1, '2023-11-13 10:18:38', '2023-11-13 10:18:38', 1);
INSERT INTO `t_chat_gpt` VALUES (23, 15, '{\"content\":[{\"content\":\"event.preventDefault()\\n  event.stopPropagation()这两个方法有什么区别\",\"type\":\"question\"},{\"content\":\"这两个方法都是用来阻止事件的进一步执行，但是它们有一些区别：\\n\\n1. `event.preventDefault()`: 这个方法是用来阻止事件的默认行为，例如，当点击一个链接时，浏览器会自动跳转到链接的地址，使用`event.preventDefault()`可以阻止这个默认行为，从而不跳转页面。另外，`event.preventDefault()`方法会阻止事件的冒泡。\\n\\n2. `event.stopPropagation()`: 这个方法是用来阻止事件的冒泡，即停止事件从被点击的元素向父元素的传递。通常情况下，当一个元素上的事件被触发时，事件会先在该元素上执行，然后在它的父元素上执行，再在它的父元素的父元素上执行，以此类推。`event.stopPropagation()`可以阻止事件的进一步传播，使得事件只在当前元素上执行。\\n\\n综上所述，`event.preventDefault()`用来阻止默认行为和事件的冒泡，而`event.stopPropagation()`仅用来阻止事件的冒泡。\",\"type\":\"response\"}],\"model\":\"gpt-3.5-turbo-0613\"}', 1, '2023-11-13 10:19:57', '2023-11-13 10:19:57', 1);
INSERT INTO `t_chat_gpt` VALUES (24, 15, '{\"content\":[{\"content\":\"event.preventDefault()\\n  event.stopPropagation()这两个方法有什么区别\",\"type\":\"question\"},{\"content\":\"这两个方法都是用来阻止事件的进一步执行，但是它们有一些区别：\\n\\n1. `event.preventDefault()`: 这个方法是用来阻止事件的默认行为，例如，当点击一个链接时，浏览器会自动跳转到链接的地址，使用`event.preventDefault()`可以阻止这个默认行为，从而不跳转页面。另外，`event.preventDefault()`方法会阻止事件的冒泡。\\n\\n2. `event.stopPropagation()`: 这个方法是用来阻止事件的冒泡，即停止事件从被点击的元素向父元素的传递。通常情况下，当一个元素上的事件被触发时，事件会先在该元素上执行，然后在它的父元素上执行，再在它的父元素的父元素上执行，以此类推。`event.stopPropagation()`可以阻止事件的进一步传播，使得事件只在当前元素上执行。\\n\\n综上所述，`event.preventDefault()`用来阻止默认行为和事件的冒泡，而`event.stopPropagation()`仅用来阻止事件的冒泡。\",\"type\":\"response\"}],\"model\":\"gpt-3.5-turbo-0613\"}', 1, '2023-11-13 10:20:04', '2023-11-13 10:20:04', 1);
INSERT INTO `t_chat_gpt` VALUES (25, 15, '{\"content\":[{\"content\":\"@Data\\npublic class LinkDTO implements BaseData {\\n    //网站名称\\n    @Max(value = 15, message = \\\"网站名称不能超过15个字符\\\")\\n    private String name;\\n    //网站地址\\n    @Max(value = 50, message = \\\"网站地址不能超过50个字符\\\")\\n    private String url;\\n    //网站描述\\n    @Max(value = 30, message = \\\"网站描述不能超过30个字符\\\")\\n    private String description;\\n    //网站背景\\n    @Max(value = 50, message = \\\"网站背景不能超过50个字符\\\")\\n    private String background;\\n    //邮箱地址\\n    @Max(value = 20, message = \\\"邮箱地址不能超过20个字符\\\")\\n    private String email;\\n}帮我根据以上dto生成用于测试的json数据\",\"type\":\"question\"},{\"content\":\"{\\n  \\\"name\\\": \\\"example\\\",\\n  \\\"url\\\": \\\"http://www.example.com\\\",\\n  \\\"description\\\": \\\"This is an example website\\\",\\n  \\\"background\\\": \\\"http://www.example.com/background.jpg\\\",\\n  \\\"email\\\": \\\"example@example.com\\\"\\n}\",\"type\":\"response\"},{\"content\":\"名称使用中文\",\"type\":\"question\"},{\"content\":\"{\\n  \\\"name\\\": \\\"网站名称\\\",\\n  \\\"url\\\": \\\"http://www.example.com\\\",\\n  \\\"description\\\": \\\"这是一个示例网站\\\",\\n  \\\"background\\\": \\\"http://www.example.com/background.jpg\\\",\\n  \\\"email\\\": \\\"example@example.com\\\"\\n}\",\"type\":\"response\"}],\"model\":\"gpt-3.5-turbo-0613\"}', 1, '2023-11-14 09:54:52', '2023-11-14 09:54:52', 1);
INSERT INTO `t_chat_gpt` VALUES (26, 15, '{\"content\":[{\"content\":\"    @RabbitHandler\\n    public void handlerMapMessage(Map<String, Object> data, Channel channel) {\\n        String email = (String) data.get(\\\"email\\\");\\n        String code = (String) data.get(\\\"code\\\");\\n        String type = (String) data.get(\\\"type\\\");\\n        SimpleMailMessage message = switch (type) {\\n            case \\\"register\\\" ->\\n                    createMessage(\\\"欢迎注册我们的网站\\\", \\\"您的邮件验证码为：\\\" + code + \\\"，有效时间5分钟，为了保障您的安全，请勿向他人泄露验证码信息。\\\", email);\\n            case \\\"reset\\\" ->\\n                    createMessage(\\\"重置密码\\\", \\\"您的邮件验证码为：\\\" + code + \\\"，有效时间5分钟，为了保障您的安全，请勿向他人泄露验证码信息。\\\", email);\\n            case \\\"friendLinkApplication\\\" -> createMessage(\\\"友链申请通知\\\", \\\"有新的友链申请，请前往后台进行审核\\\", email);\\n            default -> null;\\n        };\\n        if (Objects.isNull(message)) return;\\n        // 发送邮件\\n        mailSender.send(message);\\n        log.info(email + \\\"：邮件发送成功\\\");\\n    }上面代码怎么实现如果邮件发送失败就直接消费掉本条消息，而不是让他一直重试\",\"type\":\"question\"},{\"content\":\"您可以添加一个try-catch块来捕获任何在发送邮件过程中可能出现的异常。如果发送邮件失败，您可以使用channel.basicAck方法来确认消息被消费，这样消息就不会被RabbitMQ再次发送。\\n\\n```java\\n@RabbitHandler\\npublic void handlerMapMessage(Map<String, Object> data, Channel channel, @Header(AmqpHeaders.DELIVERY_TAG) long tag) {\\n    String email = (String) data.get(\\\"email\\\");\\n    String code = (String) data.get(\\\"code\\\");\\n    String type = (String) data.get(\\\"type\\\");\\n    SimpleMailMessage message = switch (type) {\\n        case \\\"register\\\" ->\\n              createMessage(\\\"欢迎注册我们的网站\\\", \\\"您的邮件验证码为：\\\" + code + \\\"，有效时间5分钟，为了保障您的安全，请勿向他人泄露验证码信息。\\\", email);\\n        case \\\"reset\\\" ->\\n           createMessage(\\\"重置密码\\\", \\\"您的邮件验证码为：\\\" + code + \\\"，有效时间5分钟，为了保障您的安全，请勿向他人泄露验证码信息。\\\", email);\\n        case \\\"friendLinkApplication\\\" -> createMessage(\\\"友链申请通知\\\", \\\"有新的友链申请，请前往后台进行审核\\\", email);\\n        default -> null;\\n    };\\n    if (Objects.isNull(message)) return;\\n    // 发送邮件\\n    try {\\n        mailSender.send(message);\\n        log.info(email + \\\"：邮件发送成功\\\");\\n        channel.basicAck(tag, false); // 成功则消费消息\\n    } catch (Exception e){\\n        log.warn(email + \\\": 邮件发送失败 \\\",e);\\n        try {\\n            channel.basicAck(tag, false);  // 失败也消费消息\\n        } catch (IOException ex){\\n            log.warn(email + \\\": 消息消费失败 \\\",ex);\\n        }\\n    }\\n}\\n```\\n\\n在这段代码中，当mailSender.send(message)执行出现异常时，我们的catch块就会捕获到这个异常。此时，我们使用channel.basicAck(tag, false)来确认这个消息已经被消费。这样，您就能实现您的需求：如果邮件发送失败，这条消息将被消费，RabbitMQ就不会再次发送这条消息了。\",\"type\":\"response\"}],\"model\":\"gpt-4\"}', 1, '2023-11-14 11:15:51', '2023-11-14 11:15:51', 1);
INSERT INTO `t_chat_gpt` VALUES (27, 15, '{\"content\":[{\"content\":\"    @RabbitHandler\\n    public void handlerMapMessage(Map<String, Object> data, Channel channel) {\\n        String email = (String) data.get(\\\"email\\\");\\n        String code = (String) data.get(\\\"code\\\");\\n        String type = (String) data.get(\\\"type\\\");\\n        SimpleMailMessage message = switch (type) {\\n            case \\\"register\\\" ->\\n                    createMessage(\\\"欢迎注册我们的网站\\\", \\\"您的邮件验证码为：\\\" + code + \\\"，有效时间5分钟，为了保障您的安全，请勿向他人泄露验证码信息。\\\", email);\\n            case \\\"reset\\\" ->\\n                    createMessage(\\\"重置密码\\\", \\\"您的邮件验证码为：\\\" + code + \\\"，有效时间5分钟，为了保障您的安全，请勿向他人泄露验证码信息。\\\", email);\\n            case \\\"friendLinkApplication\\\" -> createMessage(\\\"友链申请通知\\\", \\\"有新的友链申请，请前往后台进行审核\\\", email);\\n            default -> null;\\n        };\\n        if (Objects.isNull(message)) return;\\n        // 发送邮件\\n        mailSender.send(message);\\n        log.info(email + \\\"：邮件发送成功\\\");\\n    }上面代码怎么实现如果邮件发送失败就直接消费掉本条消息，而不是让他一直重试\",\"type\":\"question\"},{\"content\":\"您可以添加一个try-catch块来捕获任何在发送邮件过程中可能出现的异常。如果发送邮件失败，您可以使用channel.basicAck方法来确认消息被消费，这样消息就不会被RabbitMQ再次发送。\\n\\n```java\\n@RabbitHandler\\npublic void handlerMapMessage(Map<String, Object> data, Channel channel, @Header(AmqpHeaders.DELIVERY_TAG) long tag) {\\n    String email = (String) data.get(\\\"email\\\");\\n    String code = (String) data.get(\\\"code\\\");\\n    String type = (String) data.get(\\\"type\\\");\\n    SimpleMailMessage message = switch (type) {\\n        case \\\"register\\\" ->\\n              createMessage(\\\"欢迎注册我们的网站\\\", \\\"您的邮件验证码为：\\\" + code + \\\"，有效时间5分钟，为了保障您的安全，请勿向他人泄露验证码信息。\\\", email);\\n        case \\\"reset\\\" ->\\n           createMessage(\\\"重置密码\\\", \\\"您的邮件验证码为：\\\" + code + \\\"，有效时间5分钟，为了保障您的安全，请勿向他人泄露验证码信息。\\\", email);\\n        case \\\"friendLinkApplication\\\" -> createMessage(\\\"友链申请通知\\\", \\\"有新的友链申请，请前往后台进行审核\\\", email);\\n        default -> null;\\n    };\\n    if (Objects.isNull(message)) return;\\n    // 发送邮件\\n    try {\\n        mailSender.send(message);\\n        log.info(email + \\\"：邮件发送成功\\\");\\n        channel.basicAck(tag, false); // 成功则消费消息\\n    } catch (Exception e){\\n        log.warn(email + \\\": 邮件发送失败 \\\",e);\\n        try {\\n            channel.basicAck(tag, false);  // 失败也消费消息\\n        } catch (IOException ex){\\n            log.warn(email + \\\": 消息消费失败 \\\",ex);\\n        }\\n    }\\n}\\n```\\n\\n在这段代码中，当mailSender.send(message)执行出现异常时，我们的catch块就会捕获到这个异常。此时，我们使用channel.basicAck(tag, false)来确认这个消息已经被消费。这样，您就能实现您的需求：如果邮件发送失败，这条消息将被消费，RabbitMQ就不会再次发送这条消息了。\",\"type\":\"response\"},{\"content\":\"其中的@Header(AmqpHeaders.DELIVERY_TAG) long tag是什么意思\",\"type\":\"question\"},{\"content\":\"@Header(AmqpHeaders.DELIVERY_TAG) long tag是Spring AMQP中用于获取消息的唯一标识的注解。在此处，tag参数表示获取此消息的投递标签，它是消息的唯一标识。\\n\\n在RabbitMQ中，投递标签用来唯一标识Channel中投递的消息。RabbitMQ保证在每个Channel中，每条消息的投递标签从1开始递增。\\n\\n当消费者获取到消息后，可以选择是否发送一个ack（acknowledgement）回 RabbitMQ，告诉它这条消息已经被正确处理，可以从队列中移除了。ack的时候需要使用这个投递标签。\\n\\n在Spring AMQP中，可以通过`channel.basicAck(tag, multiple)`方法来发送ack，其中的`tag`就是投递标签，`multiple`为true表示同时ack所有小于当前投递标签的消息，为false表示只ack当前投递标签的消息。\",\"type\":\"response\"}],\"model\":\"gpt-4\"}', 1, '2023-11-14 11:21:09', '2023-11-14 11:21:09', 1);
INSERT INTO `t_chat_gpt` VALUES (28, 15, '{\"content\":[{\"content\":\"    @RabbitHandler\\n    public void handlerMapMessage(Map<String, Object> data, Channel channel) {\\n        String email = (String) data.get(\\\"email\\\");\\n        String code = (String) data.get(\\\"code\\\");\\n        String type = (String) data.get(\\\"type\\\");\\n        SimpleMailMessage message = switch (type) {\\n            case \\\"register\\\" ->\\n                    createMessage(\\\"欢迎注册我们的网站\\\", \\\"您的邮件验证码为：\\\" + code + \\\"，有效时间5分钟，为了保障您的安全，请勿向他人泄露验证码信息。\\\", email);\\n            case \\\"reset\\\" ->\\n                    createMessage(\\\"重置密码\\\", \\\"您的邮件验证码为：\\\" + code + \\\"，有效时间5分钟，为了保障您的安全，请勿向他人泄露验证码信息。\\\", email);\\n            case \\\"friendLinkApplication\\\" -> createMessage(\\\"友链申请通知\\\", \\\"有新的友链申请，请前往后台进行审核\\\", email);\\n            default -> null;\\n        };\\n        if (Objects.isNull(message)) return;\\n        // 发送邮件\\n        mailSender.send(message);\\n        log.info(email + \\\"：邮件发送成功\\\");\\n    }上面代码怎么实现如果邮件发送失败就直接消费掉本条消息，而不是让他一直重试\",\"type\":\"question\"},{\"content\":\"您可以添加一个try-catch块来捕获任何在发送邮件过程中可能出现的异常。如果发送邮件失败，您可以使用channel.basicAck方法来确认消息被消费，这样消息就不会被RabbitMQ再次发送。\\n\\n```java\\n@RabbitHandler\\npublic void handlerMapMessage(Map<String, Object> data, Channel channel, @Header(AmqpHeaders.DELIVERY_TAG) long tag) {\\n    String email = (String) data.get(\\\"email\\\");\\n    String code = (String) data.get(\\\"code\\\");\\n    String type = (String) data.get(\\\"type\\\");\\n    SimpleMailMessage message = switch (type) {\\n        case \\\"register\\\" ->\\n              createMessage(\\\"欢迎注册我们的网站\\\", \\\"您的邮件验证码为：\\\" + code + \\\"，有效时间5分钟，为了保障您的安全，请勿向他人泄露验证码信息。\\\", email);\\n        case \\\"reset\\\" ->\\n           createMessage(\\\"重置密码\\\", \\\"您的邮件验证码为：\\\" + code + \\\"，有效时间5分钟，为了保障您的安全，请勿向他人泄露验证码信息。\\\", email);\\n        case \\\"friendLinkApplication\\\" -> createMessage(\\\"友链申请通知\\\", \\\"有新的友链申请，请前往后台进行审核\\\", email);\\n        default -> null;\\n    };\\n    if (Objects.isNull(message)) return;\\n    // 发送邮件\\n    try {\\n        mailSender.send(message);\\n        log.info(email + \\\"：邮件发送成功\\\");\\n        channel.basicAck(tag, false); // 成功则消费消息\\n    } catch (Exception e){\\n        log.warn(email + \\\": 邮件发送失败 \\\",e);\\n        try {\\n            channel.basicAck(tag, false);  // 失败也消费消息\\n        } catch (IOException ex){\\n            log.warn(email + \\\": 消息消费失败 \\\",ex);\\n        }\\n    }\\n}\\n```\\n\\n在这段代码中，当mailSender.send(message)执行出现异常时，我们的catch块就会捕获到这个异常。此时，我们使用channel.basicAck(tag, false)来确认这个消息已经被消费。这样，您就能实现您的需求：如果邮件发送失败，这条消息将被消费，RabbitMQ就不会再次发送这条消息了。\",\"type\":\"response\"},{\"content\":\"其中的@Header(AmqpHeaders.DELIVERY_TAG) long tag是什么意思\",\"type\":\"question\"},{\"content\":\"@Header(AmqpHeaders.DELIVERY_TAG) long tag是Spring AMQP中用于获取消息的唯一标识的注解。在此处，tag参数表示获取此消息的投递标签，它是消息的唯一标识。\\n\\n在RabbitMQ中，投递标签用来唯一标识Channel中投递的消息。RabbitMQ保证在每个Channel中，每条消息的投递标签从1开始递增。\\n\\n当消费者获取到消息后，可以选择是否发送一个ack（acknowledgement）回 RabbitMQ，告诉它这条消息已经被正确处理，可以从队列中移除了。ack的时候需要使用这个投递标签。\\n\\n在Spring AMQP中，可以通过`channel.basicAck(tag, multiple)`方法来发送ack，其中的`tag`就是投递标签，`multiple`为true表示同时ack所有小于当前投递标签的消息，为false表示只ack当前投递标签的消息。\",\"type\":\"response\"}],\"model\":\"gpt-4\"}', 1, '2023-11-14 11:21:45', '2023-11-14 11:21:45', 1);
INSERT INTO `t_chat_gpt` VALUES (29, 1, '{\"content\":[{\"content\":\"你好\",\"type\":\"question\"},{\"content\":\"你好！有什么我可以帮助你的呢？\",\"type\":\"response\"}],\"model\":\"gpt-3.5-turbo-0613\"}', 1, '2023-11-16 18:54:29', '2024-01-21 12:31:16', 0);
INSERT INTO `t_chat_gpt` VALUES (30, 1, '{\"content\":[{\"content\":\"前端路由的保活是什么意思？\",\"type\":\"question\"},{\"content\":\"\\\"前端路由的保活\\\"主要是针对SPA（单页应用）中的一个重要概念。在单页应用中，当跳转到新的路由地址时，之前的组件会被卸载，新的页面组件会重新加载，这就好像在不刷新网页的情况下对页面进行了重新渲染。而这个过程可能会涉及到耗时较长的异步操作，例如请求数据等。\\n\\n\\\"保活\\\"（也常称为 \\\"keep alive\\\"）则是指保持这些组件的状态，而不是每次都进行重新加载。这样可以避免不必要的重新加载，提高应用性能，改善用户体验。 在Vue.js这样的前端框架中，它通过`<keep-alive>`组件提供了保活的功能。\\n\\n例如，用户在一个列表页浏览到第10页，点击某个项目进入详情页，然后再返回列表页，期望的行为应该是回到第10页，而不是重新加载列表页。如果没有使用保活，那么在返回列表页时会重新加载，展示的可能是第1页的内容。但如果使用了保活，那么用户的浏览状态（第10页）就可以被保持住。\\n\\n注意并不是所有的情况下都需要使用保活，比如一些数据必须保持最新状态的页面，就不适合使用这个功能。在不需要保持状态的页面使用保活，可能会导致数据过期或不一致。\",\"type\":\"response\"}],\"model\":\"gpt-4\"}', 1, '2023-11-17 08:37:46', '2024-01-21 12:35:21', 0);
INSERT INTO `t_chat_gpt` VALUES (31, 1, '{\"content\":[{\"content\":\"前端路由的保活是什么意思？\",\"type\":\"question\"},{\"content\":\"\\\"前端路由的保活\\\"主要是针对SPA（单页应用）中的一个重要概念。在单页应用中，当跳转到新的路由地址时，之前的组件会被卸载，新的页面组件会重新加载，这就好像在不刷新网页的情况下对页面进行了重新渲染。而这个过程可能会涉及到耗时较长的异步操作，例如请求数据等。\\n\\n\\\"保活\\\"（也常称为 \\\"keep alive\\\"）则是指保持这些组件的状态，而不是每次都进行重新加载。这样可以避免不必要的重新加载，提高应用性能，改善用户体验。 在Vue.js这样的前端框架中，它通过`<keep-alive>`组件提供了保活的功能。\\n\\n例如，用户在一个列表页浏览到第10页，点击某个项目进入详情页，然后再返回列表页，期望的行为应该是回到第10页，而不是重新加载列表页。如果没有使用保活，那么在返回列表页时会重新加载，展示的可能是第1页的内容。但如果使用了保活，那么用户的浏览状态（第10页）就可以被保持住。\\n\\n注意并不是所有的情况下都需要使用保活，比如一些数据必须保持最新状态的页面，就不适合使用这个功能。在不需要保持状态的页面使用保活，可能会导致数据过期或不一致。\",\"type\":\"response\"}],\"model\":\"gpt-4\"}', 1, '2023-11-17 08:37:46', '2023-11-17 08:37:46', 1);
INSERT INTO `t_chat_gpt` VALUES (32, 1, '{\"content\":[{\"content\":\"前端路由的保活是什么意思？\",\"type\":\"question\"},{\"content\":\"\\\"前端路由的保活\\\"主要是针对SPA（单页应用）中的一个重要概念。在单页应用中，当跳转到新的路由地址时，之前的组件会被卸载，新的页面组件会重新加载，这就好像在不刷新网页的情况下对页面进行了重新渲染。而这个过程可能会涉及到耗时较长的异步操作，例如请求数据等。\\n\\n\\\"保活\\\"（也常称为 \\\"keep alive\\\"）则是指保持这些组件的状态，而不是每次都进行重新加载。这样可以避免不必要的重新加载，提高应用性能，改善用户体验。 在Vue.js这样的前端框架中，它通过`<keep-alive>`组件提供了保活的功能。\\n\\n例如，用户在一个列表页浏览到第10页，点击某个项目进入详情页，然后再返回列表页，期望的行为应该是回到第10页，而不是重新加载列表页。如果没有使用保活，那么在返回列表页时会重新加载，展示的可能是第1页的内容。但如果使用了保活，那么用户的浏览状态（第10页）就可以被保持住。\\n\\n注意并不是所有的情况下都需要使用保活，比如一些数据必须保持最新状态的页面，就不适合使用这个功能。在不需要保持状态的页面使用保活，可能会导致数据过期或不一致。\",\"type\":\"response\"}],\"model\":\"gpt-4\"}', 1, '2023-11-17 08:37:46', '2023-11-17 08:37:46', 1);
INSERT INTO `t_chat_gpt` VALUES (33, 1, '{\"content\":[{\"content\":\"前端路由的保活是什么意思？\",\"type\":\"question\"},{\"content\":\"\\\"前端路由的保活\\\"主要是针对SPA（单页应用）中的一个重要概念。在单页应用中，当跳转到新的路由地址时，之前的组件会被卸载，新的页面组件会重新加载，这就好像在不刷新网页的情况下对页面进行了重新渲染。而这个过程可能会涉及到耗时较长的异步操作，例如请求数据等。\\n\\n\\\"保活\\\"（也常称为 \\\"keep alive\\\"）则是指保持这些组件的状态，而不是每次都进行重新加载。这样可以避免不必要的重新加载，提高应用性能，改善用户体验。 在Vue.js这样的前端框架中，它通过`<keep-alive>`组件提供了保活的功能。\\n\\n例如，用户在一个列表页浏览到第10页，点击某个项目进入详情页，然后再返回列表页，期望的行为应该是回到第10页，而不是重新加载列表页。如果没有使用保活，那么在返回列表页时会重新加载，展示的可能是第1页的内容。但如果使用了保活，那么用户的浏览状态（第10页）就可以被保持住。\\n\\n注意并不是所有的情况下都需要使用保活，比如一些数据必须保持最新状态的页面，就不适合使用这个功能。在不需要保持状态的页面使用保活，可能会导致数据过期或不一致。\",\"type\":\"response\"}],\"model\":\"gpt-4\"}', 1, '2023-11-17 08:37:46', '2023-11-17 08:37:46', 1);

-- ----------------------------
-- Table structure for t_comment
-- ----------------------------
DROP TABLE IF EXISTS `t_comment`;
CREATE TABLE `t_comment`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '评论id',
  `type` tinyint(1) NOT NULL COMMENT '评论类型 (1文章 2留言板)',
  `type_id` bigint NOT NULL COMMENT '类型id',
  `parent_id` bigint NULL DEFAULT NULL COMMENT '父评论id',
  `reply_id` bigint NULL DEFAULT NULL COMMENT '回复评论id',
  `comment_content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '评论的内容',
  `comment_user_id` bigint NOT NULL COMMENT '评论用户的id',
  `reply_user_id` bigint NULL DEFAULT NULL COMMENT '回复用户的id',
  `is_check` tinyint(1) NOT NULL DEFAULT 1 COMMENT '是否通过 (0否 1是)',
  `create_time` datetime NOT NULL COMMENT '评论时间',
  `update_time` datetime NOT NULL COMMENT '更新时间',
  `is_deleted` tinyint(1) NOT NULL DEFAULT 0 COMMENT '是否删除（0：未删除，1：已删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 66 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_comment
-- ----------------------------
INSERT INTO `t_comment` VALUES (60, 1, 42, NULL, NULL, '支持', 14164386, NULL, 1, '2024-03-14 12:59:54', '2024-03-14 12:59:54', 1);
INSERT INTO `t_comment` VALUES (61, 1, 42, 60, 60, '这是一个子评论测试\n', 14164386, 14164386, 1, '2024-03-14 13:00:32', '2024-03-14 13:00:32', 1);
INSERT INTO `t_comment` VALUES (62, 1, 42, 60, 61, '孙子评论测试\n', 14164386, 14164386, 1, '2024-03-14 13:01:08', '2024-03-14 13:01:08', 1);
INSERT INTO `t_comment` VALUES (63, 1, 43, NULL, NULL, '堂吉诃德鸭鸭', 14164386, NULL, 1, '2024-03-28 21:49:30', '2024-03-28 21:49:30', 0);
INSERT INTO `t_comment` VALUES (64, 1, 43, 63, 63, '超可爱的鸭鸭\n', 14164386, 14164386, 1, '2024-03-28 21:49:50', '2024-03-28 21:49:50', 0);
INSERT INTO `t_comment` VALUES (65, 1, 45, NULL, NULL, 'ceshi', 14164386, NULL, 1, '2024-05-01 20:32:23', '2024-05-01 20:32:23', 1);
INSERT INTO `t_comment` VALUES (66, 1, 46, NULL, NULL, 'flaco\n', 14164386, NULL, 1, '2024-05-01 23:02:04', '2024-05-01 23:02:04', 0);

-- ----------------------------
-- Table structure for t_favorite
-- ----------------------------
DROP TABLE IF EXISTS `t_favorite`;
CREATE TABLE `t_favorite`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '收藏id',
  `user_id` bigint NOT NULL COMMENT '收藏的用户id',
  `type` tinyint NOT NULL COMMENT '收藏类型(1,文章 2,留言板)',
  `type_id` bigint NOT NULL COMMENT '类型id',
  `is_check` tinyint(1) NOT NULL DEFAULT 1 COMMENT '是否有效 (0否 1是)',
  `create_time` datetime NOT NULL COMMENT '收藏时间',
  `is_deleted` tinyint(1) NOT NULL DEFAULT 0 COMMENT '是否删除（0：未删除，1：已删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 168 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_favorite
-- ----------------------------
INSERT INTO `t_favorite` VALUES (168, 14164386, 1, 43, 1, '2024-03-28 23:26:30', 0);

-- ----------------------------
-- Table structure for t_leave_word
-- ----------------------------
DROP TABLE IF EXISTS `t_leave_word`;
CREATE TABLE `t_leave_word`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `user_id` bigint NOT NULL COMMENT '留言用户id',
  `content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '留言内容',
  `is_check` tinyint(1) NOT NULL DEFAULT 1 COMMENT '是否通过 (0否 1是)',
  `create_time` datetime NOT NULL COMMENT '留言时间',
  `update_time` datetime NOT NULL COMMENT '更新时间',
  `is_deleted` tinyint(1) NOT NULL DEFAULT 0 COMMENT '是否删除（0：未删除，1：已删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 28 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_leave_word
-- ----------------------------
INSERT INTO `t_leave_word` VALUES (13, 1, '## 测试比较长的留言\\n\\n> 下面是一篇 c# 笔记\\n\\n<center>\\n    <h1>C#笔记</h1>\\n</center>\\n\\n\\n\\n[TOC] \\n\\n### 1、C#访问修饰符\\n\\n​\\t\\t在C#当中的访问修饰符及作用范围如下：\\n\\n|     访问修饰符     |                        说明                        |\\n| :----------------: | :------------------------------------------------: |\\n|       public       |              共有访问。不受任何限制。              |\\n|      private       |      私有访问。只有本类能访问，实例不能访问。      |\\n|     protected      |   保护访问。只限于本类和子类访问，实例不能访问。   |\\n|      internal      |      内部访问。只限于本项目访问，其他不能访问      |\\n| protected internal | 内部保护访问。只限于本项目或子类访问，其他不能访问 |\\n\\n​\\t\\tC#成员类型的可修饰及默认修饰符如下：\\n\\n| 成员类型  | 默认修饰符 |                           可被修饰                           |\\n| :-------: | :--------: | :----------------------------------------------------------: |\\n|   enum    |   public   |                             none                             |\\n|   class   |  private   | public、protected、internal、private、<br />protected internal |\\n| interface |   public   |                             none                             |\\n|  struct   |  private   |                  public、internal、private                   |\\n\\n> public 访问级别最高\\n>\\n> private 访问级别最低\\n\\n### 2、this 关键字\\n\\n看以下代码，有什么问题：\\n\\n```C#\\nclass Strdent\\n{\\n    private string _name;\\t//姓名\\t\\n    public int _age = 19;\\t//年龄\\n    public string _cardID = \\\"145236985674526685\\\";\\t//身份证号码\\n    public void SetName(string _name)\\n    {\\n        _name = _name;\\n    }\\n}\\n```\\n\\n分析： 在 Student 类中定义了一个 private 成员变量 _name,在 SetName()方法的参数中也定义了一个与之同名的变量 _name。这时编译器会发现成员变量和方法的参数重名了。\\n此时，编译器无法分辨代码中出现的这两个 _name 那个是成员变量，哪个是方法中的参数。我们可以借助 this 关键字来解决这个问题。\\n\\n> this 关键字是指当前对象本身。通过 this 可以引用当前类的成员变量和方法。\\n\\n因此可以改变以上代码为：\\n\\n```C#\\nclass Strdent\\n{\\n    private string _name;\\t//姓名\\t\\n    public int _age = 19;\\t//年龄\\n    public string _cardID = \\\"145236985674526685\\\";\\t//身份证号码\\n    public void SetName(string _name)\\n    {\\n        this._name = _name;\\n    }\\n}\\n```\\n\\n> 使用 this 关键字可以解决成员变量和局部变量名称冲突的问题。\\n\\n### 3、C#属性\\n\\n#### 3.1、用方法保证数据安全', 1, '2024-01-16 12:15:27', '2024-01-16 12:15:27', 1);
INSERT INTO `t_leave_word` VALUES (23, 1, '# \\u6DFB\\u52A0\\u7559\\u8A00\\u677F\\\\n\\\\n* \\u6DFB\\u52A0\\u6D4B\\u8BD5\\\\n* dddd', 1, '2024-01-16 13:10:40', '2024-01-16 13:10:40', 1);
INSERT INTO `t_leave_word` VALUES (24, 1, '# 添加留言板\n\n* 添加测试aaa', 1, '2024-01-16 13:16:24', '2024-01-16 13:16:24', 1);
INSERT INTO `t_leave_word` VALUES (25, 1, '## 测试比较长的留言\n\n> 下面是一篇 c# 笔记\n\n<center>\n    <h1>C#笔记</h1>\n</center>\n\n\n\n[TOC] \n\n### 1、C#访问修饰符\n\n​		在C#当中的访问修饰符及作用范围如下：\n\n|     访问修饰符     |                        说明                        |\n| :----------------: | :------------------------------------------------: |\n|       public       |              共有访问。不受任何限制。              |\n|      private       |      私有访问。只有本类能访问，实例不能访问。      |\n|     protected      |   保护访问。只限于本类和子类访问，实例不能访问。   |\n|      internal      |      内部访问。只限于本项目访问，其他不能访问      |\n| protected internal | 内部保护访问。只限于本项目或子类访问，其他不能访问 |\n\n​		C#成员类型的可修饰及默认修饰符如下：\n\n| 成员类型  | 默认修饰符 |                           可被修饰                           |\n| :-------: | :--------: | :----------------------------------------------------------: |\n|   enum    |   public   |                             none                             |\n|   class   |  private   | public、protected、internal、private、<br />protected internal |\n| interface |   public   |                             none                             |\n|  struct   |  private   |                  public、internal、private                   |\n\n> public 访问级别最高\n>\n> private 访问级别最低\n\n### 2、this 关键字\n\n看以下代码，有什么问题：\n\n```C#\nclass Strdent\n{\n    private string _name;	//姓名	\n    public int _age = 19;	//年龄\n    public string _cardID = \"145236985674526685\";	//身份证号码\n    public void SetName(string _name)\n    {\n        _name = _name;\n    }\n}\n```\n\n分析： 在 Student 类中定义了一个 private 成员变量 _name,在 SetName()方法的参数中也定义了一个与之同名的变量 _name。这时编译器会发现成员变量和方法的参数重名了。\n此时，编译器无法分辨代码中出现的这两个 _', 1, '2024-01-16 13:25:08', '2024-01-16 13:25:08', 1);
INSERT INTO `t_leave_word` VALUES (26, 1, '## 测试留言Markdown 编写\n\n> 不要报错\n\n> ~~没有bug~~', 1, '2024-01-16 13:27:50', '2024-01-16 13:27:50', 1);
INSERT INTO `t_leave_word` VALUES (27, 1, '### 留言bug 最后测试', 1, '2024-01-16 13:29:34', '2024-01-16 13:30:23', 0);
INSERT INTO `t_leave_word` VALUES (28, 14164386, 'Markdown 视频\n由于 Markdown 支持 HTML 语法，会对相应的标签进行解析。所以我们可以通过 HTML 语法将视频放入到我们的 Markdown 中。\n\n用法如下：\n\n<iframe height=498 width=510 src=\"视频地址\">\n1\n其中 height 和 width 是 HTML 中的属性可以设置视频的大小，我们也可以使用 HTML 中的其他属性对插入视频进行相应设置。\n\n本地插入\n在 src 中加入本地视频所对应的路径即可。\n\n<iframe height=498 width=510 src=\"本地视频路径\">\n1\n在线插入\n在 src 中加入视频链接即可。\n\n<iframe height=498 width=510 src=\"在线视频链接\">', 1, '2024-03-28 23:49:55', '2024-03-28 23:49:55', 0);

-- ----------------------------
-- Table structure for t_like
-- ----------------------------
DROP TABLE IF EXISTS `t_like`;
CREATE TABLE `t_like`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '点赞表id',
  `user_id` bigint NOT NULL COMMENT '点赞的用户id',
  `type` tinyint NOT NULL COMMENT '点赞类型(1,文章,2,评论,3留言板)',
  `type_id` bigint NOT NULL COMMENT '点赞的文章id',
  `create_time` datetime NOT NULL COMMENT '点赞时间',
  `update_time` datetime NOT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 289 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_like
-- ----------------------------
INSERT INTO `t_like` VALUES (257, 1, 2, 5, '2023-11-06 11:02:40', '2023-11-06 11:02:40');
INSERT INTO `t_like` VALUES (261, 1, 3, 4, '2023-11-06 11:28:30', '2023-11-06 11:28:30');
INSERT INTO `t_like` VALUES (262, 1, 3, 5, '2023-11-06 11:28:36', '2023-11-06 11:28:36');
INSERT INTO `t_like` VALUES (263, 1, 2, 46, '2023-11-06 11:35:39', '2023-11-06 11:35:39');
INSERT INTO `t_like` VALUES (264, 1, 2, 41, '2023-11-06 11:35:41', '2023-11-06 11:35:41');
INSERT INTO `t_like` VALUES (269, 1, 2, 26, '2023-12-11 16:44:51', '2023-12-11 16:44:51');

-- ----------------------------
-- Table structure for t_link
-- ----------------------------
DROP TABLE IF EXISTS `t_link`;
CREATE TABLE `t_link`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT '友链表id',
  `user_id` bigint NOT NULL COMMENT '用户id',
  `name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '网站名称',
  `url` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '网站地址',
  `description` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '网站描述',
  `background` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '网站背景',
  `is_check` tinyint NOT NULL DEFAULT 0 COMMENT '审核状态（0：未通过，1：已通过）',
  `email` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '邮箱地址',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NOT NULL COMMENT '更新时间',
  `is_deleted` tinyint NOT NULL DEFAULT 0 COMMENT '是否删除（0：未删除，1：已删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 36 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_link
-- ----------------------------
INSERT INTO `t_link` VALUES (1, 1, '网站名称', 'http://www.example.com', '这是一个示例网站', 'https://s21.ax1x.com/2024/03/13/pFc3dpT.jpg', 1, 'example@example.com', '2023-11-14 10:13:07', '2024-02-28 10:22:45', 0);
INSERT INTO `t_link` VALUES (2, 1, '网站名称', 'http://www.example.com', '这是一个示例网站', 'https://s21.ax1x.com/2024/03/13/pFc3dpT.jpg', 1, 'example@example.com', '2023-11-14 10:32:55', '2024-01-22 21:38:45', 1);
INSERT INTO `t_link` VALUES (4, 1, '网站名称', 'https://www.baidu.com/', '这是一个示例网站这是一个示例网站这是一个示例网站都是进口粮', 'https://s21.ax1x.com/2024/03/13/pFc3dpT.jpg', 1, 'example@example.com', '2023-11-14 10:37:29', '2023-11-14 10:37:29', 1);
INSERT INTO `t_link` VALUES (6, 1, '网站名称', 'http://www.example.com', '这是一个示例网站', 'https://s21.ax1x.com/2024/03/13/pFc3dpT.jpg', 1, 'example@example.com', '2023-11-14 10:56:16', '2023-11-14 10:56:16', 1);
INSERT INTO `t_link` VALUES (8, 1, '网站名称', 'http://www.example.com', '这是一个示例网站', 'https://s21.ax1x.com/2024/03/13/pFc3dpT.jpg', 1, 'example@example.com', '2023-11-14 10:57:50', '2023-11-14 10:57:50', 1);
INSERT INTO `t_link` VALUES (18, 1, '无语小站', '  http://localhost:99/', '无语小站无语小站', 'https://s21.ax1x.com/2024/03/13/pFc3dpT.jpg', 1, '3490223402@qq.com', '2024-01-22 21:55:08', '2024-01-22 21:55:36', 1);
INSERT INTO `t_link` VALUES (19, 14164386, 'Avibase - 世界鸟类数', 'avibase.bsc-eoc.org', '欢迎访问Avibase Avibase是关于世界鸟类的详细数', 'https://avibase.bsc-eoc.org/images/fairywren_395.png', 0, '2667657399@qq.com', '2024-03-13 14:46:23', '2024-03-13 14:46:23', 1);
INSERT INTO `t_link` VALUES (20, 14164386, 'Avibase - 世界鸟类数', 'avibase.bsc-eoc.org', '欢迎访问Avibase Avibase是关于世界鸟类的详细数', 'https://avibase.bsc-eoc.org/images/fairywren_395.png', 0, '2667657399@qq.com', '2024-03-13 14:46:29', '2024-03-13 14:46:29', 1);
INSERT INTO `t_link` VALUES (21, 14164386, 'Avibase - 世界鸟类数', 'avibase.bsc-eoc.org', '欢迎访问Avibase Avibase是关于世界鸟类的详细数', 'https://avibase.bsc-eoc.org/images/fairywren_395.png', 0, '2667657399@qq.com', '2024-03-13 14:46:35', '2024-03-13 14:46:35', 1);
INSERT INTO `t_link` VALUES (22, 14164386, 'Avibase - 世界鸟类数', 'avibase.bsc-eoc.org', '欢迎访问Avibase Avibase是关于世界鸟类的详细数', 'https://avibase.bsc-eoc.org/images/fairywren_395.png', 0, '2667657399@qq.com', '2024-03-13 14:46:36', '2024-03-13 14:46:36', 1);
INSERT INTO `t_link` VALUES (23, 14164386, 'Avibase - 世界鸟类数', 'avibase.bsc-eoc.org', '欢迎访问Avibase Avibase是关于世界鸟类的详细数', 'https://avibase.bsc-eoc.org/images/fairywren_395.png', 0, '2667657399@qq.com', '2024-03-13 14:46:36', '2024-03-13 14:46:36', 1);
INSERT INTO `t_link` VALUES (24, 14164386, 'Avibase - 世界鸟类数', 'avibase.bsc-eoc.org', '欢迎访问Avibase Avibase是关于世界鸟类的详细数', 'https://avibase.bsc-eoc.org/images/fairywren_395.png', 0, '2667657399@qq.com', '2024-03-13 14:46:36', '2024-03-13 14:46:36', 1);
INSERT INTO `t_link` VALUES (25, 14164386, 'Avibase - 世界鸟类数', 'avibase.bsc-eoc.org', '欢迎访问Avibase Avibase是关于世界鸟类的详细数', 'https://avibase.bsc-eoc.org/images/fairywren_395.png', 0, '2667657399@qq.com', '2024-03-13 14:46:36', '2024-03-13 14:46:36', 1);
INSERT INTO `t_link` VALUES (26, 14164386, 'Avibase - 世界鸟类数', 'avibase.bsc-eoc.org', '欢迎访问Avibase Avibase是关于世界鸟类的详细数', 'https://avibase.bsc-eoc.org/images/fairywren_395.png', 0, '2667657399@qq.com', '2024-03-13 14:46:37', '2024-03-13 14:46:37', 1);
INSERT INTO `t_link` VALUES (27, 14164386, 'Avibase - 世界鸟类数', 'avibase.bsc-eoc.org', '欢迎访问Avibase Avibase是关于世界鸟类的详细数', 'https://avibase.bsc-eoc.org/images/fairywren_395.png', 0, '2667657399@qq.com', '2024-03-13 14:46:37', '2024-03-13 14:46:37', 1);
INSERT INTO `t_link` VALUES (28, 14164386, 'Avibase - 世界鸟类数', 'avibase.bsc-eoc.org', '欢迎访问Avibase Avibase是关于世界鸟类的详细数', 'https://avibase.bsc-eoc.org/images/fairywren_395.png', 0, '2667657399@qq.com', '2024-03-13 14:46:37', '2024-03-13 14:50:40', 1);
INSERT INTO `t_link` VALUES (29, 14164386, 'jjjj', 'jjjj', 'jjjj', 'jjjj', 0, '2667675234@qq.com', '2024-03-13 15:07:36', '2024-03-13 15:07:36', 1);
INSERT INTO `t_link` VALUES (30, 14164386, 'jjllll', 'jlllll', 'llll', 'lllll', 0, 'asdfkjasdfj@qq.com', '2024-03-13 15:08:59', '2024-03-13 15:08:59', 1);
INSERT INTO `t_link` VALUES (31, 14164386, 'jjjkk', 'jjjk', 'jjllll', 'kkk', 0, 'sdfasdfa@qq.com', '2024-03-13 15:33:11', '2024-03-13 15:33:11', 1);
INSERT INTO `t_link` VALUES (32, 14164386, 'jjjkk', 'jjjk', 'jjllll', 'kkk', 0, 'sdfasdfa@qq.com', '2024-03-13 15:33:30', '2024-03-13 15:33:30', 1);
INSERT INTO `t_link` VALUES (33, 14164386, 'iiiii', 'iiiiii', 'iiiiiii', 'iiiiiiiiii', 0, 'sdfasdfa@qq.com', '2024-03-13 15:35:03', '2024-03-13 15:35:03', 1);
INSERT INTO `t_link` VALUES (34, 14164386, 'iiiii', 'iiiiii', 'iiiiiii', 'iiiiiiiiii', 0, 'sdfasdfa@qq.com', '2024-03-13 15:44:53', '2024-03-13 15:44:53', 1);
INSERT INTO `t_link` VALUES (35, 14164386, 'iiiii', 'iiiiii', 'iiiiiii', 'iiiiiiiiii', 0, 'sdfasdfa@qq.com', '2024-03-13 15:57:06', '2024-03-13 15:57:06', 1);
INSERT INTO `t_link` VALUES (36, 14164386, 'Avibase - 世界鸟类数', 'https://avibase.bsc-eoc.org/', '欢迎访问Avibase Avibase是关于世界鸟类的详细数', 'https://avibase.bsc-eoc.org/images/fairywren_395.png', 1, '2667657399@qq.com', '2024-03-13 19:35:08', '2024-03-13 19:35:50', 0);

-- ----------------------------
-- Table structure for t_tag
-- ----------------------------
DROP TABLE IF EXISTS `t_tag`;
CREATE TABLE `t_tag`  (
  `id` bigint UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '标签id',
  `tag_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '标签名称',
  `create_time` datetime NOT NULL COMMENT '标签创建时间',
  `update_time` datetime NOT NULL COMMENT '标签更新时间',
  `is_deleted` tinyint NOT NULL DEFAULT 0 COMMENT '是否删除（0：未删除，1：已删除）',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 20 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of t_tag
-- ----------------------------
INSERT INTO `t_tag` VALUES (1, 'testt1', '2023-10-15 02:02:28', '2024-03-14 11:28:59', 1);
INSERT INTO `t_tag` VALUES (2, 'testt', '2023-10-15 02:02:53', '2024-03-14 12:41:23', 1);
INSERT INTO `t_tag` VALUES (3, 'test1', '2023-10-15 02:03:06', '2024-03-14 12:41:24', 1);
INSERT INTO `t_tag` VALUES (4, 'test22', '2023-10-15 02:03:23', '2024-03-14 12:40:24', 1);
INSERT INTO `t_tag` VALUES (5, 'test111', '2023-10-15 23:17:19', '2024-03-14 12:41:27', 1);
INSERT INTO `t_tag` VALUES (14, '鸵鸟目', '2024-03-13 20:12:55', '2024-03-13 20:12:57', 0);
INSERT INTO `t_tag` VALUES (15, '鸵鸟科', '2024-03-13 21:29:03', '2024-03-14 12:41:35', 0);
INSERT INTO `t_tag` VALUES (16, '鸵鸟属', '2024-03-13 21:29:19', '2024-03-13 21:29:19', 0);
INSERT INTO `t_tag` VALUES (17, '鹬鸵科', '2024-03-14 12:47:22', '2024-03-14 12:47:22', 0);
INSERT INTO `t_tag` VALUES (18, 'bird', '2024-03-28 21:18:46', '2024-03-28 21:18:46', 0);
INSERT INTO `t_tag` VALUES (19, '哔哔鸟', '2024-04-13 13:05:41', '2024-04-13 13:05:41', 0);
INSERT INTO `t_tag` VALUES (20, '猫头鹰', '2024-05-01 20:38:07', '2024-05-01 20:38:07', 0);

SET FOREIGN_KEY_CHECKS = 1;
